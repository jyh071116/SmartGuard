digraph G {
// Function: 38721.sol-Ledger-Ledger(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x0

IRs:
TMP_88(bool) = _owner == 0
CONDITION TMP_88"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
seenHere[_owner] = true

IRs:
REF_20(bool) -> seenHere[_owner]
REF_20(bool) (->seenHere) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
seenHereA.push(_owner)

IRs:
REF_22 -> LENGTH seenHereA
TMP_90(uint256) := REF_22(uint256)
TMP_91(uint256) = TMP_90 + 1
REF_22(uint256) (->seenHereA) := TMP_91(uint256)
REF_23(address) -> seenHereA[TMP_90]
REF_23(address) (->seenHereA) := _owner(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
totalSupply = _preMined * ONE

IRs:
TMP_92(uint256) = _preMined * ONE
totalSupply(uint256) := TMP_92(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_owner] = totalSupply

IRs:
REF_24(uint256) -> balances[_owner]
REF_24(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 38721.sol-Ledger-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_60(mapping(address => uint256)) -> allowed[_owner]
REF_61(uint256) -> REF_60[_spender]
RETURN REF_61"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 38721.sol-Ledger-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
usedToday[_addr] >= balances[_addr]

IRs:
REF_54(uint256) -> usedToday[_addr]
REF_55(uint256) -> balances[_addr]
TMP_127(bool) = REF_54 >= REF_55
CONDITION TMP_127"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
balances[_addr] - usedToday[_addr]

IRs:
REF_56(uint256) -> balances[_addr]
REF_57(uint256) -> usedToday[_addr]
TMP_128(uint256) = REF_56 - REF_57
RETURN TMP_128"];
}
// Function: 38721.sol-Ledger-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_86(bool) = _addr == 0
CONDITION TMP_86"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Ledger-changeToken(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
token = Token(_token)

IRs:
TMP_131 = CONVERT _token to Token
token(address) := TMP_131(Token)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 38721.sol-Ledger-changeUsed(address,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
myToday = int256(usedToday[_addr]) + amount

IRs:
REF_47(uint256) -> usedToday[_addr]
TMP_113 = CONVERT REF_47 to int256
TMP_114(int256) = TMP_113 + amount
myToday(int256) := TMP_114(int256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
usedToday[_addr] = uint256(myToday)

IRs:
REF_48(uint256) -> usedToday[_addr]
TMP_115 = CONVERT myToday to uint256
REF_48(uint256) (->usedToday) := TMP_115(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Ledger.onlyToken()()"];
3->1;
}
// Function: 38721.sol-Ledger-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_140(bool) = msg.sender != owner
CONDITION TMP_140"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Ledger-onlyToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != token

IRs:
TMP_141(bool) = msg.sender != token
CONDITION TMP_141"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Ledger-onlyTokenOrOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != token && msg.sender != owner

IRs:
TMP_142(bool) = msg.sender != token
TMP_143(bool) = msg.sender != owner
TMP_144(bool) = TMP_142 && TMP_143
CONDITION TMP_144"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Ledger-reduceTotalSupply(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
amount > totalSupply

IRs:
TMP_133(bool) = amount > totalSupply
CONDITION TMP_133"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply -= amount

IRs:
totalSupply(uint256) = totalSupply - amount"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Ledger.onlyToken()()"];
5->1;
}
// Function: 38721.sol-Ledger-resetUsedToday(uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->12;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->11;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < numTimes && i + startI < seenHereA.length

IRs:
TMP_117(bool) = i < numTimes
TMP_118(uint256) = i + startI
REF_49 -> LENGTH seenHereA
TMP_119(bool) = TMP_118 < REF_49
TMP_120(bool) = TMP_117 && TMP_119
CONDITION TMP_120"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
usedToday[seenHereA[i + startI]] != 0

IRs:
TMP_121(uint256) = i + startI
REF_50(address) -> seenHereA[TMP_121]
REF_51(uint256) -> usedToday[REF_50]
TMP_122(bool) = REF_51 != 0
CONDITION TMP_122"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
delete usedToday[seenHereA[i + startI]]

IRs:
TMP_123(uint256) = i + startI
REF_52(address) -> seenHereA[TMP_123]
REF_53(uint256) -> usedToday[REF_52]
usedToday = delete REF_53 "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numDeleted ++

IRs:
TMP_124(uint8) := numDeleted(uint8)
numDeleted(uint8) = numDeleted + 1"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_125(uint256) := i(uint256)
i(uint256) = i + 1"];
10->5;
11[label="Node Type: RETURN 11

EXPRESSION:
numDeleted

IRs:
RETURN numDeleted"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
onlyTokenOrOwner()

IRs:
MODIFIER_CALL, Ledger.onlyTokenOrOwner()()"];
12->1;
}
// Function: 38721.sol-Ledger-setBalance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: IF 1

EXPRESSION:
balances[_addr] == amount

IRs:
REF_62(uint256) -> balances[_addr]
TMP_135(bool) = REF_62 == amount
CONDITION TMP_135"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
balances[_addr] < amount

IRs:
REF_63(uint256) -> balances[_addr]
TMP_136(bool) = REF_63 < amount
CONDITION TMP_136"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
increase = amount - balances[_addr]

IRs:
REF_64(uint256) -> balances[_addr]
TMP_137(uint256) = amount - REF_64
increase(uint256) := TMP_137(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
totalSupply += increase

IRs:
totalSupply(uint256) = totalSupply + increase"];
6->9;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
decrease = balances[_addr] - amount

IRs:
REF_65(uint256) -> balances[_addr]
TMP_138(uint256) = REF_65 - amount
decrease(uint256) := TMP_138(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
totalSupply -= decrease

IRs:
totalSupply(uint256) = totalSupply - decrease"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[_addr] = amount

IRs:
REF_66(uint256) -> balances[_addr]
REF_66(uint256) (->balances) := amount(uint256)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyTokenOrOwner()

IRs:
MODIFIER_CALL, Ledger.onlyTokenOrOwner()()"];
11->1;
}
// Function: 38721.sol-Ledger-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalSupply = 0

IRs:
totalSupply(uint256) := 0(uint256)"];
}
// Function: 38721.sol-Ledger-tokenApprove(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[_from][_spender] = _value

IRs:
REF_58(mapping(address => uint256)) -> allowed[_from]
REF_59(uint256) -> REF_58[_spender]
REF_59(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(_from,_spender,_value)

IRs:
Emit Approval(_from,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Ledger.onlyToken()()"];
4->1;
}
// Function: 38721.sol-Ledger-tokenTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->17;
1[label="Node Type: IF 1

EXPRESSION:
amount > balances[_from]

IRs:
REF_25(uint256) -> balances[_from]
TMP_93(bool) = amount > REF_25
CONDITION TMP_93"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(balances[_to] + amount) < balances[_to]

IRs:
REF_26(uint256) -> balances[_to]
TMP_94(uint256) = REF_26 + amount
REF_27(uint256) -> balances[_to]
TMP_95(bool) = TMP_94 < REF_27
CONDITION TMP_95"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
amount == 0

IRs:
TMP_96(bool) = amount == 0
CONDITION TMP_96"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[_from] -= amount

IRs:
REF_28(uint256) -> balances[_from]
REF_28(-> balances) = REF_28 - amount"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[_to] += amount

IRs:
REF_29(uint256) -> balances[_to]
REF_29(-> balances) = REF_29 + amount"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
seenHere[_to] == false

IRs:
REF_30(bool) -> seenHere[_to]
TMP_97(bool) = REF_30 == False
CONDITION TMP_97"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
seenHereA.push(_to)

IRs:
REF_32 -> LENGTH seenHereA
TMP_99(uint256) := REF_32(uint256)
TMP_100(uint256) = TMP_99 + 1
REF_32(uint256) (->seenHereA) := TMP_100(uint256)
REF_33(address) -> seenHereA[TMP_99]
REF_33(address) (->seenHereA) := _to(address)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
seenHere[_to] = true

IRs:
REF_34(bool) -> seenHere[_to]
REF_34(bool) (->seenHere) := True(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Ledger.onlyToken()()"];
17->1;
}
// Function: 38721.sol-Ledger-tokenTransferFrom(address,address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: IF 1

EXPRESSION:
allowed[_from][_sender] <= amount

IRs:
REF_35(mapping(address => uint256)) -> allowed[_from]
REF_36(uint256) -> REF_35[_sender]
TMP_102(bool) = REF_36 <= amount
CONDITION TMP_102"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
amount > balanceOf(_from)

IRs:
TMP_103(uint256) = INTERNAL_CALL, Ledger.balanceOf(address)(_from)
TMP_104(bool) = amount > TMP_103
CONDITION TMP_104"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
amount == 0

IRs:
TMP_105(bool) = amount == 0
CONDITION TMP_105"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
(balances[_to] + amount) < amount

IRs:
REF_37(uint256) -> balances[_to]
TMP_106(uint256) = REF_37 + amount
TMP_107(bool) = TMP_106 < amount
CONDITION TMP_107"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: RETURN 11

EXPRESSION:
false

IRs:
RETURN False"];
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[_from] -= amount

IRs:
REF_38(uint256) -> balances[_from]
REF_38(-> balances) = REF_38 - amount"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[_to] += amount

IRs:
REF_39(uint256) -> balances[_to]
REF_39(-> balances) = REF_39 + amount"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
allowed[_from][_sender] -= amount

IRs:
REF_40(mapping(address => uint256)) -> allowed[_from]
REF_41(uint256) -> REF_40[_sender]
REF_41(-> allowed) = REF_41 - amount"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
seenHere[_to] == false

IRs:
REF_42(bool) -> seenHere[_to]
TMP_108(bool) = REF_42 == False
CONDITION TMP_108"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
seenHereA.push(_to)

IRs:
REF_44 -> LENGTH seenHereA
TMP_110(uint256) := REF_44(uint256)
TMP_111(uint256) = TMP_110 + 1
REF_44(uint256) (->seenHereA) := TMP_111(uint256)
REF_45(address) -> seenHereA[TMP_110]
REF_45(address) (->seenHereA) := _to(address)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
seenHere[_to] = true

IRs:
REF_46(bool) -> seenHere[_to]
REF_46(bool) (->seenHere) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
true

IRs:
RETURN True"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onlyToken()

IRs:
MODIFIER_CALL, Ledger.onlyToken()()"];
21->1;
}
// Function: 38721.sol-Mutex-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_3(bool) = _addr == 0
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Mutex-mutexed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
locked

IRs:
CONDITION locked"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
4->5;
5[label="Node Type: _ 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
}
// Function: 38721.sol-Mutex-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_6(bool) = msg.sender != owner
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Mutex-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
}
// Function: 38721.sol-Mutex-unMutex()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 38721.sol-Owned-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_0(bool) = _addr == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_2(bool) = msg.sender != owner
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Rental-Rental(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x0

IRs:
TMP_9(bool) = _owner == 0
CONDITION TMP_9"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
}
// Function: 38721.sol-Rental-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_7(bool) = _addr == 0
CONDITION TMP_7"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Rental-claimBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 38721.sol-Rental-exec(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: IF 1

EXPRESSION:
! dest.call(msg.data)

IRs:
TMP_10(bool) = LOW_LEVEL_CALL, dest:dest, function:call, arguments:['msg.data']  
TMP_11 = UnaryType.BANG TMP_10 
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->1;
}
// Function: 38721.sol-Rental-offer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 38721.sol-Rental-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_13(bool) = msg.sender != owner
CONDITION TMP_13"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Token-Token(address,string,uint8,string,address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_owner == 0x0

IRs:
TMP_17(bool) = _owner == 0
CONDITION TMP_17"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _owner

IRs:
owner(address) := _owner(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
name = _tokenName

IRs:
name(string) := _tokenName(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ONE = 10 ** uint256(decimals)

IRs:
TMP_18 = CONVERT decimals to uint256
TMP_19(uint256) = 10 ** TMP_18
ONE(uint256) := TMP_19(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ledger = Ledger(_ledger)

IRs:
TMP_20 = CONVERT _ledger to Ledger
ledger(Ledger) := TMP_20(Ledger)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rentalContract = Rental(_rental)

IRs:
TMP_21 = CONVERT _rental to Rental
rentalContract(Rental) := TMP_21(Rental)"];
}
// Function: 38721.sol-Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledger.allowance(_from,_to)

IRs:
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:allowance, arguments:['_from', '_to']  
RETURN TMP_80"];
}
// Function: 38721.sol-Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ledger.tokenApprove(msg.sender,_spender,_value)

IRs:
TMP_81(bool) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:tokenApprove, arguments:['msg.sender', '_spender', '_value']  
CONDITION TMP_81"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 38721.sol-Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledger.balanceOf(_addr)

IRs:
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['_addr']  
RETURN TMP_83"];
}
// Function: 38721.sol-Token-burn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = ledger.balanceOf(msg.sender)

IRs:
TMP_56(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['msg.sender']  
balance(uint256) := TMP_56(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_amount > balance

IRs:
TMP_57(bool) = _amount > balance
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledger.setBalance(msg.sender,balance - _amount)

IRs:
TMP_58(uint256) = balance - _amount
HIGH_LEVEL_CALL, dest:ledger(Ledger), function:setBalance, arguments:['msg.sender', 'TMP_58']  "];
}
// Function: 38721.sol-Token-changeClub(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_22(bool) = _addr == 0
CONDITION TMP_22"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
club = _addr

IRs:
club(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Token-changeLedger(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_28(bool) = _addr == 0
CONDITION TMP_28"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LedgerUpdated(msg.sender,_addr)

IRs:
Emit LedgerUpdated(msg.sender,_addr)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledger = Ledger(_addr)

IRs:
TMP_30 = CONVERT _addr to Ledger
ledger(Ledger) := TMP_30(Ledger)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
6->1;
}
// Function: 38721.sol-Token-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_15(bool) = _addr == 0
CONDITION TMP_15"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Token-changePrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
price = _num

IRs:
price(uint256) := _num(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 38721.sol-Token-changeRental(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: IF 1

EXPRESSION:
_addr == 0x0

IRs:
TMP_32(bool) = _addr == 0
CONDITION TMP_32"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rentalContract = Rental(_addr)

IRs:
TMP_33 = CONVERT _addr to Rental
rentalContract(Rental) := TMP_33(Rental)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 38721.sol-Token-changeTimes(uint8,uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
rollOverTime = _rollOver

IRs:
rollOverTime(uint8) := _rollOver(uint8)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
startTime = _start

IRs:
startTime(uint8) := _start(uint8)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 38721.sol-Token-checkIn(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
needed = int256(price * ONE * _numCheckins)

IRs:
TMP_60(uint256) = price * ONE
TMP_61(uint256) = TMP_60 * _numCheckins
TMP_62 = CONVERT TMP_61 to int256
needed(int256) := TMP_62(int256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
int256(ledger.balanceOf(msg.sender)) > needed

IRs:
TMP_63(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['msg.sender']  
TMP_64 = CONVERT TMP_63 to int256
TMP_65(bool) = TMP_64 > needed
CONDITION TMP_65"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledger.changeUsed(msg.sender,needed)

IRs:
HIGH_LEVEL_CALL, dest:ledger(Ledger), function:changeUsed, arguments:['msg.sender', 'needed']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 38721.sol-Token-claimUnrented()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amount = rentalContract.claimBalance(msg.sender)

IRs:
TMP_54(uint256) = HIGH_LEVEL_CALL, dest:rentalContract(Rental), function:claimBalance, arguments:['msg.sender']  
amount(uint256) := TMP_54(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ledger.tokenTransfer(rentalContract,msg.sender,amount)

IRs:
TMP_55(bool) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:tokenTransfer, arguments:['rentalContract', 'msg.sender', 'amount']  "];
}
// Function: 38721.sol-Token-completeCrowdsale()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersOn = true

IRs:
transfersOn(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lock(owner)

IRs:
INTERNAL_CALL, Token.lock(address)(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->1;
}
// Function: 38721.sol-Token-dilute(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: IF 1

EXPRESSION:
amount > lockedSupply

IRs:
TMP_40(bool) = amount > lockedSupply
CONDITION TMP_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Dilution(_destAddr,amount)

IRs:
Emit Dilution(_destAddr,amount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
lockedSupply -= amount

IRs:
lockedSupply(uint256) = lockedSupply - amount"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
curBalance = ledger.balanceOf(_destAddr)

IRs:
TMP_42(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['_destAddr']  
curBalance(uint256) := TMP_42(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
curBalance = safeAdd(amount,curBalance)

IRs:
TMP_43(uint256) = INTERNAL_CALL, Token.safeAdd(uint256,uint256)(amount,curBalance)
curBalance(uint256) := TMP_43(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
ledger.setBalance(_destAddr,curBalance)

IRs:
HIGH_LEVEL_CALL, dest:ledger(Ledger), function:setBalance, arguments:['_destAddr', 'curBalance']  "];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
9->1;
}
// Function: 38721.sol-Token-lock(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
myBalance = ledger.balanceOf(_seizeAddr)

IRs:
TMP_36(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['_seizeAddr']  
myBalance(uint256) := TMP_36(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
lockedSupply += myBalance

IRs:
lockedSupply(uint256) = lockedSupply + myBalance"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
ledger.setBalance(_seizeAddr,0)

IRs:
HIGH_LEVEL_CALL, dest:ledger(Ledger), function:setBalance, arguments:['_seizeAddr', '0']  "];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
mutexed()

IRs:
MODIFIER_CALL, Mutex.mutexed()()"];
5->1;
}
// Function: 38721.sol-Token-mutexed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
locked

IRs:
CONDITION locked"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
locked = true

IRs:
locked(bool) := True(bool)"];
4->5;
5[label="Node Type: _ 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
}
// Function: 38721.sol-Token-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_85(bool) = msg.sender != owner
CONDITION TMP_85"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 38721.sol-Token-pauseTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersOn = false

IRs:
transfersOn(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 38721.sol-Token-rentOut(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ledger.balanceOf(msg.sender) < num

IRs:
TMP_50(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:balanceOf, arguments:['msg.sender']  
TMP_51(bool) = TMP_50 < num
CONDITION TMP_51"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rentalContract.offer(msg.sender,num)

IRs:
HIGH_LEVEL_CALL, dest:rentalContract(Rental), function:offer, arguments:['msg.sender', 'num']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
ledger.tokenTransfer(msg.sender,rentalContract,num)

IRs:
TMP_53(bool) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:tokenTransfer, arguments:['msg.sender', 'rentalContract', 'num']  "];
}
// Function: 38721.sol-Token-resumeTransfers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transfersOn = true

IRs:
transfersOn(bool) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 38721.sol-Token-safeAdd(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(a + b) < a

IRs:
TMP_25(uint256) = a + b
TMP_26(bool) = TMP_25 < a
CONDITION TMP_26"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(a + b)

IRs:
TMP_27(uint256) = a + b
RETURN TMP_27"];
}
// Function: 38721.sol-Token-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ONE = 10 ** 8

IRs:
TMP_84(uint256) = 10 ** 8
ONE(uint256) := TMP_84(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
price = 5000

IRs:
price(uint256) := 5000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
rollOverTime = 4

IRs:
rollOverTime(uint8) := 4(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
startTime = 8

IRs:
startTime(uint8) := 8(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
live = false

IRs:
live(bool) := False(bool)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
lockedSupply = 0

IRs:
lockedSupply(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
version = 0.1

IRs:
version(string) := 0.1(string)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
transfersOn = false

IRs:
transfersOn(bool) := False(bool)"];
}
// Function: 38721.sol-Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
ledger.totalSupply()

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:totalSupply, arguments:[]  
RETURN TMP_67"];
}
// Function: 38721.sol-Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! transfersOn && msg.sender != owner

IRs:
TMP_68 = UnaryType.BANG transfersOn 
TMP_69(bool) = msg.sender != owner
TMP_70(bool) = TMP_68 && TMP_69
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ledger.tokenTransfer(msg.sender,_to,_amount)

IRs:
TMP_71(bool) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:tokenTransfer, arguments:['msg.sender', '_to', '_amount']  
TMP_72 = UnaryType.BANG TMP_71 
CONDITION TMP_72"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 38721.sol-Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! transfersOn && msg.sender != owner

IRs:
TMP_74 = UnaryType.BANG transfersOn 
TMP_75(bool) = msg.sender != owner
TMP_76(bool) = TMP_74 && TMP_75
CONDITION TMP_76"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
! ledger.tokenTransferFrom(msg.sender,_from,_to,_amount)

IRs:
TMP_77(bool) = HIGH_LEVEL_CALL, dest:ledger(Ledger), function:tokenTransferFrom, arguments:['msg.sender', '_from', '_to', '_amount']  
TMP_78 = UnaryType.BANG TMP_77 
CONDITION TMP_78"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
false

IRs:
RETURN False"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_amount)

IRs:
Emit Transfer(msg.sender,_to,_amount)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 38721.sol-Token-unMutex()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
locked = false

IRs:
locked(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
}
