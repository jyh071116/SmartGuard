digraph G {
// Function: 38923.sol-DSAuth-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 38923.sol-DSAuth-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_11 = UnaryType.BANG x 
CONDITION TMP_11"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38923.sol-DSAuth-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_12(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_12)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSAuth-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_14(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_14)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSAuth-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = src == TMP_5
CONDITION TMP_6"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_7(bool) = src == owner
CONDITION TMP_7"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_8 = CONVERT 0 to DSAuthority
TMP_9(bool) = authority == TMP_8
CONDITION TMP_9"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_10(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_10"];
}
// Function: 38923.sol-DSAuth-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSAuth-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSAuthority-canCall(address,address,bytes4)
digraph{
}
// Function: 38923.sol-DSCache-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 38923.sol-DSCache-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_289(uint256) = x + y
z(uint256) := TMP_289(uint256)
TMP_290(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_290)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_374 = UnaryType.BANG x 
CONDITION TMP_374"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38923.sol-DSCache-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_386(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_386)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSCache-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_388(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_388)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSCache-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_360 = CONVERT x to uint128
z(uint128) := TMP_360(uint128)
TMP_361(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_361)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_301(uint256) = x / y
z(uint256) := TMP_301(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_304(uint128) = x + y
z(uint128) := TMP_304(uint128)
TMP_305(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_305)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_316(uint128) = x / y
z(uint128) := TMP_316(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_318(bool) = x >= y
CONDITION TMP_318"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_317(bool) = x <= y
CONDITION TMP_317"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_310(uint128) = x * y
z(uint128) := TMP_310(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_311(bool) = x == 0
TMP_312(uint128) = z / x
TMP_313(bool) = TMP_312 == y
TMP_314(bool) = TMP_311 || TMP_313
INTERNAL_CALL, DSAuth.assert(bool)(TMP_314)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_307(uint128) = x - y
z(uint128) := TMP_307(uint128)
TMP_308(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_308)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_320(bool) = x >= y
CONDITION TMP_320"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_319(bool) = x <= y
CONDITION TMP_319"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_368 = CONVERT this to address
TMP_369(bool) = src == TMP_368
CONDITION TMP_369"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_370(bool) = src == owner
CONDITION TMP_370"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_371 = CONVERT 0 to DSAuthority
TMP_372(bool) = authority == TMP_371
CONDITION TMP_372"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_373(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_373"];
}
// Function: 38923.sol-DSCache-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_303(bool) = x >= y
CONDITION TMP_303"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_302(bool) = x <= y
CONDITION TMP_302"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_295(uint256) = x * y
z(uint256) := TMP_295(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_296(bool) = x == 0
TMP_297(uint256) = z / x
TMP_298(bool) = TMP_297 == y
TMP_299(bool) = TMP_296 || TMP_298
INTERNAL_CALL, DSAuth.assert(bool)(TMP_299)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 38923.sol-DSCache-peek()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(val,has && now < zzz)

IRs:
TMP_375(bool) = now < zzz
TMP_376(bool) = has && TMP_375
RETURN val,TMP_376"];
}
// Function: 38923.sol-DSCache-poke(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = wut

IRs:
val(bytes32) := wut(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
has = true

IRs:
has(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 38923.sol-DSCache-prod(bytes32,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
zzz = Zzz

IRs:
zzz(uint128) := Zzz(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
poke(wut)

IRs:
INTERNAL_CALL, DSValue.poke(bytes32)(wut)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 38923.sol-DSCache-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_337(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_337"];
}
// Function: 38923.sol-DSCache-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_345 = CONVERT x to uint256
TMP_346(uint256) = TMP_345 * RAY
TMP_347(uint128) = y / 2
TMP_348(uint256) = TMP_346 + TMP_347
TMP_349(uint256) = TMP_348 / y
TMP_350(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_349)
z(uint128) := TMP_350(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-read()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(wut,has) = peek()

IRs:
TUPLE_2(bytes32,bool) = INTERNAL_CALL, DSCache.peek()()
wut(bytes32)= UNPACK TUPLE_2 index: 0 
has(bool)= UNPACK TUPLE_2 index: 1 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(now < zzz)

IRs:
TMP_377(bool) = now < zzz
INTERNAL_CALL, DSAuth.assert(bool)(TMP_377)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(has)

IRs:
INTERNAL_CALL, DSAuth.assert(bool)(has)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
wut

IRs:
RETURN wut"];
}
// Function: 38923.sol-DSCache-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_359(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_359"];
}
// Function: 38923.sol-DSCache-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_358(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_358"];
}
// Function: 38923.sol-DSCache-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_339 = CONVERT x to uint256
TMP_340(uint256) = TMP_339 * y
TMP_341(uint128) = RAY / 2
TMP_342(uint256) = TMP_340 + TMP_341
TMP_343(uint256) = TMP_342 / RAY
TMP_344(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_343)
z(uint128) := TMP_344(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_351(bool) = n != 0
CONDITION TMP_351"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_352(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_352(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_353(uint64) = n % 2
TMP_354(bool) = TMP_353 != 0
CONDITION TMP_354"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_355(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_355(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_356(uint64) = n % 2
TMP_357(bool) = TMP_356 != 0
CONDITION TMP_357"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_338(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_338"];
}
// Function: 38923.sol-DSCache-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSCache-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSCache-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_383(uint256) = 10 ** 18
WAD(uint128) := TMP_383(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_384(uint256) = 10 ** 27
RAY(uint128) := TMP_384(uint256)"];
}
// Function: 38923.sol-DSCache-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_292(uint256) = x - y
z(uint256) := TMP_292(uint256)
TMP_293(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_293)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-void()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
has = false

IRs:
has(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSCache-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_321(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_321"];
}
// Function: 38923.sol-DSCache-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_329 = CONVERT x to uint256
TMP_330(uint256) = TMP_329 * WAD
TMP_331(uint128) = y / 2
TMP_332(uint256) = TMP_330 + TMP_331
TMP_333(uint256) = TMP_332 / y
TMP_334(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_333)
z(uint128) := TMP_334(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_336(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_336"];
}
// Function: 38923.sol-DSCache-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_335(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_335"];
}
// Function: 38923.sol-DSCache-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_323 = CONVERT x to uint256
TMP_324(uint256) = TMP_323 * y
TMP_325(uint128) = WAD / 2
TMP_326(uint256) = TMP_324 + TMP_325
TMP_327(uint256) = TMP_326 / WAD
TMP_328(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_327)
z(uint128) := TMP_328(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSCache-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_322(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_322"];
}
// Function: 38923.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_17(uint256) = x + y
z(uint256) := TMP_17(uint256)
TMP_18(bool) = z >= x
TMP_19(None) = SOLIDITY_CALL assert(bool)(TMP_18)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_88 = CONVERT x to uint128
z(uint128) := TMP_88(uint128)
TMP_89(bool) = z == x
TMP_90(None) = SOLIDITY_CALL assert(bool)(TMP_89)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_29(uint256) = x / y
z(uint256) := TMP_29(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_32(uint128) = x + y
z(uint128) := TMP_32(uint128)
TMP_33(bool) = z >= x
TMP_34(None) = SOLIDITY_CALL assert(bool)(TMP_33)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_44(uint128) = x / y
z(uint128) := TMP_44(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_46(bool) = x >= y
CONDITION TMP_46"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_45(bool) = x <= y
CONDITION TMP_45"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_38(uint128) = x * y
z(uint128) := TMP_38(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_39(bool) = x == 0
TMP_40(uint128) = z / x
TMP_41(bool) = TMP_40 == y
TMP_42(bool) = TMP_39 || TMP_41
TMP_43(None) = SOLIDITY_CALL assert(bool)(TMP_42)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_35(uint128) = x - y
z(uint128) := TMP_35(uint128)
TMP_36(bool) = z <= x
TMP_37(None) = SOLIDITY_CALL assert(bool)(TMP_36)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_48(bool) = x >= y
CONDITION TMP_48"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_47(bool) = x <= y
CONDITION TMP_47"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_31(bool) = x >= y
CONDITION TMP_31"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_30(bool) = x <= y
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_23(uint256) = x * y
z(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(x == 0 || z / x == y)

IRs:
TMP_24(bool) = x == 0
TMP_25(uint256) = z / x
TMP_26(bool) = TMP_25 == y
TMP_27(bool) = TMP_24 || TMP_26
TMP_28(None) = SOLIDITY_CALL assert(bool)(TMP_27)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_65(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_65"];
}
// Function: 38923.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_73 = CONVERT x to uint256
TMP_74(uint256) = TMP_73 * RAY
TMP_75(uint128) = y / 2
TMP_76(uint256) = TMP_74 + TMP_75
TMP_77(uint256) = TMP_76 / y
TMP_78(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_77)
z(uint128) := TMP_78(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_87(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_87"];
}
// Function: 38923.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_86(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_86"];
}
// Function: 38923.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_67 = CONVERT x to uint256
TMP_68(uint256) = TMP_67 * y
TMP_69(uint128) = RAY / 2
TMP_70(uint256) = TMP_68 + TMP_69
TMP_71(uint256) = TMP_70 / RAY
TMP_72(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_71)
z(uint128) := TMP_72(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_79(bool) = n != 0
CONDITION TMP_79"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_80(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_80(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_81(uint64) = n % 2
TMP_82(bool) = TMP_81 != 0
CONDITION TMP_82"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_83(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_83(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_84(uint64) = n % 2
TMP_85(bool) = TMP_84 != 0
CONDITION TMP_85"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_66(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_66"];
}
// Function: 38923.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_91(uint256) = 10 ** 18
WAD(uint128) := TMP_91(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_92(uint256) = 10 ** 27
RAY(uint128) := TMP_92(uint256)"];
}
// Function: 38923.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_20(uint256) = x - y
z(uint256) := TMP_20(uint256)
TMP_21(bool) = z <= x
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_49(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_49"];
}
// Function: 38923.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_57 = CONVERT x to uint256
TMP_58(uint256) = TMP_57 * WAD
TMP_59(uint128) = y / 2
TMP_60(uint256) = TMP_58 + TMP_59
TMP_61(uint256) = TMP_60 / y
TMP_62(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_61)
z(uint128) := TMP_62(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_64(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_64"];
}
// Function: 38923.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_63(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_63"];
}
// Function: 38923.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_51 = CONVERT x to uint256
TMP_52(uint256) = TMP_51 * y
TMP_53(uint128) = WAD / 2
TMP_54(uint256) = TMP_52 + TMP_53
TMP_55(uint256) = TMP_54 / WAD
TMP_56(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_55)
z(uint128) := TMP_56(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_50(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_50"];
}
// Function: 38923.sol-DSNote-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 38923.sol-DSThing-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 38923.sol-DSThing-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_93(uint256) = x + y
z(uint256) := TMP_93(uint256)
TMP_94(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_94)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_178 = UnaryType.BANG x 
CONDITION TMP_178"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38923.sol-DSThing-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_182(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_182)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSThing-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_184(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_184)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSThing-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_164 = CONVERT x to uint128
z(uint128) := TMP_164(uint128)
TMP_165(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_165)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_105(uint256) = x / y
z(uint256) := TMP_105(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_108(uint128) = x + y
z(uint128) := TMP_108(uint128)
TMP_109(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_109)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_120(uint128) = x / y
z(uint128) := TMP_120(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_122(bool) = x >= y
CONDITION TMP_122"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_121(bool) = x <= y
CONDITION TMP_121"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_114(uint128) = x * y
z(uint128) := TMP_114(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_115(bool) = x == 0
TMP_116(uint128) = z / x
TMP_117(bool) = TMP_116 == y
TMP_118(bool) = TMP_115 || TMP_117
INTERNAL_CALL, DSAuth.assert(bool)(TMP_118)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_111(uint128) = x - y
z(uint128) := TMP_111(uint128)
TMP_112(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_112)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_124(bool) = x >= y
CONDITION TMP_124"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_123(bool) = x <= y
CONDITION TMP_123"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_172 = CONVERT this to address
TMP_173(bool) = src == TMP_172
CONDITION TMP_173"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_174(bool) = src == owner
CONDITION TMP_174"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_175 = CONVERT 0 to DSAuthority
TMP_176(bool) = authority == TMP_175
CONDITION TMP_176"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_177(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_177"];
}
// Function: 38923.sol-DSThing-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_107(bool) = x >= y
CONDITION TMP_107"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_106(bool) = x <= y
CONDITION TMP_106"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_99(uint256) = x * y
z(uint256) := TMP_99(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_100(bool) = x == 0
TMP_101(uint256) = z / x
TMP_102(bool) = TMP_101 == y
TMP_103(bool) = TMP_100 || TMP_102
INTERNAL_CALL, DSAuth.assert(bool)(TMP_103)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 38923.sol-DSThing-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_141(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_141"];
}
// Function: 38923.sol-DSThing-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_149 = CONVERT x to uint256
TMP_150(uint256) = TMP_149 * RAY
TMP_151(uint128) = y / 2
TMP_152(uint256) = TMP_150 + TMP_151
TMP_153(uint256) = TMP_152 / y
TMP_154(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_153)
z(uint128) := TMP_154(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_163(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_163"];
}
// Function: 38923.sol-DSThing-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_162(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_162"];
}
// Function: 38923.sol-DSThing-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_143 = CONVERT x to uint256
TMP_144(uint256) = TMP_143 * y
TMP_145(uint128) = RAY / 2
TMP_146(uint256) = TMP_144 + TMP_145
TMP_147(uint256) = TMP_146 / RAY
TMP_148(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_147)
z(uint128) := TMP_148(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_155(bool) = n != 0
CONDITION TMP_155"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_156(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_156(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_157(uint64) = n % 2
TMP_158(bool) = TMP_157 != 0
CONDITION TMP_158"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_159(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_159(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_160(uint64) = n % 2
TMP_161(bool) = TMP_160 != 0
CONDITION TMP_161"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_142(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_142"];
}
// Function: 38923.sol-DSThing-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSThing-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSThing-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_179(uint256) = 10 ** 18
WAD(uint128) := TMP_179(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_180(uint256) = 10 ** 27
RAY(uint128) := TMP_180(uint256)"];
}
// Function: 38923.sol-DSThing-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_96(uint256) = x - y
z(uint256) := TMP_96(uint256)
TMP_97(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_97)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_125(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_125"];
}
// Function: 38923.sol-DSThing-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_133 = CONVERT x to uint256
TMP_134(uint256) = TMP_133 * WAD
TMP_135(uint128) = y / 2
TMP_136(uint256) = TMP_134 + TMP_135
TMP_137(uint256) = TMP_136 / y
TMP_138(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_137)
z(uint128) := TMP_138(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_140(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_140"];
}
// Function: 38923.sol-DSThing-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_139(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_139"];
}
// Function: 38923.sol-DSThing-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_127 = CONVERT x to uint256
TMP_128(uint256) = TMP_127 * y
TMP_129(uint128) = WAD / 2
TMP_130(uint256) = TMP_128 + TMP_129
TMP_131(uint256) = TMP_130 / WAD
TMP_132(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_131)
z(uint128) := TMP_132(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSThing-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_126(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_126"];
}
// Function: 38923.sol-DSValue-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 38923.sol-DSValue-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_186(uint256) = x + y
z(uint256) := TMP_186(uint256)
TMP_187(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_187)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_271 = UnaryType.BANG x 
CONDITION TMP_271"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38923.sol-DSValue-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_280(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_280)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSValue-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_282(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_282)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-DSValue-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_257 = CONVERT x to uint128
z(uint128) := TMP_257(uint128)
TMP_258(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_258)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_198(uint256) = x / y
z(uint256) := TMP_198(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_201(uint128) = x + y
z(uint128) := TMP_201(uint128)
TMP_202(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_202)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_213(uint128) = x / y
z(uint128) := TMP_213(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_215(bool) = x >= y
CONDITION TMP_215"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_214(bool) = x <= y
CONDITION TMP_214"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_207(uint128) = x * y
z(uint128) := TMP_207(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_208(bool) = x == 0
TMP_209(uint128) = z / x
TMP_210(bool) = TMP_209 == y
TMP_211(bool) = TMP_208 || TMP_210
INTERNAL_CALL, DSAuth.assert(bool)(TMP_211)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_204(uint128) = x - y
z(uint128) := TMP_204(uint128)
TMP_205(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_205)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_217(bool) = x >= y
CONDITION TMP_217"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_216(bool) = x <= y
CONDITION TMP_216"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_265 = CONVERT this to address
TMP_266(bool) = src == TMP_265
CONDITION TMP_266"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_267(bool) = src == owner
CONDITION TMP_267"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_268 = CONVERT 0 to DSAuthority
TMP_269(bool) = authority == TMP_268
CONDITION TMP_269"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_270(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_270"];
}
// Function: 38923.sol-DSValue-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_200(bool) = x >= y
CONDITION TMP_200"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_199(bool) = x <= y
CONDITION TMP_199"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_192(uint256) = x * y
z(uint256) := TMP_192(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_193(bool) = x == 0
TMP_194(uint256) = z / x
TMP_195(bool) = TMP_194 == y
TMP_196(bool) = TMP_193 || TMP_195
INTERNAL_CALL, DSAuth.assert(bool)(TMP_196)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 38923.sol-DSValue-peek()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(val,has)

IRs:
RETURN val,has"];
}
// Function: 38923.sol-DSValue-poke(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = wut

IRs:
val(bytes32) := wut(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
has = true

IRs:
has(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 38923.sol-DSValue-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_234(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_234"];
}
// Function: 38923.sol-DSValue-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_242 = CONVERT x to uint256
TMP_243(uint256) = TMP_242 * RAY
TMP_244(uint128) = y / 2
TMP_245(uint256) = TMP_243 + TMP_244
TMP_246(uint256) = TMP_245 / y
TMP_247(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_246)
z(uint128) := TMP_247(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-read()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(wut,has) = peek()

IRs:
TUPLE_0(bytes32,bool) = INTERNAL_CALL, DSValue.peek()()
wut(bytes32)= UNPACK TUPLE_0 index: 0 
has(bool)= UNPACK TUPLE_0 index: 1 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(has)

IRs:
INTERNAL_CALL, DSAuth.assert(bool)(has)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
wut

IRs:
RETURN wut"];
}
// Function: 38923.sol-DSValue-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_256(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_256"];
}
// Function: 38923.sol-DSValue-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_255(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_255"];
}
// Function: 38923.sol-DSValue-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_236 = CONVERT x to uint256
TMP_237(uint256) = TMP_236 * y
TMP_238(uint128) = RAY / 2
TMP_239(uint256) = TMP_237 + TMP_238
TMP_240(uint256) = TMP_239 / RAY
TMP_241(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_240)
z(uint128) := TMP_241(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_248(bool) = n != 0
CONDITION TMP_248"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_249(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_249(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_250(uint64) = n % 2
TMP_251(bool) = TMP_250 != 0
CONDITION TMP_251"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_252(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_252(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_253(uint64) = n % 2
TMP_254(bool) = TMP_253 != 0
CONDITION TMP_254"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_235(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_235"];
}
// Function: 38923.sol-DSValue-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSValue-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSValue-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_277(uint256) = 10 ** 18
WAD(uint128) := TMP_277(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_278(uint256) = 10 ** 27
RAY(uint128) := TMP_278(uint256)"];
}
// Function: 38923.sol-DSValue-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_189(uint256) = x - y
z(uint256) := TMP_189(uint256)
TMP_190(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_190)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-void()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
has = false

IRs:
has(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-DSValue-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_218(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_218"];
}
// Function: 38923.sol-DSValue-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_226 = CONVERT x to uint256
TMP_227(uint256) = TMP_226 * WAD
TMP_228(uint128) = y / 2
TMP_229(uint256) = TMP_227 + TMP_228
TMP_230(uint256) = TMP_229 / y
TMP_231(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_230)
z(uint128) := TMP_231(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_233(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_233"];
}
// Function: 38923.sol-DSValue-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_232(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_232"];
}
// Function: 38923.sol-DSValue-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_220 = CONVERT x to uint256
TMP_221(uint256) = TMP_220 * y
TMP_222(uint128) = WAD / 2
TMP_223(uint256) = TMP_221 + TMP_222
TMP_224(uint256) = TMP_223 / WAD
TMP_225(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_224)
z(uint128) := TMP_225(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-DSValue-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_219(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_219"];
}
// Function: 38923.sol-Poker-DSAuth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(msg.sender)

IRs:
Emit LogSetOwner(msg.sender)"];
}
// Function: 38923.sol-Poker-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_403(uint256) = x + y
z(uint256) := TMP_403(uint256)
TMP_404(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_404)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-assert(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! x

IRs:
TMP_488 = UnaryType.BANG x 
CONDITION TMP_488"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 38923.sol-Poker-auth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,msg.sig))

IRs:
TMP_504(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,msg.sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_504)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-Poker-authorized(bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(isAuthorized(msg.sender,sig))

IRs:
TMP_506(bool) = INTERNAL_CALL, DSAuth.isAuthorized(address,bytes4)(msg.sender,sig)
INTERNAL_CALL, DSAuth.assert(bool)(TMP_506)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 38923.sol-Poker-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = uint128(x)) == x)

IRs:
TMP_474 = CONVERT x to uint128
z(uint128) := TMP_474(uint128)
TMP_475(bool) = z == x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_475)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_415(uint256) = x / y
z(uint256) := TMP_415(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x + y) >= x)

IRs:
TMP_418(uint128) = x + y
z(uint128) := TMP_418(uint128)
TMP_419(bool) = z >= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_419)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_430(uint128) = x / y
z(uint128) := TMP_430(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_432(bool) = x >= y
CONDITION TMP_432"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_431(bool) = x <= y
CONDITION TMP_431"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_424(uint128) = x * y
z(uint128) := TMP_424(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_425(bool) = x == 0
TMP_426(uint128) = z / x
TMP_427(bool) = TMP_426 == y
TMP_428(bool) = TMP_425 || TMP_427
INTERNAL_CALL, DSAuth.assert(bool)(TMP_428)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_421(uint128) = x - y
z(uint128) := TMP_421(uint128)
TMP_422(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_422)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_434(bool) = x >= y
CONDITION TMP_434"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_433(bool) = x <= y
CONDITION TMP_433"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-isAuthorized(address,bytes4)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
src == address(this)

IRs:
TMP_482 = CONVERT this to address
TMP_483(bool) = src == TMP_482
CONDITION TMP_483"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: IF 3

EXPRESSION:
src == owner

IRs:
TMP_484(bool) = src == owner
CONDITION TMP_484"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: IF 5

EXPRESSION:
authority == DSAuthority(0)

IRs:
TMP_485 = CONVERT 0 to DSAuthority
TMP_486(bool) = authority == TMP_485
CONDITION TMP_486"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
authority.canCall(src,this,sig)

IRs:
TMP_487(bool) = HIGH_LEVEL_CALL, dest:authority(DSAuthority), function:canCall, arguments:['src', 'this', 'sig']  
RETURN TMP_487"];
}
// Function: 38923.sol-Poker-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_417(bool) = x >= y
CONDITION TMP_417"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_416(bool) = x <= y
CONDITION TMP_416"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x * y

IRs:
TMP_409(uint256) = x * y
z(uint256) := TMP_409(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(x == 0 || z / x == y)

IRs:
TMP_410(bool) = x == 0
TMP_411(uint256) = z / x
TMP_412(bool) = TMP_411 == y
TMP_413(bool) = TMP_410 || TMP_412
INTERNAL_CALL, DSAuth.assert(bool)(TMP_413)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-note()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)

IRs:
Emit LogNote(msg.sig,msg.sender,foo,bar,msg.value,msg.data)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 38923.sol-Poker-peek()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(val,has)

IRs:
RETURN val,has"];
}
// Function: 38923.sol-Poker-poke(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.poke(wut)

IRs:
INTERNAL_CALL, DSValue.poke(bytes32)(wut)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(med.call(bytes4(sha3()(poke()))))

IRs:
TMP_490(bytes32) = SOLIDITY_CALL sha3()(poke())
TMP_491 = CONVERT TMP_490 to bytes4
TMP_492(bool) = LOW_LEVEL_CALL, dest:med, function:call, arguments:['TMP_491']  
INTERNAL_CALL, DSAuth.assert(bool)(TMP_492)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-Poker-poke(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
val = wut

IRs:
val(bytes32) := wut(bytes32)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
has = true

IRs:
has(bool) := True(bool)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 38923.sol-Poker-prod(address,bytes32,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
super.prod(wut,zzz)

IRs:
INTERNAL_CALL, DSCache.prod(bytes32,uint128)(wut,zzz)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(med.call(bytes4(sha3()(poke()))))

IRs:
TMP_496(bytes32) = SOLIDITY_CALL sha3()(poke())
TMP_497 = CONVERT TMP_496 to bytes4
TMP_498(bool) = LOW_LEVEL_CALL, dest:med, function:call, arguments:['TMP_497']  
INTERNAL_CALL, DSAuth.assert(bool)(TMP_498)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-Poker-prod(bytes32,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
zzz = Zzz

IRs:
zzz(uint128) := Zzz(uint128)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
poke(wut)

IRs:
INTERNAL_CALL, DSValue.poke(bytes32)(wut)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
4->1;
}
// Function: 38923.sol-Poker-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_451(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_451"];
}
// Function: 38923.sol-Poker-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_459 = CONVERT x to uint256
TMP_460(uint256) = TMP_459 * RAY
TMP_461(uint128) = y / 2
TMP_462(uint256) = TMP_460 + TMP_461
TMP_463(uint256) = TMP_462 / y
TMP_464(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_463)
z(uint128) := TMP_464(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-read()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(wut,has) = peek()

IRs:
TUPLE_4(bytes32,bool) = INTERNAL_CALL, DSCache.peek()()
wut(bytes32)= UNPACK TUPLE_4 index: 0 
has(bool)= UNPACK TUPLE_4 index: 1 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
assert(has)

IRs:
INTERNAL_CALL, DSAuth.assert(bool)(has)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
wut

IRs:
RETURN wut"];
}
// Function: 38923.sol-Poker-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_473(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_473"];
}
// Function: 38923.sol-Poker-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_472(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_472"];
}
// Function: 38923.sol-Poker-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_453 = CONVERT x to uint256
TMP_454(uint256) = TMP_453 * y
TMP_455(uint128) = RAY / 2
TMP_456(uint256) = TMP_454 + TMP_455
TMP_457(uint256) = TMP_456 / RAY
TMP_458(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_457)
z(uint128) := TMP_458(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_465(bool) = n != 0
CONDITION TMP_465"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_466(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_466(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_467(uint64) = n % 2
TMP_468(bool) = TMP_467 != 0
CONDITION TMP_468"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_469(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_469(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_470(uint64) = n % 2
TMP_471(bool) = TMP_470 != 0
CONDITION TMP_471"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_452(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_452"];
}
// Function: 38923.sol-Poker-setAuthority(DSAuthority)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
authority = authority_

IRs:
authority(DSAuthority) := authority_(DSAuthority)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetAuthority(authority)

IRs:
Emit LogSetAuthority(authority)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-Poker-setOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = owner_

IRs:
owner(address) := owner_(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LogSetOwner(owner)

IRs:
Emit LogSetOwner(owner)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-Poker-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_501(uint256) = 10 ** 18
WAD(uint128) := TMP_501(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_502(uint256) = 10 ** 27
RAY(uint128) := TMP_502(uint256)"];
}
// Function: 38923.sol-Poker-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert((z = x - y) <= x)

IRs:
TMP_406(uint256) = x - y
z(uint256) := TMP_406(uint256)
TMP_407(bool) = z <= x
INTERNAL_CALL, DSAuth.assert(bool)(TMP_407)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-void()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
has = false

IRs:
has(bool) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
note()

IRs:
MODIFIER_CALL, DSNote.note()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
auth()

IRs:
MODIFIER_CALL, DSAuth.auth()()"];
3->1;
}
// Function: 38923.sol-Poker-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_435(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_435"];
}
// Function: 38923.sol-Poker-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_443 = CONVERT x to uint256
TMP_444(uint256) = TMP_443 * WAD
TMP_445(uint128) = y / 2
TMP_446(uint256) = TMP_444 + TMP_445
TMP_447(uint256) = TMP_446 / y
TMP_448(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_447)
z(uint128) := TMP_448(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_450(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_450"];
}
// Function: 38923.sol-Poker-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_449(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_449"];
}
// Function: 38923.sol-Poker-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_437 = CONVERT x to uint256
TMP_438(uint256) = TMP_437 * y
TMP_439(uint128) = WAD / 2
TMP_440(uint256) = TMP_438 + TMP_439
TMP_441(uint256) = TMP_440 / WAD
TMP_442(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_441)
z(uint128) := TMP_442(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 38923.sol-Poker-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_436(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_436"];
}
}
