digraph G {
// Function: 38953.sol-E4Lava-E4Lava()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
developers = msg.sender

IRs:
developers(address) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = 2

IRs:
decimals(uint256) := 2(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
symbol = E4ROW

IRs:
symbol(string) := E4ROW(string)"];
}
// Function: 38953.sol-E4Lava-addAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holderAccounts[_addr].alloced = true

IRs:
REF_14(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_15(bool) -> REF_14.alloced
REF_15(bool) (->holderAccounts) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holderAccounts[_addr].tokens = 0

IRs:
REF_16(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_17(uint256) -> REF_16.tokens
REF_17(uint256) (->holderAccounts) := 0(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
holderAccounts[_addr].currentPoints = 0

IRs:
REF_18(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_19(uint256) -> REF_18.currentPoints
REF_19(uint256) (->holderAccounts) := 0(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
holderAccounts[_addr].lastSnapshot = TotalFeesReceived

IRs:
REF_20(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_21(uint256) -> REF_20.lastSnapshot
REF_21(uint256) (->holderAccounts) := TotalFeesReceived(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
holderIndexes[numAccounts ++] = _addr

IRs:
TMP_15(uint256) := numAccounts(uint256)
numAccounts(uint256) = numAccounts + 1
REF_22(address) -> holderIndexes[TMP_15]
REF_22(address) (->holderIndexes) := _addr(address)"];
}
// Function: 38953.sol-E4Lava-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_47(mapping(address => uint256)) -> allowed[_owner]
REF_48(uint256) -> REF_47[_spender]
RETURN REF_48"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 38953.sol-E4Lava-applySettings(E4Lava.SettingStateValue,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner

IRs:
TMP_0(bool) = msg.sender != owner
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
payoutThreshold = _threshold

IRs:
payoutThreshold(uint256) := _threshold(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
rwGas = _rw

IRs:
rwGas(uint256) := _rw(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
optInGas = _optGas

IRs:
optInGas(uint256) := _optGas(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
settingsState == SettingStateValue.lockedRelease

IRs:
REF_0(E4Lava.SettingStateValue) -> SettingStateValue.lockedRelease
TMP_1(bool) = settingsState == REF_0
CONDITION TMP_1"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: RETURN 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
settingsState = qState

IRs:
settingsState(E4Lava.SettingStateValue) := qState(E4Lava.SettingStateValue)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
qState == SettingStateValue.lockedRelease

IRs:
REF_1(E4Lava.SettingStateValue) -> SettingStateValue.lockedRelease
TMP_2(bool) = qState == REF_1
CONDITION TMP_2"];
11->12[label="True"];
11->14[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
StatEvent(Locking!)

IRs:
Emit StatEvent(Locking!)"];
12->13;
13[label="Node Type: RETURN 13
"];
14[label="Node Type: END_IF 14
"];
14->17;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->26;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < numAccounts

IRs:
TMP_4(bool) = i < numAccounts
CONDITION TMP_4"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
a = holderIndexes[i]

IRs:
REF_2(address) -> holderIndexes[i]
a(address) := REF_2(address)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
a != address(0)

IRs:
TMP_5 = CONVERT 0 to address
TMP_6(bool) = a != TMP_5
CONDITION TMP_6"];
20->21[label="True"];
20->24[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
holderAccounts[a].tokens = 0

IRs:
REF_3(E4Lava.tokenAccount) -> holderAccounts[a]
REF_4(uint256) -> REF_3.tokens
REF_4(uint256) (->holderAccounts) := 0(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
holderAccounts[a].currentPoints = 0

IRs:
REF_5(E4Lava.tokenAccount) -> holderAccounts[a]
REF_6(uint256) -> REF_5.currentPoints
REF_6(uint256) (->holderAccounts) := 0(uint256)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
holderAccounts[a].lastSnapshot = 0

IRs:
REF_7(E4Lava.tokenAccount) -> holderAccounts[a]
REF_8(uint256) -> REF_7.lastSnapshot
REF_8(uint256) (->holderAccounts) := 0(uint256)"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_7(uint256) := i(uint256)
i(uint256) = i + 1"];
25->18;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
vestTime = _vest

IRs:
vestTime(uint256) := _vest(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
numToksSwitchedOver = 0

IRs:
numToksSwitchedOver(uint256) := 0(uint256)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
this.balance > 0

IRs:
REF_9(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_8(bool) = REF_9 > 0
CONDITION TMP_8"];
28->29[label="True"];
28->32[label="False"];
29[label="Node Type: IF 29

EXPRESSION:
! owner.call.gas(rwGas).value(this.balance)()

IRs:
REF_13(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_11(bool) = LOW_LEVEL_CALL, dest:owner, function:call, arguments:[] value:REF_13 gas:rwGas
TMP_12 = UnaryType.BANG TMP_11 
CONDITION TMP_12"];
29->30[label="True"];
29->31[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
StatEvent(ERROR!)

IRs:
Emit StatEvent(ERROR!)"];
30->31;
31[label="Node Type: END_IF 31
"];
31->32;
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
StatEvent(ok)

IRs:
Emit StatEvent(ok)"];
}
// Function: 38953.sol-E4Lava-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_45(mapping(address => uint256)) -> allowed[msg.sender]
REF_46(uint256) -> REF_45[_spender]
REF_46(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38953.sol-E4Lava-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balance = holderAccounts[_owner].tokens

IRs:
REF_43(E4Lava.tokenAccount) -> holderAccounts[_owner]
REF_44(uint256) -> REF_43.tokens
balance(uint256) := REF_44(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 38953.sol-E4Lava-blackHole()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
StatEventI(adjusted,msg.value)

IRs:
Emit StatEventI(adjusted,msg.value)"];
}
// Function: 38953.sol-E4Lava-calcCurPointsForAcct(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holderAccounts[_acct].currentPoints += (TotalFeesReceived - holderAccounts[_acct].lastSnapshot) * holderAccounts[_acct].tokens

IRs:
REF_49(E4Lava.tokenAccount) -> holderAccounts[_acct]
REF_50(uint256) -> REF_49.currentPoints
REF_51(E4Lava.tokenAccount) -> holderAccounts[_acct]
REF_52(uint256) -> REF_51.lastSnapshot
TMP_41(uint256) = TotalFeesReceived - REF_52
REF_53(E4Lava.tokenAccount) -> holderAccounts[_acct]
REF_54(uint256) -> REF_53.tokens
TMP_42(uint256) = TMP_41 * REF_54
REF_50(-> holderAccounts) = REF_50 + TMP_42"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
holderAccounts[_acct].lastSnapshot = TotalFeesReceived

IRs:
REF_55(E4Lava.tokenAccount) -> holderAccounts[_acct]
REF_56(uint256) -> REF_55.lastSnapshot
REF_56(uint256) (->holderAccounts) := TotalFeesReceived(uint256)"];
}
// Function: 38953.sol-E4Lava-changeOwner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner || settingsState == SettingStateValue.lockedRelease

IRs:
TMP_75(bool) = msg.sender != owner
REF_82(E4Lava.SettingStateValue) -> SettingStateValue.lockedRelease
TMP_76(bool) = settingsState == REF_82
TMP_77(bool) = TMP_75 || TMP_76
CONDITION TMP_77"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner = _addr

IRs:
owner(address) := _addr(address)"];
}
// Function: 38953.sol-E4Lava-checkDividends(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
holderAccounts[_addr].alloced

IRs:
REF_74(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_75(bool) -> REF_74.alloced
CONDITION REF_75"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_currentPoints = holderAccounts[_addr].currentPoints + ((TotalFeesReceived - holderAccounts[_addr].lastSnapshot) * holderAccounts[_addr].tokens)

IRs:
REF_76(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_77(uint256) -> REF_76.currentPoints
REF_78(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_79(uint256) -> REF_78.lastSnapshot
TMP_71(uint256) = TotalFeesReceived - REF_79
REF_80(E4Lava.tokenAccount) -> holderAccounts[_addr]
REF_81(uint256) -> REF_80.tokens
TMP_72(uint256) = TMP_71 * REF_81
TMP_73(uint256) = REF_77 + TMP_72
_currentPoints(uint256) := TMP_73(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_amount = _currentPoints / NewTokenSupply

IRs:
TMP_74(uint256) = _currentPoints / NewTokenSupply
_amount(uint256) := TMP_74(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
// Function: 38953.sol-E4Lava-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
holdoverBalance += msg.value

IRs:
holdoverBalance(uint256) = holdoverBalance + msg.value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
TotalFeesReceived += msg.value

IRs:
TotalFeesReceived(uint256) = TotalFeesReceived + msg.value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
StatEventI(Payment,msg.value)

IRs:
Emit StatEventI(Payment,msg.value)"];
}
// Function: 38953.sol-E4Lava-haraKiri()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
settingsState != SettingStateValue.debug

IRs:
REF_85(E4Lava.SettingStateValue) -> SettingStateValue.debug
TMP_84(bool) = settingsState != REF_85
CONDITION TMP_84"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
msg.sender != owner

IRs:
TMP_85(bool) = msg.sender != owner
CONDITION TMP_85"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: THROW 5
"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
suicide(address)(developers)

IRs:
TMP_86(None) = SOLIDITY_CALL suicide(address)(developers)"];
}
// Function: 38953.sol-E4Lava-optInFromClassic()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
oldE4 == address(0)

IRs:
TMP_87 = CONVERT 0 to address
TMP_88(bool) = oldE4 == TMP_87
CONDITION TMP_88"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
StatEvent(config err)

IRs:
Emit StatEvent(config err)"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
nrequester = msg.sender

IRs:
nrequester(address) := msg.sender(address)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
holderAccounts[nrequester].tokens != 0

IRs:
REF_86(E4Lava.tokenAccount) -> holderAccounts[nrequester]
REF_87(uint256) -> REF_86.tokens
TMP_90(bool) = REF_87 != 0
CONDITION TMP_90"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
StatEvent(Account has already been allocd!)

IRs:
Emit StatEvent(Account has already been allocd!)"];
7->8;
8[label="Node Type: RETURN 8
"];
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
iclassic = Token(oldE4)

IRs:
TMP_92 = CONVERT oldE4 to Token
iclassic(Token) := TMP_92(Token)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_toks = iclassic.balanceOf(nrequester)

IRs:
TMP_93(uint256) = HIGH_LEVEL_CALL, dest:iclassic(Token), function:balanceOf, arguments:['nrequester']  
_toks(uint256) := TMP_93(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_toks == 0

IRs:
TMP_94(bool) = _toks == 0
CONDITION TMP_94"];
12->13[label="True"];
12->15[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
StatEvent(Nothing to do)

IRs:
Emit StatEvent(Nothing to do)"];
13->14;
14[label="Node Type: RETURN 14
"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
iclassic.allowance(nrequester,address(this)) < _toks

IRs:
TMP_96 = CONVERT this to address
TMP_97(uint256) = HIGH_LEVEL_CALL, dest:iclassic(Token), function:allowance, arguments:['nrequester', 'TMP_96']  
TMP_98(bool) = TMP_97 < _toks
CONDITION TMP_98"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
StatEvent(Please approve this contract to transfer)

IRs:
Emit StatEvent(Please approve this contract to transfer)"];
17->18;
18[label="Node Type: RETURN 18
"];
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
iclassic.transferFrom.gas(optInGas)(nrequester,oldE4RecycleBin,_toks)

IRs:
TMP_101(bool) = HIGH_LEVEL_CALL, dest:iclassic(Token), function:transferFrom, arguments:['nrequester', 'oldE4RecycleBin', '_toks']  gas:optInGas"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
iclassic.balanceOf(nrequester) == 0

IRs:
TMP_102(uint256) = HIGH_LEVEL_CALL, dest:iclassic(Token), function:balanceOf, arguments:['nrequester']  
TMP_103(bool) = TMP_102 == 0
CONDITION TMP_103"];
21->22[label="True"];
21->30[label="False"];
22[label="Node Type: IF 22

EXPRESSION:
! holderAccounts[nrequester].alloced

IRs:
REF_93(E4Lava.tokenAccount) -> holderAccounts[nrequester]
REF_94(bool) -> REF_93.alloced
TMP_104 = UnaryType.BANG REF_94 
CONDITION TMP_104"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
addAccount(nrequester)

IRs:
INTERNAL_CALL, E4Lava.addAccount(address)(nrequester)"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
holderAccounts[nrequester].tokens = _toks * NewTokensPerOrigToken

IRs:
REF_95(E4Lava.tokenAccount) -> holderAccounts[nrequester]
REF_96(uint256) -> REF_95.tokens
TMP_106(uint256) = _toks * NewTokensPerOrigToken
REF_96(uint256) (->holderAccounts) := TMP_106(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
holderAccounts[nrequester].lastSnapshot = 0

IRs:
REF_97(E4Lava.tokenAccount) -> holderAccounts[nrequester]
REF_98(uint256) -> REF_97.lastSnapshot
REF_98(uint256) (->holderAccounts) := 0(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
calcCurPointsForAcct(nrequester)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(nrequester)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
numToksSwitchedOver += _toks

IRs:
numToksSwitchedOver(uint256) = numToksSwitchedOver + _toks"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
StatEvent(Success Switched Over)

IRs:
Emit StatEvent(Success Switched Over)"];
29->31;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
StatEvent(Transfer Error! please contact Dev team!)

IRs:
Emit StatEvent(Transfer Error! please contact Dev team!)"];
30->31;
31[label="Node Type: END_IF 31
"];
}
// Function: 38953.sol-E4Lava-setDeveloper(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner || settingsState == SettingStateValue.lockedRelease

IRs:
TMP_78(bool) = msg.sender != owner
REF_83(E4Lava.SettingStateValue) -> SettingStateValue.lockedRelease
TMP_79(bool) = settingsState == REF_83
TMP_80(bool) = TMP_78 || TMP_79
CONDITION TMP_80"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
developers = _addr

IRs:
developers(address) := _addr(address)"];
}
// Function: 38953.sol-E4Lava-setOldE4(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner || settingsState == SettingStateValue.lockedRelease

IRs:
TMP_81(bool) = msg.sender != owner
REF_84(E4Lava.SettingStateValue) -> SettingStateValue.lockedRelease
TMP_82(bool) = settingsState == REF_84
TMP_83(bool) = TMP_81 || TMP_82
CONDITION TMP_83"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oldE4 = _oldE4

IRs:
oldE4(address) := _oldE4(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oldE4RecycleBin = _oldE4Recyle

IRs:
oldE4RecycleBin(address) := _oldE4Recyle(address)"];
}
// Function: 38953.sol-E4Lava-setOpGas(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != owner && msg.sender != developers

IRs:
TMP_68(bool) = msg.sender != owner
TMP_69(bool) = msg.sender != developers
TMP_70(bool) = TMP_68 && TMP_69
CONDITION TMP_70"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2
"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
rwGas = _rw

IRs:
rwGas(uint256) := _rw(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
optInGas = _optIn

IRs:
optInGas(uint256) := _optIn(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 38953.sol-E4Lava-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
NumOrigTokens = 5762

IRs:
NumOrigTokens(uint256) := 5762(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
NewTokensPerOrigToken = 100000

IRs:
NewTokensPerOrigToken(uint256) := 100000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
NewTokenSupply = 5762 * 100000

IRs:
TMP_110(uint256) = 5762 * 100000
NewTokenSupply(uint256) := TMP_110(uint256)"];
}
// Function: 38953.sol-E4Lava-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
supply = NewTokenSupply

IRs:
supply(uint256) := NewTokenSupply(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
supply

IRs:
RETURN supply"];
}
// Function: 38953.sol-E4Lava-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(msg.sender == developers) && (now < vestTime)

IRs:
TMP_16(bool) = msg.sender == developers
TMP_17(bool) = now < vestTime
TMP_18(bool) = TMP_16 && TMP_17
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
holderAccounts[msg.sender].tokens >= _value && _value > 0

IRs:
REF_23(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_24(uint256) -> REF_23.tokens
TMP_19(bool) = REF_24 >= _value
TMP_20(bool) = _value > 0
TMP_21(bool) = TMP_19 && TMP_20
CONDITION TMP_21"];
4->5[label="True"];
4->14[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
calcCurPointsForAcct(msg.sender)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(msg.sender)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
holderAccounts[msg.sender].tokens -= _value

IRs:
REF_25(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_26(uint256) -> REF_25.tokens
REF_26(-> holderAccounts) = REF_26 - _value"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
! holderAccounts[_to].alloced

IRs:
REF_27(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_28(bool) -> REF_27.alloced
TMP_23 = UnaryType.BANG REF_28 
CONDITION TMP_23"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
addAccount(_to)

IRs:
INTERNAL_CALL, E4Lava.addAccount(address)(_to)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
calcCurPointsForAcct(_to)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(_to)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
holderAccounts[_to].tokens += _value

IRs:
REF_29(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_30(uint256) -> REF_29.tokens
REF_30(-> holderAccounts) = REF_30 + _value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
14[label="Node Type: RETURN 14

EXPRESSION:
false

IRs:
RETURN False"];
16[label="Node Type: RETURN 16

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38953.sol-E4Lava-transferDividends(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(msg.sender == developers) && (now < vestTime)

IRs:
TMP_58(bool) = msg.sender == developers
TMP_59(bool) = now < vestTime
TMP_60(bool) = TMP_58 && TMP_59
CONDITION TMP_60"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
calcCurPointsForAcct(msg.sender)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(msg.sender)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
holderAccounts[msg.sender].currentPoints == 0

IRs:
REF_64(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_65(uint256) -> REF_64.currentPoints
TMP_62(bool) = REF_65 == 0
CONDITION TMP_62"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
StatEvent(Zero balance)

IRs:
Emit StatEvent(Zero balance)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! holderAccounts[_to].alloced

IRs:
REF_66(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_67(bool) -> REF_66.alloced
TMP_64 = UnaryType.BANG REF_67 
CONDITION TMP_64"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
addAccount(_to)

IRs:
INTERNAL_CALL, E4Lava.addAccount(address)(_to)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
calcCurPointsForAcct(_to)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(_to)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
holderAccounts[_to].currentPoints += holderAccounts[msg.sender].currentPoints

IRs:
REF_68(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_69(uint256) -> REF_68.currentPoints
REF_70(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_71(uint256) -> REF_70.currentPoints
REF_69(-> holderAccounts) = REF_69 + REF_71"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
holderAccounts[msg.sender].currentPoints = 0

IRs:
REF_72(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_73(uint256) -> REF_72.currentPoints
REF_73(uint256) (->holderAccounts) := 0(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
StatEvent(Trasnfered Dividends)

IRs:
Emit StatEvent(Trasnfered Dividends)"];
15->16;
16[label="Node Type: RETURN 16

EXPRESSION:
true

IRs:
RETURN True"];
17[label="Node Type: RETURN 17

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38953.sol-E4Lava-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_from == developers) && (now < vestTime)

IRs:
TMP_27(bool) = _from == developers
TMP_28(bool) = now < vestTime
TMP_29(bool) = TMP_27 && TMP_28
CONDITION TMP_29"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
holderAccounts[_from].tokens >= _value && allowed[_from][msg.sender] >= _value && _value > 0

IRs:
REF_31(E4Lava.tokenAccount) -> holderAccounts[_from]
REF_32(uint256) -> REF_31.tokens
TMP_30(bool) = REF_32 >= _value
REF_33(mapping(address => uint256)) -> allowed[_from]
REF_34(uint256) -> REF_33[msg.sender]
TMP_31(bool) = REF_34 >= _value
TMP_32(bool) = TMP_30 && TMP_31
TMP_33(bool) = _value > 0
TMP_34(bool) = TMP_32 && TMP_33
CONDITION TMP_34"];
4->5[label="True"];
4->15[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
calcCurPointsForAcct(_from)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(_from)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
holderAccounts[_from].tokens -= _value

IRs:
REF_35(E4Lava.tokenAccount) -> holderAccounts[_from]
REF_36(uint256) -> REF_35.tokens
REF_36(-> holderAccounts) = REF_36 - _value"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
! holderAccounts[_to].alloced

IRs:
REF_37(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_38(bool) -> REF_37.alloced
TMP_36 = UnaryType.BANG REF_38 
CONDITION TMP_36"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
addAccount(_to)

IRs:
INTERNAL_CALL, E4Lava.addAccount(address)(_to)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
calcCurPointsForAcct(_to)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(_to)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
holderAccounts[_to].tokens += _value

IRs:
REF_39(E4Lava.tokenAccount) -> holderAccounts[_to]
REF_40(uint256) -> REF_39.tokens
REF_40(-> holderAccounts) = REF_40 + _value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_41(mapping(address => uint256)) -> allowed[_from]
REF_42(uint256) -> REF_41[msg.sender]
REF_42(-> allowed) = REF_42 - _value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: RETURN 15

EXPRESSION:
false

IRs:
RETURN False"];
17[label="Node Type: RETURN 17

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 38953.sol-E4Lava-withdrawDividends()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
calcCurPointsForAcct(msg.sender)

IRs:
INTERNAL_CALL, E4Lava.calcCurPointsForAcct(address)(msg.sender)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_amount = holderAccounts[msg.sender].currentPoints / NewTokenSupply

IRs:
REF_57(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_58(uint256) -> REF_57.currentPoints
TMP_46(uint256) = REF_58 / NewTokenSupply
_amount(uint256) := TMP_46(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_amount <= payoutThreshold

IRs:
TMP_47(bool) = _amount <= payoutThreshold
CONDITION TMP_47"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
StatEventI(low Balance,_amount)

IRs:
Emit StatEventI(low Balance,_amount)"];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: IF 6

EXPRESSION:
(msg.sender == developers) && (now < vestTime)

IRs:
TMP_49(bool) = msg.sender == developers
TMP_50(bool) = now < vestTime
TMP_51(bool) = TMP_49 && TMP_50
CONDITION TMP_51"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
StatEvent(Tokens not yet vested.)

IRs:
Emit StatEvent(Tokens not yet vested.)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_amount = 0

IRs:
_amount(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: RETURN 9
"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_pointsUsed = _amount * NewTokenSupply

IRs:
TMP_53(uint256) = _amount * NewTokenSupply
_pointsUsed(uint256) := TMP_53(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
holderAccounts[msg.sender].currentPoints -= _pointsUsed

IRs:
REF_59(E4Lava.tokenAccount) -> holderAccounts[msg.sender]
REF_60(uint256) -> REF_59.currentPoints
REF_60(-> holderAccounts) = REF_60 - _pointsUsed"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
holdoverBalance -= _amount

IRs:
holdoverBalance(uint256) = holdoverBalance - _amount"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
! msg.sender.call.gas(rwGas).value(_amount)()

IRs:
TMP_56(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:_amount gas:rwGas
TMP_57 = UnaryType.BANG TMP_56 
CONDITION TMP_57"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: THROW 15
"];
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
_amount

IRs:
RETURN _amount"];
}
// Function: 38953.sol-E4LavaRewards-checkDividends(address)
digraph{
}
// Function: 38953.sol-E4LavaRewards-transferDividends(address)
digraph{
}
// Function: 38953.sol-E4LavaRewards-withdrawDividends()
digraph{
}
// Function: 38953.sol-Token-allowance(address,address)
digraph{
}
// Function: 38953.sol-Token-approve(address,uint256)
digraph{
}
// Function: 38953.sol-Token-balanceOf(address)
digraph{
}
// Function: 38953.sol-Token-totalSupply()
digraph{
}
// Function: 38953.sol-Token-transfer(address,uint256)
digraph{
}
// Function: 38953.sol-Token-transferFrom(address,address,uint256)
digraph{
}
}
