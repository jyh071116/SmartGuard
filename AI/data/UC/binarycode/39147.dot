digraph G {
// Function: 39147.sol-DSMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_694(uint256) = x + y
z(uint256) := TMP_694(uint256)
TMP_695(bool) = z >= x
TMP_696(None) = SOLIDITY_CALL assert(bool)(TMP_695)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_759 = CONVERT x to uint128
z(uint128) := TMP_759(uint128)
TMP_760(bool) = z == x
TMP_761(None) = SOLIDITY_CALL assert(bool)(TMP_760)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_703(uint256) = x / y
z(uint256) := TMP_703(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_706(uint128) = x + y
z(uint128) := TMP_706(uint128)
TMP_707(bool) = z >= x
TMP_708(None) = SOLIDITY_CALL assert(bool)(TMP_707)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_715(uint128) = x / y
z(uint128) := TMP_715(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_717(bool) = x >= y
CONDITION TMP_717"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_716(bool) = x <= y
CONDITION TMP_716"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_712(uint128) = x * y
z(uint128) := TMP_712(uint128)
TMP_713(bool) = z >= x
TMP_714(None) = SOLIDITY_CALL assert(bool)(TMP_713)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_709(uint128) = x - y
z(uint128) := TMP_709(uint128)
TMP_710(bool) = z <= x
TMP_711(None) = SOLIDITY_CALL assert(bool)(TMP_710)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_719(bool) = x >= y
CONDITION TMP_719"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_718(bool) = x <= y
CONDITION TMP_718"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_705(bool) = x >= y
CONDITION TMP_705"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_704(bool) = x <= y
CONDITION TMP_704"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_700(uint256) = x * y
z(uint256) := TMP_700(uint256)
TMP_701(bool) = z >= x
TMP_702(None) = SOLIDITY_CALL assert(bool)(TMP_701)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_736(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_736"];
}
// Function: 39147.sol-DSMath-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_744 = CONVERT x to uint256
TMP_745(uint256) = TMP_744 * RAY
TMP_746(uint128) = y / 2
TMP_747(uint256) = TMP_745 + TMP_746
TMP_748(uint256) = TMP_747 / y
TMP_749(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_748)
z(uint128) := TMP_749(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_758(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_758"];
}
// Function: 39147.sol-DSMath-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_757(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_757"];
}
// Function: 39147.sol-DSMath-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_738 = CONVERT x to uint256
TMP_739(uint256) = TMP_738 * y
TMP_740(uint128) = RAY / 2
TMP_741(uint256) = TMP_739 + TMP_740
TMP_742(uint256) = TMP_741 / RAY
TMP_743(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_742)
z(uint128) := TMP_743(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_750(bool) = n != 0
CONDITION TMP_750"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_751(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_751(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_752(uint64) = n % 2
TMP_753(bool) = TMP_752 != 0
CONDITION TMP_753"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_754(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_754(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_755(uint64) = n % 2
TMP_756(bool) = TMP_755 != 0
CONDITION TMP_756"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_737(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_737"];
}
// Function: 39147.sol-DSMath-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_762(uint256) = 10 ** 18
WAD(uint128) := TMP_762(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_763(uint256) = 10 ** 27
RAY(uint128) := TMP_763(uint256)"];
}
// Function: 39147.sol-DSMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_697(uint256) = x - y
z(uint256) := TMP_697(uint256)
TMP_698(bool) = z <= x
TMP_699(None) = SOLIDITY_CALL assert(bool)(TMP_698)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_720(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_720"];
}
// Function: 39147.sol-DSMath-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_728 = CONVERT x to uint256
TMP_729(uint256) = TMP_728 * WAD
TMP_730(uint128) = y / 2
TMP_731(uint256) = TMP_729 + TMP_730
TMP_732(uint256) = TMP_731 / y
TMP_733(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_732)
z(uint128) := TMP_733(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_735(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_735"];
}
// Function: 39147.sol-DSMath-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_734(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_734"];
}
// Function: 39147.sol-DSMath-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_722 = CONVERT x to uint256
TMP_723(uint256) = TMP_722 * y
TMP_724(uint128) = WAD / 2
TMP_725(uint256) = TMP_723 + TMP_724
TMP_726(uint256) = TMP_725 / WAD
TMP_727(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_726)
z(uint128) := TMP_727(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-DSMath-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_721(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_721"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-HouseManaged()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
houseAddress = msg.sender

IRs:
houseAddress(address) := msg.sender(address)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-addInvestorAtID(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investorIDs[msg.sender] = id

IRs:
REF_508(uint256) -> investorIDs[msg.sender]
REF_508(uint256) (->investorIDs) := id(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[id].investorAddress = msg.sender

IRs:
REF_509(usingInvestorsModule.Investor) -> investors[id]
REF_510(address) -> REF_509.investorAddress
REF_510(address) (->investors) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
investors[id].amountInvested = msg.value

IRs:
REF_511(usingInvestorsModule.Investor) -> investors[id]
REF_512(uint256) -> REF_511.amountInvested
REF_512(uint256) (->investors) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LOG_InvestorEntrance(msg.sender,msg.value)

IRs:
Emit LOG_InvestorEntrance(msg.sender,msg.value)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-changeHouse_and_Owner_Addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(newHouse != address(0x0))

IRs:
TMP_1032 = CONVERT 0 to address
TMP_1033(bool) = newHouse != TMP_1032
TMP_1034(None) = SOLIDITY_CALL assert(bool)(TMP_1033)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(newOwner != address(0x0))

IRs:
TMP_1035 = CONVERT 0 to address
TMP_1036(bool) = newOwner != TMP_1035
TMP_1037(None) = SOLIDITY_CALL assert(bool)(TMP_1036)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LOG_OwnerAddressChanged(owner,newOwner)

IRs:
Emit LOG_OwnerAddressChanged(owner,newOwner)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseAddress = newHouse

IRs:
houseAddress(address) := newHouse(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_HouseAddressChanged(houseAddress,newHouse)

IRs:
Emit LOG_HouseAddressChanged(houseAddress,newHouse)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-divest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(msg.sender)

IRs:
INTERNAL_CALL, usingInvestorsModule.divest(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
2->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-divest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentID = investorIDs[currentInvestor]

IRs:
REF_532(uint256) -> investorIDs[currentInvestor]
currentID(uint256) := REF_532(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToReturn = getBalance(currentInvestor)

IRs:
TMP_993(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(currentInvestor)
amountToReturn(uint256) := TMP_993(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested >= investors[currentID].amountInvested)

IRs:
REF_533(usingInvestorsModule.Investor) -> investors[currentID]
REF_534(uint256) -> REF_533.amountInvested
TMP_994(bool) = invested >= REF_534
CONDITION TMP_994"];
4->5[label="True"];
4->20[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invested -= investors[currentID].amountInvested

IRs:
REF_535(usingInvestorsModule.Investor) -> investors[currentID]
REF_536(uint256) -> REF_535.amountInvested
invested(uint256) = invested - REF_536"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
divestFeeAmount = (amountToReturn * divestFee) / 10000

IRs:
TMP_995(uint256) = amountToReturn * divestFee
TMP_996(uint256) = TMP_995 / 10000
divestFeeAmount(uint256) := TMP_996(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountToReturn -= divestFeeAmount

IRs:
amountToReturn(uint256) = amountToReturn - divestFeeAmount"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete investors[currentID]

IRs:
REF_537(usingInvestorsModule.Investor) -> investors[currentID]
investors = delete REF_537 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investorIDs[currentInvestor]

IRs:
REF_538(uint256) -> investorIDs[currentInvestor]
investorIDs = delete REF_538 "];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentID != numInvestors

IRs:
TMP_997(bool) = currentID != numInvestors
CONDITION TMP_997"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
lastInvestor = investors[numInvestors]

IRs:
REF_539(usingInvestorsModule.Investor) -> investors[numInvestors]
lastInvestor(usingInvestorsModule.Investor) := REF_539(usingInvestorsModule.Investor)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorIDs[lastInvestor.investorAddress] = currentID

IRs:
REF_540(address) -> lastInvestor.investorAddress
REF_541(uint256) -> investorIDs[REF_540]
REF_541(uint256) (->investorIDs) := currentID(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investors[currentID] = lastInvestor

IRs:
REF_542(usingInvestorsModule.Investor) -> investors[currentID]
REF_542(usingInvestorsModule.Investor) (->investors) := lastInvestor(usingInvestorsModule.Investor)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete investors[numInvestors]

IRs:
REF_543(usingInvestorsModule.Investor) -> investors[numInvestors]
investors = delete REF_543 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
numInvestors --

IRs:
TMP_998(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors - 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
safeSend(currentInvestor,amountToReturn)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(currentInvestor,amountToReturn)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
safeSend(houseAddress,divestFeeAmount)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(houseAddress,divestFeeAmount)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LOG_InvestorExit(currentInvestor,amountToReturn)

IRs:
Emit LOG_InvestorExit(currentInvestor,amountToReturn)"];
19->22;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
21->22;
22[label="Node Type: END_IF 22
"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
23->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-executeEmergencyWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountToWithdraw = this.balance

IRs:
REF_558(uint256) = SOLIDITY_CALL balance(address)(this)
amountToWithdraw(uint256) := REF_558([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f59e5c542b0>])"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i <= numInvestors

IRs:
TMP_1051(bool) = i <= numInvestors
CONDITION TMP_1051"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
investors[i].votedForEmergencyWithdrawal == true

IRs:
REF_559(usingInvestorsModule.Investor) -> investors[i]
REF_560(bool) -> REF_559.votedForEmergencyWithdrawal
TMP_1052(bool) = REF_560 == True
CONDITION TMP_1052"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numOfVotesInFavour ++

IRs:
TMP_1053(uint256) := numOfVotesInFavour(uint256)
numOfVotesInFavour(uint256) = numOfVotesInFavour + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investors[i].votedForEmergencyWithdrawal

IRs:
REF_561(usingInvestorsModule.Investor) -> investors[i]
REF_562(bool) -> REF_561.votedForEmergencyWithdrawal
REF_561 = delete REF_562 "];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_1054(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: IF 12

EXPRESSION:
numOfVotesInFavour >= EMERGENCY_WITHDRAWAL_RATIO * numInvestors / 100

IRs:
TMP_1055(uint256) = EMERGENCY_WITHDRAWAL_RATIO * numInvestors
TMP_1056(uint256) = TMP_1055 / 100
TMP_1057(bool) = numOfVotesInFavour >= TMP_1056
CONDITION TMP_1057"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
! proposedWithdrawal.toAddress.send(amountToWithdraw)

IRs:
REF_563(address) -> proposedWithdrawal.toAddress
TMP_1058 = SEND dest:REF_563 value:amountToWithdraw
TMP_1059 = UnaryType.BANG TMP_1058 
CONDITION TMP_1059"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
LOG_EmergencyWithdrawalFailed(proposedWithdrawal.toAddress)

IRs:
REF_565(address) -> proposedWithdrawal.toAddress
Emit LOG_EmergencyWithdrawalFailed(REF_565)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
LOG_EmergencyWithdrawalSucceeded(proposedWithdrawal.toAddress,amountToWithdraw)

IRs:
REF_566(address) -> proposedWithdrawal.toAddress
Emit LOG_EmergencyWithdrawalSucceeded(REF_566,amountToWithdraw)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
revert()()

IRs:
TMP_1062(None) = SOLIDITY_CALL revert()()"];
17->18;
18[label="Node Type: END_IF 18
"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyAfterProposed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyAfterProposed()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyIfEmergencyTimeOutHasPassed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyIfEmergencyTimeOutHasPassed()()"];
22->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-forceDivestOfAllInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
copyNumInvestors = numInvestors

IRs:
copyNumInvestors(uint256) := numInvestors(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= copyNumInvestors

IRs:
TMP_1004(bool) = i <= copyNumInvestors
CONDITION TMP_1004"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
divest(investors[1].investorAddress)

IRs:
REF_544(usingInvestorsModule.Investor) -> investors[1]
REF_545(address) -> REF_544.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_545)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_1006(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-forceDivestOfOneInvestor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(currentInvestor)

IRs:
INTERNAL_CALL, usingInvestorsModule.divest(address)(currentInvestor)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete proposedWithdrawal

IRs:
proposedWithdrawal = delete proposedWithdrawal "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
4->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
invested = investors[investorIDs[currentInvestor]].amountInvested

IRs:
REF_501(uint256) -> investorIDs[currentInvestor]
REF_502(usingInvestorsModule.Investor) -> investors[REF_501]
REF_503(uint256) -> REF_502.amountInvested
invested(uint256) := REF_503(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
profit = getProfitShare(currentInvestor)

IRs:
TMP_940(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profit(uint256) := TMP_940(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
losses = getLossesShare(currentInvestor)

IRs:
TMP_941(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
losses(uint256) := TMP_941(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested + profit < profit) || (invested + profit < invested) || (invested + profit < losses)

IRs:
TMP_942(uint256) = invested + profit
TMP_943(bool) = TMP_942 < profit
TMP_944(uint256) = invested + profit
TMP_945(bool) = TMP_944 < invested
TMP_946(bool) = TMP_943 || TMP_945
TMP_947(uint256) = invested + profit
TMP_948(bool) = TMP_947 < losses
TMP_949(bool) = TMP_946 || TMP_948
CONDITION TMP_949"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
invested + profit - losses

IRs:
TMP_950(uint256) = invested + profit
TMP_951(uint256) = TMP_950 - losses
RETURN TMP_951"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-getBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(invested < investorsProfit) || (invested + investorsProfit < invested) || (invested + investorsProfit < investorsLosses)

IRs:
TMP_924(bool) = invested < investorsProfit
TMP_925(uint256) = invested + investorsProfit
TMP_926(bool) = TMP_925 < invested
TMP_927(bool) = TMP_924 || TMP_926
TMP_928(uint256) = invested + investorsProfit
TMP_929(bool) = TMP_928 < investorsLosses
TMP_930(bool) = TMP_927 || TMP_929
CONDITION TMP_930"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: RETURN 3

EXPRESSION:
invested + investorsProfit - investorsLosses

IRs:
TMP_931(uint256) = invested + investorsProfit
TMP_932(uint256) = TMP_931 - investorsLosses
RETURN TMP_932"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-getLossesShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsLosses) / invested

IRs:
REF_495(uint256) -> investorIDs[currentInvestor]
REF_496(usingInvestorsModule.Investor) -> investors[REF_495]
REF_497(uint256) -> REF_496.amountInvested
TMP_936(uint256) = REF_497 * investorsLosses
TMP_937(uint256) = TMP_936 / invested
RETURN TMP_937"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-getMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_933(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_933"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
investorID = searchSmallestInvestor()

IRs:
TMP_934(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
investorID(uint256) := TMP_934(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
getBalance(investors[investorID].investorAddress)

IRs:
REF_493(usingInvestorsModule.Investor) -> investors[investorID]
REF_494(address) -> REF_493.investorAddress
TMP_935(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_494)
RETURN TMP_935"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-getProfitShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invested

IRs:
REF_498(uint256) -> investorIDs[currentInvestor]
REF_499(usingInvestorsModule.Investor) -> investors[REF_498]
REF_500(uint256) -> REF_499.amountInvested
TMP_938(uint256) = REF_500 * investorsProfit
TMP_939(uint256) = TMP_938 / invested
RETURN TMP_939"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-increaseInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[investorIDs[msg.sender]].amountInvested += msg.value

IRs:
REF_527(uint256) -> investorIDs[msg.sender]
REF_528(usingInvestorsModule.Investor) -> investors[REF_527]
REF_529(uint256) -> REF_528.amountInvested
REF_529(-> investors) = REF_529 + msg.value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
6->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-investorsInvariant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: _ 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(numInvestors <= MAX_INVESTORS)

IRs:
TMP_1079(bool) = numInvestors <= MAX_INVESTORS
TMP_1080(None) = SOLIDITY_CALL assert(bool)(TMP_1079)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-newInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_980(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_980"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
smallestInvestorID = searchSmallestInvestor()

IRs:
TMP_981(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
smallestInvestorID(uint256) := TMP_981(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
divest(investors[smallestInvestorID].investorAddress)

IRs:
REF_530(usingInvestorsModule.Investor) -> investors[smallestInvestorID]
REF_531(address) -> REF_530.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_531)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
numInvestors ++

IRs:
TMP_983(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addInvestorAtID(numInvestors)

IRs:
INTERNAL_CALL, usingInvestorsModule.addInvestorAtID(uint256)(numInvestors)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyNotInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyNotInvestors()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyMoreThanMinInvestment()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanMinInvestment()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
12->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyAfterProposed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(proposedWithdrawal.toAddress != 0)

IRs:
REF_569(address) -> proposedWithdrawal.toAddress
TMP_1087(bool) = REF_569 != 0
TMP_1088(None) = SOLIDITY_CALL assert(bool)(TMP_1087)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyIfEmergencyTimeOutHasPassed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(proposedWithdrawal.atTime + EMERGENCY_TIMEOUT <= now)

IRs:
REF_570(uint256) -> proposedWithdrawal.atTime
TMP_1089(uint256) = REF_570 + EMERGENCY_TIMEOUT
TMP_1090(bool) = TMP_1089 <= now
TMP_1091(None) = SOLIDITY_CALL assert(bool)(TMP_1090)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyIfNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! isStopped)

IRs:
TMP_1084 = UnaryType.BANG isStopped 
TMP_1085(None) = SOLIDITY_CALL assert(bool)(TMP_1084)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyIfProfitNotDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! profitDistributed

IRs:
TMP_1081 = UnaryType.BANG profitDistributed 
CONDITION TMP_1081"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyIfStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isStopped)

IRs:
TMP_1086(None) = SOLIDITY_CALL assert(bool)(isStopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] != 0)

IRs:
REF_567(uint256) -> investorIDs[msg.sender]
TMP_1075(bool) = REF_567 != 0
TMP_1076(None) = SOLIDITY_CALL assert(bool)(TMP_1075)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyMoreThanMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value > getMinInvestment())

IRs:
TMP_1070(uint256) = INTERNAL_CALL, usingInvestorsModule.getMinInvestment()()
TMP_1071(bool) = msg.value > TMP_1070
TMP_1072(None) = SOLIDITY_CALL assert(bool)(TMP_1071)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyMoreThanZero()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value != 0)

IRs:
TMP_1073(bool) = msg.value != 0
TMP_1074(None) = SOLIDITY_CALL assert(bool)(TMP_1073)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyNotInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] == 0)

IRs:
REF_568(uint256) -> investorIDs[msg.sender]
TMP_1077(bool) = REF_568 == 0
TMP_1078(None) = SOLIDITY_CALL assert(bool)(TMP_1077)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_1082(bool) = msg.sender == owner
TMP_1083(None) = SOLIDITY_CALL assert(bool)(TMP_1082)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-profitDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->19;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_958(bool) = i <= numInvestors
CONDITION TMP_958"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
currentInvestor = investors[i].investorAddress

IRs:
REF_513(usingInvestorsModule.Investor) -> investors[i]
REF_514(address) -> REF_513.investorAddress
currentInvestor(address) := REF_514(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
profitOfInvestor = getProfitShare(currentInvestor)

IRs:
TMP_959(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profitOfInvestor(uint256) := TMP_959(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lossesOfInvestor = getLossesShare(currentInvestor)

IRs:
TMP_960(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
lossesOfInvestor(uint256) := TMP_960(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested) && (investors[i].amountInvested + profitOfInvestor >= lossesOfInvestor)

IRs:
REF_515(usingInvestorsModule.Investor) -> investors[i]
REF_516(uint256) -> REF_515.amountInvested
TMP_961(uint256) = REF_516 + profitOfInvestor
REF_517(usingInvestorsModule.Investor) -> investors[i]
REF_518(uint256) -> REF_517.amountInvested
TMP_962(bool) = TMP_961 >= REF_518
REF_519(usingInvestorsModule.Investor) -> investors[i]
REF_520(uint256) -> REF_519.amountInvested
TMP_963(uint256) = REF_520 + profitOfInvestor
TMP_964(bool) = TMP_963 >= lossesOfInvestor
TMP_965(bool) = TMP_962 && TMP_964
CONDITION TMP_965"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
investors[i].amountInvested += profitOfInvestor - lossesOfInvestor

IRs:
REF_521(usingInvestorsModule.Investor) -> investors[i]
REF_522(uint256) -> REF_521.amountInvested
TMP_966(uint256) = profitOfInvestor - lossesOfInvestor
REF_522(-> investors) = REF_522 + TMP_966"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOG_InvestorCapitalUpdate(currentInvestor,int256(profitOfInvestor - lossesOfInvestor))

IRs:
TMP_967(uint256) = profitOfInvestor - lossesOfInvestor
TMP_968 = CONVERT TMP_967 to int256
Emit LOG_InvestorCapitalUpdate(currentInvestor,TMP_968)"];
11->14;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
copyInvested + investors[i].amountInvested >= copyInvested

IRs:
REF_523(usingInvestorsModule.Investor) -> investors[i]
REF_524(uint256) -> REF_523.amountInvested
TMP_971(uint256) = copyInvested + REF_524
TMP_972(bool) = TMP_971 >= copyInvested
CONDITION TMP_972"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyInvested += investors[i].amountInvested

IRs:
REF_525(usingInvestorsModule.Investor) -> investors[i]
REF_526(uint256) -> REF_525.amountInvested
copyInvested(uint256) = copyInvested + REF_526"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_973(uint256) := i(uint256)
i(uint256) = i + 1"];
18->5;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete investorsProfit

IRs:
investorsProfit = delete investorsProfit "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
delete investorsLosses

IRs:
investorsLosses = delete investorsLosses "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
invested = copyInvested

IRs:
invested(uint256) := copyInvested(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
profitDistributed = true

IRs:
profitDistributed(bool) := True(bool)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyIfProfitNotDistributed()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyIfProfitNotDistributed()()"];
23->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-proposeEmergencyWithdrawal(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i <= numInvestors

IRs:
TMP_1045(bool) = i <= numInvestors
CONDITION TMP_1045"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete investors[i].votedForEmergencyWithdrawal

IRs:
REF_556(usingInvestorsModule.Investor) -> investors[i]
REF_557(bool) -> REF_556.votedForEmergencyWithdrawal
REF_556 = delete REF_557 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_1046(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
proposedWithdrawal = WithdrawalProposal(withdrawalAddress,now)

IRs:
TMP_1047(EmergencyWithdrawalModule.WithdrawalProposal) = new WithdrawalProposal(withdrawalAddress,now)
proposedWithdrawal(EmergencyWithdrawalModule.WithdrawalProposal) := TMP_1047(EmergencyWithdrawalModule.WithdrawalProposal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOG_EmergencyWithdrawalProposed()

IRs:
Emit LOG_EmergencyWithdrawalProposed()"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
10->3;
}
// Function: 39147.sol-EmergencyWithdrawalModule-safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_1008(bool) = value == 0
CONDITION TMP_1008"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ZeroSend()

IRs:
Emit LOG_ZeroSend()"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
this.balance < value

IRs:
REF_546(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1010(bool) = REF_546 < value
CONDITION TMP_1010"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_ValueIsTooBig()

IRs:
Emit LOG_ValueIsTooBig()"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_1014(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_1015 = UnaryType.BANG TMP_1014 
CONDITION TMP_1015"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOG_FailedSend(addr,value)

IRs:
Emit LOG_FailedSend(addr,value)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
addr != houseAddress

IRs:
TMP_1017(bool) = addr != houseAddress
CONDITION TMP_1017"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
! (houseAddress.call.gas(safeGas).value(value)())

IRs:
TMP_1020(bool) = LOW_LEVEL_CALL, dest:houseAddress, function:call, arguments:[] value:value gas:safeGas
TMP_1021 = UnaryType.BANG TMP_1020 
CONDITION TMP_1021"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_FailedSend(houseAddress,value)

IRs:
Emit LOG_FailedSend(houseAddress,value)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
LOG_SuccessfulSend(addr,value)

IRs:
Emit LOG_SuccessfulSend(addr,value)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-searchSmallestInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
investorID = 1

IRs:
investorID(uint256) := 1(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_952(bool) = i <= numInvestors
CONDITION TMP_952"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)

IRs:
REF_504(usingInvestorsModule.Investor) -> investors[i]
REF_505(address) -> REF_504.investorAddress
TMP_953(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_505)
REF_506(usingInvestorsModule.Investor) -> investors[investorID]
REF_507(address) -> REF_506.investorAddress
TMP_954(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_507)
TMP_955(bool) = TMP_953 < TMP_954
CONDITION TMP_955"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
investorID = i

IRs:
investorID(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_956(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
investorID

IRs:
RETURN investorID"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-setSafeGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(ORACLIZE_BASE_GAS_LIMIT + safeGas >= ORACLIZE_BASE_GAS_LIMIT)

IRs:
TMP_1024(uint256) = ORACLIZE_BASE_GAS_LIMIT + safeGas
TMP_1025(bool) = TMP_1024 >= ORACLIZE_BASE_GAS_LIMIT
TMP_1026(None) = SOLIDITY_CALL assert(bool)(TMP_1025)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(safeGas <= 25000)

IRs:
TMP_1027(bool) = safeGas <= 25000
TMP_1028(None) = SOLIDITY_CALL assert(bool)(TMP_1027)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
safeGas = _gas

IRs:
safeGas(uint256) := _gas(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newGasLimit(_gas)

IRs:
Emit newGasLimit(_gas)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ORACLIZE_PER_SPIN_GAS_LIMIT = 6100

IRs:
ORACLIZE_PER_SPIN_GAS_LIMIT(uint256) := 6100(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ORACLIZE_BASE_GAS_LIMIT = 200000

IRs:
ORACLIZE_BASE_GAS_LIMIT(uint256) := 200000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_INVESTORS = 5

IRs:
MAX_INVESTORS(uint256) := 5(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
divestFee = 50

IRs:
divestFee(uint256) := 50(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
EMERGENCY_WITHDRAWAL_RATIO = 80

IRs:
EMERGENCY_WITHDRAWAL_RATIO(uint256) := 80(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
EMERGENCY_TIMEOUT = 259200

IRs:
EMERGENCY_TIMEOUT(uint256) := 259200(uint256)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
safeGas = 9000

IRs:
safeGas(uint256) := 9000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
numInvestors = 0

IRs:
numInvestors(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
invested = 0

IRs:
invested(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
investorsProfit = 0

IRs:
investorsProfit(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
investorsLosses = 0

IRs:
investorsLosses(uint256) := 0(uint256)"];
}
// Function: 39147.sol-EmergencyWithdrawalModule-stop_or_resume_Contract(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = _isStopped

IRs:
isStopped(bool) := _isStopped(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39147.sol-EmergencyWithdrawalModule-voteEmergencyWithdrawal(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investors[investorIDs[msg.sender]].votedForEmergencyWithdrawal = vote

IRs:
REF_553(uint256) -> investorIDs[msg.sender]
REF_554(usingInvestorsModule.Investor) -> investors[REF_553]
REF_555(bool) -> REF_554.votedForEmergencyWithdrawal
REF_555(bool) (->investors) := vote(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_EmergencyWithdrawalVote(msg.sender,vote)

IRs:
Emit LOG_EmergencyWithdrawalVote(msg.sender,vote)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAfterProposed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyAfterProposed()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
5->1;
}
// Function: 39147.sol-HouseManaged-HouseManaged()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
houseAddress = msg.sender

IRs:
houseAddress(address) := msg.sender(address)"];
}
// Function: 39147.sol-HouseManaged-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-HouseManaged-changeHouse_and_Owner_Addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(newHouse != address(0x0))

IRs:
TMP_776 = CONVERT 0 to address
TMP_777(bool) = newHouse != TMP_776
TMP_778(None) = SOLIDITY_CALL assert(bool)(TMP_777)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(newOwner != address(0x0))

IRs:
TMP_779 = CONVERT 0 to address
TMP_780(bool) = newOwner != TMP_779
TMP_781(None) = SOLIDITY_CALL assert(bool)(TMP_780)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LOG_OwnerAddressChanged(owner,newOwner)

IRs:
Emit LOG_OwnerAddressChanged(owner,newOwner)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseAddress = newHouse

IRs:
houseAddress(address) := newHouse(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_HouseAddressChanged(houseAddress,newHouse)

IRs:
Emit LOG_HouseAddressChanged(houseAddress,newHouse)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 39147.sol-HouseManaged-onlyIfNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! isStopped)

IRs:
TMP_787 = UnaryType.BANG isStopped 
TMP_788(None) = SOLIDITY_CALL assert(bool)(TMP_787)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-HouseManaged-onlyIfStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isStopped)

IRs:
TMP_789(None) = SOLIDITY_CALL assert(bool)(isStopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-HouseManaged-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_785(bool) = msg.sender == owner
TMP_786(None) = SOLIDITY_CALL assert(bool)(TMP_785)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-HouseManaged-stop_or_resume_Contract(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = _isStopped

IRs:
isStopped(bool) := _isStopped(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39147.sol-LedgerProofVerifyI-external_oraclize_randomDS_proofVerify(bytes,bytes32,bytes,string)
digraph{
}
// Function: 39147.sol-LedgerProofVerifyI-external_oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
}
// Function: 39147.sol-OraclizeAddrResolverI-getAddress()
digraph{
}
// Function: 39147.sol-OraclizeI-getPrice(string)
digraph{
}
// Function: 39147.sol-OraclizeI-getPrice(string,uint256)
digraph{
}
// Function: 39147.sol-OraclizeI-query(uint256,string,string)
digraph{
}
// Function: 39147.sol-OraclizeI-query2(uint256,string,string,string)
digraph{
}
// Function: 39147.sol-OraclizeI-query2_withGasLimit(uint256,string,string,string,uint256)
digraph{
}
// Function: 39147.sol-OraclizeI-queryN(uint256,string,bytes)
digraph{
}
// Function: 39147.sol-OraclizeI-queryN_withGasLimit(uint256,string,bytes,uint256)
digraph{
}
// Function: 39147.sol-OraclizeI-query_withGasLimit(uint256,string,string,uint256)
digraph{
}
// Function: 39147.sol-OraclizeI-randomDS_getSessionPubKeyHash()
digraph{
}
// Function: 39147.sol-OraclizeI-setConfig(bytes32)
digraph{
}
// Function: 39147.sol-OraclizeI-setCustomGasPrice(uint256)
digraph{
}
// Function: 39147.sol-OraclizeI-setProofType(bytes1)
digraph{
}
// Function: 39147.sol-OraclizeI-useCoupon(string)
digraph{
}
// Function: 39147.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-Owned-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_764(bool) = msg.sender == owner
TMP_765(None) = SOLIDITY_CALL assert(bool)(TMP_764)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-HouseManaged()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
houseAddress = msg.sender

IRs:
houseAddress(address) := msg.sender(address)"];
}
// Function: 39147.sol-Slot-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-Slot-Slot(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
externalContract = LedgerProofVerifyI(_verifierAddr)

IRs:
TMP_1971 = CONVERT _verifierAddr to LedgerProofVerifyI
externalContract(LedgerProofVerifyI) := TMP_1971(LedgerProofVerifyI)"];
}
// Function: 39147.sol-Slot-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_1332 = new bytes(0)
INTERNAL_CALL, Slot.__callback(bytes32,string,bytes)(myid,result,TMP_1332)"];
}
// Function: 39147.sol-Slot-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
payout = executeSpins(myid,bytes(result))

IRs:
TMP_2044 = CONVERT result to bytes
TMP_2045(uint256) = INTERNAL_CALL, Slot.executeSpins(bytes32,bytes)(myid,TMP_2044)
payout(uint256) := TMP_2045(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sendPayout(myid,payout)

IRs:
INTERNAL_CALL, Slot.sendPayout(bytes32,uint256)(myid,payout)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete profitDistributed

IRs:
profitDistributed = delete profitDistributed "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete spins[myid]

IRs:
REF_1100(Slot.SpinsContainer) -> spins[myid]
spins = delete REF_1100 "];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOraclize()

IRs:
MODIFIER_CALL, Slot.onlyOraclize()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyIfSpinsExist(myid)

IRs:
MODIFIER_CALL, Slot.onlyIfSpinsExist(bytes32)(myid)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyIfEnoughFunds(myid)

IRs:
MODIFIER_CALL, Slot.onlyIfEnoughFunds(bytes32)(myid)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_randomDS_proofVerify(myid,result,_proof)

IRs:
MODIFIER_CALL, Slot.oraclize_randomDS_proofVerify(bytes32,string,bytes)(myid,result,_proof)"];
8->1;
}
// Function: 39147.sol-Slot-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_1092(uint256) = x + y
z(uint256) := TMP_1092(uint256)
TMP_1093(bool) = z >= x
TMP_1094(None) = SOLIDITY_CALL assert(bool)(TMP_1093)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-addInvestorAtID(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investorIDs[msg.sender] = id

IRs:
REF_600(uint256) -> investorIDs[msg.sender]
REF_600(uint256) (->investorIDs) := id(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[id].investorAddress = msg.sender

IRs:
REF_601(usingInvestorsModule.Investor) -> investors[id]
REF_602(address) -> REF_601.investorAddress
REF_602(address) (->investors) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
investors[id].amountInvested = msg.value

IRs:
REF_603(usingInvestorsModule.Investor) -> investors[id]
REF_604(uint256) -> REF_603.amountInvested
REF_604(uint256) (->investors) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LOG_InvestorEntrance(msg.sender,msg.value)

IRs:
Emit LOG_InvestorEntrance(msg.sender,msg.value)"];
}
// Function: 39147.sol-Slot-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_1018 -> LENGTH arr
arrlen(uint256) := REF_1018(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1788(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1788(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1789(bool) = i < arrlen
CONDITION TMP_1789"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_1019(bytes) -> elemArray[i]
REF_1020(bytes) -> arr[i]
TMP_1790 = CONVERT REF_1020 to bytes
REF_1019(bytes) (->elemArray) := TMP_1790(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_1021(bytes) -> elemArray[i]
REF_1022 -> LENGTH REF_1021
REF_1023(bytes) -> elemArray[i]
REF_1024 -> LENGTH REF_1023
TMP_1791(uint256) = REF_1024 - 1
TMP_1792(uint256) = TMP_1791 / 23
TMP_1793(uint256) = REF_1022 + TMP_1792
TMP_1794(uint256) = TMP_1793 + 3
outputlen(uint256) = outputlen + TMP_1794"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1795(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1796(uint256) = arrlen + 128
cborlen(uint256) := TMP_1796(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1797 = CONVERT cborlen to bytes1
REF_1025 -> LENGTH TMP_1797
outputlen(uint256) = outputlen + REF_1025"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1799 = new bytes(outputlen)
res(bytes) := TMP_1799(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1800 = CONVERT cborlen to bytes1
REF_1026 -> LENGTH TMP_1800
TMP_1801(bool) = REF_1026 > ctr
CONDITION TMP_1801"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_1027(None) -> res[ctr]
TMP_1802 = CONVERT cborlen to bytes1
REF_1028(None) -> TMP_1802[ctr]
REF_1027(None) (->res) := REF_1028(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1803(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1804(bool) = i < arrlen
CONDITION TMP_1804"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_1029(uint256) -> res[ctr]
REF_1029(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1805(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_1030(bytes) -> elemArray[i]
REF_1031 -> LENGTH REF_1030
TMP_1806(bool) = x < REF_1031
CONDITION TMP_1806"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1807(uint256) = x % 23
TMP_1808(bool) = TMP_1807 == 0
CONDITION TMP_1808"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1809 = CONVERT elemcborlen to bytes1
REF_1032 -> LENGTH TMP_1809
TMP_1810(uint256) = ctr - lctr
TMP_1811(bool) = REF_1032 > TMP_1810
CONDITION TMP_1811"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_1033(None) -> res[ctr]
TMP_1812 = CONVERT elemcborlen to bytes1
TMP_1813(uint256) = ctr - lctr
REF_1034(None) -> TMP_1812[TMP_1813]
REF_1033(None) (->res) := REF_1034(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1814(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_1035(None) -> res[ctr]
REF_1036(bytes) -> elemArray[i]
REF_1037(None) -> REF_1036[x]
REF_1035(None) (->res) := REF_1037(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1815(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1816(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_1038(uint256) -> res[ctr]
REF_1038(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1817(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1818(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_1039(bytes) -> elemArray[i]
REF_1040 -> LENGTH REF_1039
TMP_1819(uint256) = REF_1040 - x
TMP_1820(bool) = TMP_1819 >= 24
CONDITION TMP_1820"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_1041(bytes) -> elemArray[i]
REF_1042 -> LENGTH REF_1041
TMP_1821(uint256) = REF_1042 - x
elemcborlen(uint256) := TMP_1821(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39147.sol-Slot-buySpins(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gas = _nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas

IRs:
TMP_1984(uint256) = _nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT
TMP_1985(uint256) = TMP_1984 + ORACLIZE_BASE_GAS_LIMIT
TMP_1986(uint256) = TMP_1985 + safeGas
gas(uint256) := TMP_1986(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(random,gas)

IRs:
TMP_1987(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_1988 = CONVERT TMP_1987 to OraclizeI
TMP_1989(uint256) = HIGH_LEVEL_CALL, dest:TMP_1988(OraclizeI), function:getPrice, arguments:['random', 'gas']  
oraclizeFee(uint256) := TMP_1989(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
oraclizeFee / multipliers[0] + oraclizeFee >= msg.value

IRs:
REF_1074(uint256) -> multipliers[0]
TMP_1990(uint256) = oraclizeFee / REF_1074
TMP_1991(uint256) = TMP_1990 + oraclizeFee
TMP_1992(bool) = TMP_1991 >= msg.value
CONDITION TMP_1992"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_1993(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
amountWagered = msg.value - oraclizeFee

IRs:
TMP_1994(uint256) = msg.value - oraclizeFee
amountWagered(uint256) := TMP_1994(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
maxNetPotentialPayout = (amountWagered * (10000 - INVESTORS_EDGE) * multipliers[0]) / 10000

IRs:
TMP_1995(uint256) = 10000 - INVESTORS_EDGE
TMP_1996(uint256) = amountWagered * TMP_1995
REF_1075(uint256) -> multipliers[0]
TMP_1997(uint256) = TMP_1996 * REF_1075
TMP_1998(uint256) = TMP_1997 / 10000
maxNetPotentialPayout(uint256) := TMP_1998(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
maxAllowedPayout = (CAPITAL_RISK * getBankroll()) / 10000

IRs:
TMP_1999(uint256) = INTERNAL_CALL, usingInvestorsModule.getBankroll()()
TMP_2000(uint256) = CAPITAL_RISK * TMP_1999
TMP_2001(uint256) = TMP_2000 / 10000
maxAllowedPayout(uint256) := TMP_2001(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(maxNetPotentialPayout <= maxAllowedPayout) && (amountWagered >= minBet)

IRs:
TMP_2002(bool) = maxNetPotentialPayout <= maxAllowedPayout
TMP_2003(bool) = amountWagered >= minBet
TMP_2004(bool) = TMP_2002 && TMP_2003
CONDITION TMP_2004"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
queryId = oraclize_newRandomDSQuery(0,2 * _nSpins,gas)

IRs:
TMP_2005(uint256) = 2 * _nSpins
TMP_2006(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_newRandomDSQuery(uint256,uint256,uint256)(0,TMP_2005,gas)
queryId(bytes32) := TMP_2006(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
spins[queryId] = SpinsContainer(msg.sender,_nSpins,amountWagered)

IRs:
REF_1076(Slot.SpinsContainer) -> spins[queryId]
TMP_2007(Slot.SpinsContainer) = new SpinsContainer(msg.sender,_nSpins,amountWagered)
REF_1076(Slot.SpinsContainer) (->spins) := TMP_2007(Slot.SpinsContainer)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
LOG_newSpinsContainer(queryId,msg.sender,amountWagered,_nSpins)

IRs:
Emit LOG_newSpinsContainer(queryId,msg.sender,amountWagered,_nSpins)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
totalAmountWagered += amountWagered

IRs:
totalAmountWagered(uint256) = totalAmountWagered + amountWagered"];
13->15;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
revert()()

IRs:
TMP_2009(None) = SOLIDITY_CALL revert()()"];
14->15;
15[label="Node Type: END_IF 15
"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyLessThanMaxSpins(_nSpins)

IRs:
MODIFIER_CALL, Slot.onlyLessThanMaxSpins(uint256)(_nSpins)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
17->1;
}
// Function: 39147.sol-Slot-cast(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = uint128(x)) == x)

IRs:
TMP_1157 = CONVERT x to uint128
z(uint128) := TMP_1157(uint128)
TMP_1158(bool) = z == x
TMP_1159(None) = SOLIDITY_CALL assert(bool)(TMP_1158)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-changeHouse_and_Owner_Addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(newHouse != address(0x0))

IRs:
TMP_1297 = CONVERT 0 to address
TMP_1298(bool) = newHouse != TMP_1297
TMP_1299(None) = SOLIDITY_CALL assert(bool)(TMP_1298)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(newOwner != address(0x0))

IRs:
TMP_1300 = CONVERT 0 to address
TMP_1301(bool) = newOwner != TMP_1300
TMP_1302(None) = SOLIDITY_CALL assert(bool)(TMP_1301)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LOG_OwnerAddressChanged(owner,newOwner)

IRs:
Emit LOG_OwnerAddressChanged(owner,newOwner)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseAddress = newHouse

IRs:
houseAddress(address) := newHouse(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_HouseAddressChanged(houseAddress,newHouse)

IRs:
Emit LOG_HouseAddressChanged(houseAddress,newHouse)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 39147.sol-Slot-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_1959(uint256) = length + toOffset
minLength(uint256) := TMP_1959(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_1068 -> LENGTH to
TMP_1960(bool) = REF_1068 < minLength
CONDITION TMP_1960"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_1961(uint256) = 32 + fromOffset
i(uint256) := TMP_1961(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_1962(uint256) = 32 + toOffset
j(uint256) := TMP_1962(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_1963(uint256) = 32 + fromOffset
TMP_1964(uint256) = TMP_1963 + length
TMP_1965(bool) = i < TMP_1964
CONDITION TMP_1965"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 39147.sol-Slot-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_2137(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_2138 = CONVERT TMP_2137 to OraclizeI
oraclize(OraclizeI) := TMP_2138(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 39147.sol-Slot-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_1101(uint256) = x / y
z(uint256) := TMP_1101(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-divest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(msg.sender)

IRs:
INTERNAL_CALL, usingInvestorsModule.divest(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
2->1;
}
// Function: 39147.sol-Slot-divest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentID = investorIDs[currentInvestor]

IRs:
REF_624(uint256) -> investorIDs[currentInvestor]
currentID(uint256) := REF_624(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToReturn = getBalance(currentInvestor)

IRs:
TMP_1258(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(currentInvestor)
amountToReturn(uint256) := TMP_1258(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested >= investors[currentID].amountInvested)

IRs:
REF_625(usingInvestorsModule.Investor) -> investors[currentID]
REF_626(uint256) -> REF_625.amountInvested
TMP_1259(bool) = invested >= REF_626
CONDITION TMP_1259"];
4->5[label="True"];
4->20[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invested -= investors[currentID].amountInvested

IRs:
REF_627(usingInvestorsModule.Investor) -> investors[currentID]
REF_628(uint256) -> REF_627.amountInvested
invested(uint256) = invested - REF_628"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
divestFeeAmount = (amountToReturn * divestFee) / 10000

IRs:
TMP_1260(uint256) = amountToReturn * divestFee
TMP_1261(uint256) = TMP_1260 / 10000
divestFeeAmount(uint256) := TMP_1261(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountToReturn -= divestFeeAmount

IRs:
amountToReturn(uint256) = amountToReturn - divestFeeAmount"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete investors[currentID]

IRs:
REF_629(usingInvestorsModule.Investor) -> investors[currentID]
investors = delete REF_629 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investorIDs[currentInvestor]

IRs:
REF_630(uint256) -> investorIDs[currentInvestor]
investorIDs = delete REF_630 "];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentID != numInvestors

IRs:
TMP_1262(bool) = currentID != numInvestors
CONDITION TMP_1262"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
lastInvestor = investors[numInvestors]

IRs:
REF_631(usingInvestorsModule.Investor) -> investors[numInvestors]
lastInvestor(usingInvestorsModule.Investor) := REF_631(usingInvestorsModule.Investor)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorIDs[lastInvestor.investorAddress] = currentID

IRs:
REF_632(address) -> lastInvestor.investorAddress
REF_633(uint256) -> investorIDs[REF_632]
REF_633(uint256) (->investorIDs) := currentID(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investors[currentID] = lastInvestor

IRs:
REF_634(usingInvestorsModule.Investor) -> investors[currentID]
REF_634(usingInvestorsModule.Investor) (->investors) := lastInvestor(usingInvestorsModule.Investor)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete investors[numInvestors]

IRs:
REF_635(usingInvestorsModule.Investor) -> investors[numInvestors]
investors = delete REF_635 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
numInvestors --

IRs:
TMP_1263(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors - 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
safeSend(currentInvestor,amountToReturn)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(currentInvestor,amountToReturn)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
safeSend(houseAddress,divestFeeAmount)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(houseAddress,divestFeeAmount)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LOG_InvestorExit(currentInvestor,amountToReturn)

IRs:
Emit LOG_InvestorExit(currentInvestor,amountToReturn)"];
19->22;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
21->22;
22[label="Node Type: END_IF 22
"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
23->1;
}
// Function: 39147.sol-Slot-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_1069 -> LENGTH sig
TMP_1966(bool) = REF_1069 != 65
CONDITION TMP_1966"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_1967(bool) = v < 27
CONDITION TMP_1967"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_1968(bool) = v != 27
TMP_1969(bool) = v != 28
TMP_1970(bool) = TMP_1968 && TMP_1969
CONDITION TMP_1970"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_5(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_5"];
}
// Function: 39147.sol-Slot-executeEmergencyWithdrawal()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->19;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
amountToWithdraw = this.balance

IRs:
REF_576(uint256) = SOLIDITY_CALL balance(address)(this)
amountToWithdraw(uint256) := REF_576([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7f59e5b6a0b0>])"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i <= numInvestors

IRs:
TMP_1170(bool) = i <= numInvestors
CONDITION TMP_1170"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
investors[i].votedForEmergencyWithdrawal == true

IRs:
REF_577(usingInvestorsModule.Investor) -> investors[i]
REF_578(bool) -> REF_577.votedForEmergencyWithdrawal
TMP_1171(bool) = REF_578 == True
CONDITION TMP_1171"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
numOfVotesInFavour ++

IRs:
TMP_1172(uint256) := numOfVotesInFavour(uint256)
numOfVotesInFavour(uint256) = numOfVotesInFavour + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investors[i].votedForEmergencyWithdrawal

IRs:
REF_579(usingInvestorsModule.Investor) -> investors[i]
REF_580(bool) -> REF_579.votedForEmergencyWithdrawal
REF_579 = delete REF_580 "];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_1173(uint256) := i(uint256)
i(uint256) = i + 1"];
11->6;
12[label="Node Type: IF 12

EXPRESSION:
numOfVotesInFavour >= EMERGENCY_WITHDRAWAL_RATIO * numInvestors / 100

IRs:
TMP_1174(uint256) = EMERGENCY_WITHDRAWAL_RATIO * numInvestors
TMP_1175(uint256) = TMP_1174 / 100
TMP_1176(bool) = numOfVotesInFavour >= TMP_1175
CONDITION TMP_1176"];
12->13[label="True"];
12->17[label="False"];
13[label="Node Type: IF 13

EXPRESSION:
! proposedWithdrawal.toAddress.send(amountToWithdraw)

IRs:
REF_581(address) -> proposedWithdrawal.toAddress
TMP_1177 = SEND dest:REF_581 value:amountToWithdraw
TMP_1178 = UnaryType.BANG TMP_1177 
CONDITION TMP_1178"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
LOG_EmergencyWithdrawalFailed(proposedWithdrawal.toAddress)

IRs:
REF_583(address) -> proposedWithdrawal.toAddress
Emit LOG_EmergencyWithdrawalFailed(REF_583)"];
14->16;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
LOG_EmergencyWithdrawalSucceeded(proposedWithdrawal.toAddress,amountToWithdraw)

IRs:
REF_584(address) -> proposedWithdrawal.toAddress
Emit LOG_EmergencyWithdrawalSucceeded(REF_584,amountToWithdraw)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
revert()()

IRs:
TMP_1181(None) = SOLIDITY_CALL revert()()"];
17->18;
18[label="Node Type: END_IF 18
"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
onlyAfterProposed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyAfterProposed()()"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
onlyIfEmergencyTimeOutHasPassed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyIfEmergencyTimeOutHasPassed()()"];
22->1;
}
// Function: 39147.sol-Slot-executeSpins(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
amountWon = 0

IRs:
amountWon(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
numberDrawn = 0

IRs:
numberDrawn(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
rangeUpperEnd = 0

IRs:
rangeUpperEnd(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nSpins = spins[myid].nSpins

IRs:
REF_1077(Slot.SpinsContainer) -> spins[myid]
REF_1078(uint256) -> REF_1077.nSpins
nSpins(uint256) := REF_1078(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->23;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 * nSpins

IRs:
TMP_2012(uint256) = 2 * nSpins
TMP_2013(bool) = i < TMP_2012
CONDITION TMP_2013"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
numberDrawn = ((uint256(randomBytes[i]) * 256 + uint256(randomBytes[i + 1])) * 10000) / 2 ** 16

IRs:
REF_1079(None) -> randomBytes[i]
TMP_2014 = CONVERT REF_1079 to uint256
TMP_2015(uint256) = TMP_2014 * 256
TMP_2016(uint256) = i + 1
REF_1080(None) -> randomBytes[TMP_2016]
TMP_2017 = CONVERT REF_1080 to uint256
TMP_2018(uint256) = TMP_2015 + TMP_2017
TMP_2019(uint256) = TMP_2018 * 10000
TMP_2020(uint256) = 2 ** 16
TMP_2021(uint256) = TMP_2019 / TMP_2020
numberDrawn(uint256) := TMP_2021(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
rangeUpperEnd = 0

IRs:
rangeUpperEnd(uint256) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOG_SpinExecuted(myid,spins[myid].playerAddress,i / 2,numberDrawn)

IRs:
REF_1081(Slot.SpinsContainer) -> spins[myid]
REF_1082(address) -> REF_1081.playerAddress
TMP_2022(uint256) = i / 2
Emit LOG_SpinExecuted(myid,REF_1082,TMP_2022,numberDrawn)"];
11->14;
12[label="Node Type: BEGIN_LOOP 12
"];
12->15;
13[label="Node Type: END_LOOP 13
"];
13->22;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
j = 0

IRs:
j(uint256) := 0(uint256)"];
14->12;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
j < probabilities.length

IRs:
REF_1083 -> LENGTH probabilities
TMP_2024(bool) = j < REF_1083
CONDITION TMP_2024"];
15->16[label="True"];
15->13[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
rangeUpperEnd += probabilities[j]

IRs:
REF_1084(uint256) -> probabilities[j]
rangeUpperEnd(uint256) = rangeUpperEnd + REF_1084"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
numberDrawn < rangeUpperEnd

IRs:
TMP_2025(bool) = numberDrawn < rangeUpperEnd
CONDITION TMP_2025"];
17->18[label="True"];
17->20[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
amountWon += (spins[myid].amountWagered * multipliers[j]) / nSpins

IRs:
REF_1085(Slot.SpinsContainer) -> spins[myid]
REF_1086(uint256) -> REF_1085.amountWagered
REF_1087(uint256) -> multipliers[j]
TMP_2026(uint256) = REF_1086 * REF_1087
TMP_2027(uint256) = TMP_2026 / nSpins
amountWon(uint256) = amountWon + TMP_2027"];
18->19;
19[label="Node Type: BREAK 19
"];
19->13;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
j ++

IRs:
TMP_2028(uint256) := j(uint256)
j(uint256) = j + 1"];
21->15;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
22->8;
23[label="Node Type: RETURN 23

EXPRESSION:
amountWon

IRs:
RETURN amountWon"];
}
// Function: 39147.sol-Slot-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
buySpins(1)

IRs:
INTERNAL_CALL, Slot.buySpins(uint256)(1)"];
}
// Function: 39147.sol-Slot-forceDivestOfAllInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
copyNumInvestors = numInvestors

IRs:
copyNumInvestors(uint256) := numInvestors(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= copyNumInvestors

IRs:
TMP_1269(bool) = i <= copyNumInvestors
CONDITION TMP_1269"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
divest(investors[1].investorAddress)

IRs:
REF_636(usingInvestorsModule.Investor) -> investors[1]
REF_637(address) -> REF_636.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_637)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_1271(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
}
// Function: 39147.sol-Slot-forceDivestOfOneInvestor(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(currentInvestor)

IRs:
INTERNAL_CALL, usingInvestorsModule.divest(address)(currentInvestor)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete proposedWithdrawal

IRs:
proposedWithdrawal = delete proposedWithdrawal "];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
4->1;
}
// Function: 39147.sol-Slot-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
invested = investors[investorIDs[currentInvestor]].amountInvested

IRs:
REF_593(uint256) -> investorIDs[currentInvestor]
REF_594(usingInvestorsModule.Investor) -> investors[REF_593]
REF_595(uint256) -> REF_594.amountInvested
invested(uint256) := REF_595(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
profit = getProfitShare(currentInvestor)

IRs:
TMP_1205(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profit(uint256) := TMP_1205(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
losses = getLossesShare(currentInvestor)

IRs:
TMP_1206(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
losses(uint256) := TMP_1206(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested + profit < profit) || (invested + profit < invested) || (invested + profit < losses)

IRs:
TMP_1207(uint256) = invested + profit
TMP_1208(bool) = TMP_1207 < profit
TMP_1209(uint256) = invested + profit
TMP_1210(bool) = TMP_1209 < invested
TMP_1211(bool) = TMP_1208 || TMP_1210
TMP_1212(uint256) = invested + profit
TMP_1213(bool) = TMP_1212 < losses
TMP_1214(bool) = TMP_1211 || TMP_1213
CONDITION TMP_1214"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
invested + profit - losses

IRs:
TMP_1215(uint256) = invested + profit
TMP_1216(uint256) = TMP_1215 - losses
RETURN TMP_1216"];
}
// Function: 39147.sol-Slot-getBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(invested < investorsProfit) || (invested + investorsProfit < invested) || (invested + investorsProfit < investorsLosses)

IRs:
TMP_1189(bool) = invested < investorsProfit
TMP_1190(uint256) = invested + investorsProfit
TMP_1191(bool) = TMP_1190 < invested
TMP_1192(bool) = TMP_1189 || TMP_1191
TMP_1193(uint256) = invested + investorsProfit
TMP_1194(bool) = TMP_1193 < investorsLosses
TMP_1195(bool) = TMP_1192 || TMP_1194
CONDITION TMP_1195"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: RETURN 3

EXPRESSION:
invested + investorsProfit - investorsLosses

IRs:
TMP_1196(uint256) = invested + investorsProfit
TMP_1197(uint256) = TMP_1196 - investorsLosses
RETURN TMP_1197"];
}
// Function: 39147.sol-Slot-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 39147.sol-Slot-getLossesShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsLosses) / invested

IRs:
REF_587(uint256) -> investorIDs[currentInvestor]
REF_588(usingInvestorsModule.Investor) -> investors[REF_587]
REF_589(uint256) -> REF_588.amountInvested
TMP_1201(uint256) = REF_589 * investorsLosses
TMP_1202(uint256) = TMP_1201 / invested
RETURN TMP_1202"];
}
// Function: 39147.sol-Slot-getMaxAmountToWager(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(random,_nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas)

IRs:
TMP_2081(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_2082 = CONVERT TMP_2081 to OraclizeI
TMP_2083(uint256) = _nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT
TMP_2084(uint256) = TMP_2083 + ORACLIZE_BASE_GAS_LIMIT
TMP_2085(uint256) = TMP_2084 + safeGas
TMP_2086(uint256) = HIGH_LEVEL_CALL, dest:TMP_2082(OraclizeI), function:getPrice, arguments:['random', 'TMP_2085']  
oraclizeFee(uint256) := TMP_2086(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
maxWage = (CAPITAL_RISK * getBankroll()) * 10000 / ((10000 - INVESTORS_EDGE) * 10000 * multipliers[0])

IRs:
TMP_2087(uint256) = INTERNAL_CALL, usingInvestorsModule.getBankroll()()
TMP_2088(uint256) = CAPITAL_RISK * TMP_2087
TMP_2089(uint256) = TMP_2088 * 10000
TMP_2090(uint256) = 10000 - INVESTORS_EDGE
TMP_2091(uint256) = TMP_2090 * 10000
REF_1124(uint256) -> multipliers[0]
TMP_2092(uint256) = TMP_2091 * REF_1124
TMP_2093(uint256) = TMP_2089 / TMP_2092
maxWage(uint256) := TMP_2093(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
maxWage + oraclizeFee

IRs:
TMP_2094(uint256) = maxWage + oraclizeFee
RETURN TMP_2094"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyLessThanMaxSpins(_nSpins)

IRs:
MODIFIER_CALL, Slot.onlyLessThanMaxSpins(uint256)(_nSpins)"];
4->1;
}
// Function: 39147.sol-Slot-getMinAmountToWager(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
gas = _nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT + ORACLIZE_BASE_GAS_LIMIT + safeGas

IRs:
TMP_2071(uint256) = _nSpins * ORACLIZE_PER_SPIN_GAS_LIMIT
TMP_2072(uint256) = TMP_2071 + ORACLIZE_BASE_GAS_LIMIT
TMP_2073(uint256) = TMP_2072 + safeGas
gas(uint256) := TMP_2073(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
oraclizeFee = OraclizeI(OAR.getAddress()).getPrice(random,gas)

IRs:
TMP_2074(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_2075 = CONVERT TMP_2074 to OraclizeI
TMP_2076(uint256) = HIGH_LEVEL_CALL, dest:TMP_2075(OraclizeI), function:getPrice, arguments:['random', 'gas']  
oraclizeFee(uint256) := TMP_2076(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
minBet + oraclizeFee / multipliers[0] + oraclizeFee

IRs:
REF_1121(uint256) -> multipliers[0]
TMP_2077(uint256) = oraclizeFee / REF_1121
TMP_2078(uint256) = minBet + TMP_2077
TMP_2079(uint256) = TMP_2078 + oraclizeFee
RETURN TMP_2079"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyLessThanMaxSpins(_nSpins)

IRs:
MODIFIER_CALL, Slot.onlyLessThanMaxSpins(uint256)(_nSpins)"];
4->1;
}
// Function: 39147.sol-Slot-getMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_1198(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_1198"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
investorID = searchSmallestInvestor()

IRs:
TMP_1199(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
investorID(uint256) := TMP_1199(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
getBalance(investors[investorID].investorAddress)

IRs:
REF_585(usingInvestorsModule.Investor) -> investors[investorID]
REF_586(address) -> REF_585.investorAddress
TMP_1200(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_586)
RETURN TMP_1200"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39147.sol-Slot-getProfitShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invested

IRs:
REF_590(uint256) -> investorIDs[currentInvestor]
REF_591(usingInvestorsModule.Investor) -> investors[REF_590]
REF_592(uint256) -> REF_591.amountInvested
TMP_1203(uint256) = REF_592 * investorsProfit
TMP_1204(uint256) = TMP_1203 / invested
RETURN TMP_1204"];
}
// Function: 39147.sol-Slot-getSpinsContainer(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(spins[myid].playerAddress,spins[myid].amountWagered)

IRs:
REF_1115(Slot.SpinsContainer) -> spins[myid]
REF_1116(address) -> REF_1115.playerAddress
REF_1117(Slot.SpinsContainer) -> spins[myid]
REF_1118(uint256) -> REF_1117.amountWagered
RETURN REF_1116,REF_1118"];
}
// Function: 39147.sol-Slot-hadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x + y) >= x)

IRs:
TMP_1104(uint128) = x + y
z(uint128) := TMP_1104(uint128)
TMP_1105(bool) = z >= x
TMP_1106(None) = SOLIDITY_CALL assert(bool)(TMP_1105)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-hdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = x / y

IRs:
TMP_1113(uint128) = x / y
z(uint128) := TMP_1113(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-hmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_1115(bool) = x >= y
CONDITION TMP_1115"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-hmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_1114(bool) = x <= y
CONDITION TMP_1114"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-hmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_1110(uint128) = x * y
z(uint128) := TMP_1110(uint128)
TMP_1111(bool) = z >= x
TMP_1112(None) = SOLIDITY_CALL assert(bool)(TMP_1111)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-hsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_1107(uint128) = x - y
z(uint128) := TMP_1107(uint128)
TMP_1108(bool) = z <= x
TMP_1109(None) = SOLIDITY_CALL assert(bool)(TMP_1108)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-imax(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_1117(bool) = x >= y
CONDITION TMP_1117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-imin(int256,int256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_1116(bool) = x <= y
CONDITION TMP_1116"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-increaseInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[investorIDs[msg.sender]].amountInvested += msg.value

IRs:
REF_619(uint256) -> investorIDs[msg.sender]
REF_620(usingInvestorsModule.Investor) -> investors[REF_619]
REF_621(uint256) -> REF_620.amountInvested
REF_621(-> investors) = REF_621 + msg.value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
6->1;
}
// Function: 39147.sol-Slot-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_1669 = CONVERT _haystack to bytes
h(bytes) := TMP_1669(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_1670 = CONVERT _needle to bytes
n(bytes) := TMP_1670(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_954 -> LENGTH h
TMP_1671(bool) = REF_954 < 1
REF_955 -> LENGTH n
TMP_1672(bool) = REF_955 < 1
TMP_1673(bool) = TMP_1671 || TMP_1672
REF_956 -> LENGTH n
REF_957 -> LENGTH h
TMP_1674(bool) = REF_956 > REF_957
TMP_1675(bool) = TMP_1673 || TMP_1674
CONDITION TMP_1675"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_1676(uint256) = 0 - 1
RETURN TMP_1676"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_958 -> LENGTH h
TMP_1677(uint256) = 2 ** 128
TMP_1678(uint256) = TMP_1677 - 1
TMP_1679(bool) = REF_958 > TMP_1678
CONDITION TMP_1679"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_1680(uint256) = 0 - 1
RETURN TMP_1680"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_959 -> LENGTH h
TMP_1681(bool) = i < REF_959
CONDITION TMP_1681"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_960(None) -> h[i]
REF_961(None) -> n[0]
TMP_1682(bool) = REF_960 == REF_961
CONDITION TMP_1682"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_962 -> LENGTH n
TMP_1683(bool) = subindex < REF_962
TMP_1684(uint256) = i + subindex
REF_963 -> LENGTH h
TMP_1685(bool) = TMP_1684 < REF_963
TMP_1686(bool) = TMP_1683 && TMP_1685
TMP_1687(uint256) = i + subindex
REF_964(None) -> h[TMP_1687]
REF_965(None) -> n[subindex]
TMP_1688(bool) = REF_964 == REF_965
TMP_1689(bool) = TMP_1686 && TMP_1688
CONDITION TMP_1689"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_1690(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_966 -> LENGTH n
TMP_1691(bool) = subindex == REF_966
CONDITION TMP_1691"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_1692 = CONVERT i to int256
RETURN TMP_1692"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_1693(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_1694(uint256) = 0 - 1
RETURN TMP_1694"];
}
// Function: 39147.sol-Slot-investorsInvariant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: _ 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(numInvestors <= MAX_INVESTORS)

IRs:
TMP_2120(bool) = numInvestors <= MAX_INVESTORS
TMP_2121(None) = SOLIDITY_CALL assert(bool)(TMP_2120)"];
}
// Function: 39147.sol-Slot-isValidSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
netPotentialPayout = (_amountWagered * (10000 - INVESTORS_EDGE) * multipliers[0]) / 10000

IRs:
TMP_1973(uint256) = 10000 - INVESTORS_EDGE
TMP_1974(uint256) = _amountWagered * TMP_1973
REF_1071(uint256) -> multipliers[0]
TMP_1975(uint256) = TMP_1974 * REF_1071
TMP_1976(uint256) = TMP_1975 / 10000
netPotentialPayout(uint256) := TMP_1976(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
maxAllowedPayout = (CAPITAL_RISK * getBankroll()) / 10000

IRs:
TMP_1977(uint256) = INTERNAL_CALL, usingInvestorsModule.getBankroll()()
TMP_1978(uint256) = CAPITAL_RISK * TMP_1977
TMP_1979(uint256) = TMP_1978 / 10000
maxAllowedPayout(uint256) := TMP_1979(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
((netPotentialPayout <= maxAllowedPayout) && (_amountWagered >= minBet))

IRs:
TMP_1980(bool) = netPotentialPayout <= maxAllowedPayout
TMP_1981(bool) = _amountWagered >= minBet
TMP_1982(bool) = TMP_1980 && TMP_1981
RETURN TMP_1982"];
}
// Function: 39147.sol-Slot-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_1056 -> LENGTH prefix
TMP_1889(bool) = i < REF_1056
CONDITION TMP_1889"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_1057(None) -> content[i]
REF_1058(None) -> prefix[i]
TMP_1890(bool) = REF_1057 != REF_1058
CONDITION TMP_1890"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1891(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 39147.sol-Slot-max(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x >= y

IRs:
TMP_1103(bool) = x >= y
CONDITION TMP_1103"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-min(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
x <= y

IRs:
TMP_1102(bool) = x <= y
CONDITION TMP_1102"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
x

IRs:
RETURN x"];
4[label="Node Type: RETURN 4

EXPRESSION:
y

IRs:
RETURN y"];
6[label="Node Type: RETURN 6

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x * y) >= x)

IRs:
TMP_1098(uint256) = x * y
z(uint256) := TMP_1098(uint256)
TMP_1099(bool) = z >= x
TMP_1100(None) = SOLIDITY_CALL assert(bool)(TMP_1099)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-newInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_1245(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_1245"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
smallestInvestorID = searchSmallestInvestor()

IRs:
TMP_1246(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
smallestInvestorID(uint256) := TMP_1246(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
divest(investors[smallestInvestorID].investorAddress)

IRs:
REF_622(usingInvestorsModule.Investor) -> investors[smallestInvestorID]
REF_623(address) -> REF_622.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_623)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
numInvestors ++

IRs:
TMP_1248(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addInvestorAtID(numInvestors)

IRs:
INTERNAL_CALL, usingInvestorsModule.addInvestorAtID(uint256)(numInvestors)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyNotInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyNotInvestors()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyMoreThanMinInvestment()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanMinInvestment()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
12->1;
}
// Function: 39147.sol-Slot-onlyAfterProposed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(proposedWithdrawal.toAddress != 0)

IRs:
REF_1125(address) -> proposedWithdrawal.toAddress
TMP_2106(bool) = REF_1125 != 0
TMP_2107(None) = SOLIDITY_CALL assert(bool)(TMP_2106)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyIfEmergencyTimeOutHasPassed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(proposedWithdrawal.atTime + EMERGENCY_TIMEOUT <= now)

IRs:
REF_1126(uint256) -> proposedWithdrawal.atTime
TMP_2108(uint256) = REF_1126 + EMERGENCY_TIMEOUT
TMP_2109(bool) = TMP_2108 <= now
TMP_2110(None) = SOLIDITY_CALL assert(bool)(TMP_2109)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyIfEnoughFunds(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isValidSize(spins[myid].amountWagered)

IRs:
REF_1138(Slot.SpinsContainer) -> spins[myid]
REF_1139(uint256) -> REF_1138.amountWagered
TMP_2159(bool) = INTERNAL_CALL, Slot.isValidSize(uint256)(REF_1139)
CONDITION TMP_2159"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->6;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
safeSend(spins[myid].playerAddress,spins[myid].amountWagered)

IRs:
REF_1140(Slot.SpinsContainer) -> spins[myid]
REF_1141(address) -> REF_1140.playerAddress
REF_1142(Slot.SpinsContainer) -> spins[myid]
REF_1143(uint256) -> REF_1142.amountWagered
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(REF_1141,REF_1143)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
delete spins[myid]

IRs:
REF_1144(Slot.SpinsContainer) -> spins[myid]
spins = delete REF_1144 "];
4->5;
5[label="Node Type: RETURN 5
"];
6[label="Node Type: END_IF 6
"];
}
// Function: 39147.sol-Slot-onlyIfFair(uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_prob.length != _payouts.length

IRs:
REF_1145 -> LENGTH _prob
REF_1146 -> LENGTH _payouts
TMP_2163(bool) = REF_1145 != REF_1146
CONDITION TMP_2163"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_2164(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
sum = 0

IRs:
sum(uint256) := 0(uint256)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->11;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < _prob.length

IRs:
REF_1147 -> LENGTH _prob
TMP_2165(bool) = i < REF_1147
CONDITION TMP_2165"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
sum += _prob[i] * _payouts[i]

IRs:
REF_1148(uint256) -> _prob[i]
REF_1149(uint256) -> _payouts[i]
TMP_2166(uint256) = REF_1148 * REF_1149
sum(uint256) = sum + TMP_2166"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_2167(uint256) := i(uint256)
i(uint256) = i + 1"];
10->8;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
assert(bool)(sum == 10000)

IRs:
TMP_2168(bool) = sum == 10000
TMP_2169(None) = SOLIDITY_CALL assert(bool)(TMP_2168)"];
11->12;
12[label="Node Type: _ 12
"];
}
// Function: 39147.sol-Slot-onlyIfNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! isStopped)

IRs:
TMP_2125 = UnaryType.BANG isStopped 
TMP_2126(None) = SOLIDITY_CALL assert(bool)(TMP_2125)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyIfProfitNotDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! profitDistributed

IRs:
TMP_2122 = UnaryType.BANG profitDistributed 
CONDITION TMP_2122"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 39147.sol-Slot-onlyIfSpinsExist(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(spins[myid].playerAddress != address(0x0))

IRs:
REF_1136(Slot.SpinsContainer) -> spins[myid]
REF_1137(address) -> REF_1136.playerAddress
TMP_2156 = CONVERT 0 to address
TMP_2157(bool) = REF_1137 != TMP_2156
TMP_2158(None) = SOLIDITY_CALL assert(bool)(TMP_2157)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyIfStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isStopped)

IRs:
TMP_2127(None) = SOLIDITY_CALL assert(bool)(isStopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] != 0)

IRs:
REF_1127(uint256) -> investorIDs[msg.sender]
TMP_2116(bool) = REF_1127 != 0
TMP_2117(None) = SOLIDITY_CALL assert(bool)(TMP_2116)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyLessThanMaxSpins(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(_nSpins <= MAX_SPINS)

IRs:
TMP_2161(bool) = _nSpins <= MAX_SPINS
TMP_2162(None) = SOLIDITY_CALL assert(bool)(TMP_2161)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyMoreThanMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value > getMinInvestment())

IRs:
TMP_2111(uint256) = INTERNAL_CALL, usingInvestorsModule.getMinInvestment()()
TMP_2112(bool) = msg.value > TMP_2111
TMP_2113(None) = SOLIDITY_CALL assert(bool)(TMP_2112)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyMoreThanZero()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value != 0)

IRs:
TMP_2114(bool) = msg.value != 0
TMP_2115(None) = SOLIDITY_CALL assert(bool)(TMP_2114)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyNotInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] == 0)

IRs:
REF_1128(uint256) -> investorIDs[msg.sender]
TMP_2118(bool) = REF_1128 == 0
TMP_2119(None) = SOLIDITY_CALL assert(bool)(TMP_2118)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyOraclize()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == oraclize_cbAddress())

IRs:
TMP_2153(address) = INTERNAL_CALL, usingOraclize.oraclize_cbAddress()()
TMP_2154(bool) = msg.sender == TMP_2153
TMP_2155(None) = SOLIDITY_CALL assert(bool)(TMP_2154)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_2123(bool) = msg.sender == owner
TMP_2124(None) = SOLIDITY_CALL assert(bool)(TMP_2123)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_2128 = CONVERT OAR to address
TMP_2129(bool) = TMP_2128 == 0
TMP_2130 = CONVERT OAR to address
TMP_2131(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_2130)
TMP_2132(bool) = TMP_2131 == 0
TMP_2133(bool) = TMP_2129 || TMP_2132
CONDITION TMP_2133"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_2134(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_2135(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_2136 = CONVERT TMP_2135 to OraclizeI
oraclize(OraclizeI) := TMP_2136(OraclizeI)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 39147.sol-Slot-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_1620(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_1620"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 39147.sol-Slot-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_1336(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_1336"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1338(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_1338"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_1822(bool) = _nbytes == 0
TMP_1823(bool) = _nbytes > 32
TMP_1824(bool) = TMP_1822 || TMP_1823
CONDITION TMP_1824"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_1826 = new bytes(1)
nbytes(bytes) := TMP_1826(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_1043(bytes1) -> nbytes[0]
TMP_1827 = CONVERT _nbytes to bytes1
REF_1043(bytes1) (->nbytes) := TMP_1827(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_1828(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_1828(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_1829(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_1829(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_1830 = CONVERT _delay to bytes8
REF_1044(bytes) -> args[1]
REF_1045(bytes) -> args[0]
TMP_1831(bytes32) = SOLIDITY_CALL sha256()(REF_1045)
REF_1046(bytes) -> args[2]
TMP_1832(bytes32) = SOLIDITY_CALL sha3()(TMP_1830,REF_1044,TMP_1831,REF_1046)
INTERNAL_CALL, Slot.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_1832)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1541(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1541(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_816(bytes) -> dynargs[0]
REF_817(bytes) -> args[0]
REF_816(bytes) (->dynargs) := REF_817(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1542(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1542"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1553(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1553(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_822(bytes) -> dynargs[0]
REF_823(bytes) -> args[0]
REF_822(bytes) (->dynargs) := REF_823(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1554(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1554"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1557(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1557(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_824(bytes) -> dynargs[0]
REF_825(bytes) -> args[0]
REF_824(bytes) (->dynargs) := REF_825(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_826(bytes) -> dynargs[1]
REF_827(bytes) -> args[1]
REF_826(bytes) (->dynargs) := REF_827(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1558(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1558"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1569(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1569(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_836(bytes) -> dynargs[0]
REF_837(bytes) -> args[0]
REF_836(bytes) (->dynargs) := REF_837(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_838(bytes) -> dynargs[1]
REF_839(bytes) -> args[1]
REF_838(bytes) (->dynargs) := REF_839(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1570(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1570"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1573(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1573(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_840(bytes) -> dynargs[0]
REF_841(bytes) -> args[0]
REF_840(bytes) (->dynargs) := REF_841(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_842(bytes) -> dynargs[1]
REF_843(bytes) -> args[1]
REF_842(bytes) (->dynargs) := REF_843(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_844(bytes) -> dynargs[2]
REF_845(bytes) -> args[2]
REF_844(bytes) (->dynargs) := REF_845(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1574(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1574"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1585(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1585(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_858(bytes) -> dynargs[0]
REF_859(bytes) -> args[0]
REF_858(bytes) (->dynargs) := REF_859(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_860(bytes) -> dynargs[1]
REF_861(bytes) -> args[1]
REF_860(bytes) (->dynargs) := REF_861(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_862(bytes) -> dynargs[2]
REF_863(bytes) -> args[2]
REF_862(bytes) (->dynargs) := REF_863(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1586(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1586"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1589(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1589(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_864(bytes) -> dynargs[0]
REF_865(bytes) -> args[0]
REF_864(bytes) (->dynargs) := REF_865(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_866(bytes) -> dynargs[1]
REF_867(bytes) -> args[1]
REF_866(bytes) (->dynargs) := REF_867(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_868(bytes) -> dynargs[2]
REF_869(bytes) -> args[2]
REF_868(bytes) (->dynargs) := REF_869(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_870(bytes) -> dynargs[3]
REF_871(bytes) -> args[3]
REF_870(bytes) (->dynargs) := REF_871(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1590(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1590"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1601(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1601(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_888(bytes) -> dynargs[0]
REF_889(bytes) -> args[0]
REF_888(bytes) (->dynargs) := REF_889(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_890(bytes) -> dynargs[1]
REF_891(bytes) -> args[1]
REF_890(bytes) (->dynargs) := REF_891(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_892(bytes) -> dynargs[2]
REF_893(bytes) -> args[2]
REF_892(bytes) (->dynargs) := REF_893(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_894(bytes) -> dynargs[3]
REF_895(bytes) -> args[3]
REF_894(bytes) (->dynargs) := REF_895(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1602(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1602"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1605(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1605(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_896(bytes) -> dynargs[0]
REF_897(bytes) -> args[0]
REF_896(bytes) (->dynargs) := REF_897(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_898(bytes) -> dynargs[1]
REF_899(bytes) -> args[1]
REF_898(bytes) (->dynargs) := REF_899(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_900(bytes) -> dynargs[2]
REF_901(bytes) -> args[2]
REF_900(bytes) (->dynargs) := REF_901(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_902(bytes) -> dynargs[3]
REF_903(bytes) -> args[3]
REF_902(bytes) (->dynargs) := REF_903(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_904(bytes) -> dynargs[4]
REF_905(bytes) -> args[4]
REF_904(bytes) (->dynargs) := REF_905(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1606(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_1606"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1617(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1617(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_926(bytes) -> dynargs[0]
REF_927(bytes) -> args[0]
REF_926(bytes) (->dynargs) := REF_927(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_928(bytes) -> dynargs[1]
REF_929(bytes) -> args[1]
REF_928(bytes) (->dynargs) := REF_929(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_930(bytes) -> dynargs[2]
REF_931(bytes) -> args[2]
REF_930(bytes) (->dynargs) := REF_931(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_932(bytes) -> dynargs[3]
REF_933(bytes) -> args[3]
REF_932(bytes) (->dynargs) := REF_933(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_934(bytes) -> dynargs[4]
REF_935(bytes) -> args[4]
REF_934(bytes) (->dynargs) := REF_935(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1618(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1618"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1508(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1508(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1509(uint256) = tx.gasprice * 200000
TMP_1510(uint256) = 1000000000000000000 + TMP_1509
TMP_1511(bool) = price > TMP_1510
CONDITION TMP_1511"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1512(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1512(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_1514(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_1514"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1532(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1532(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1533(uint256) = tx.gasprice * gaslimit
TMP_1534(uint256) = 1000000000000000000 + TMP_1533
TMP_1535(bool) = price > TMP_1534
CONDITION TMP_1535"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1536(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1536(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1538(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1538"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1340(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1340(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1341(uint256) = tx.gasprice * 200000
TMP_1342(uint256) = 1000000000000000000 + TMP_1341
TMP_1343(bool) = price > TMP_1342
CONDITION TMP_1343"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_1345(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_1345"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1368(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1368(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1369(uint256) = tx.gasprice * 200000
TMP_1370(uint256) = 1000000000000000000 + TMP_1369
TMP_1371(bool) = price > TMP_1370
CONDITION TMP_1371"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_1373(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_1373"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1389(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1389(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1390(uint256) = tx.gasprice * gaslimit
TMP_1391(uint256) = 1000000000000000000 + TMP_1390
TMP_1392(bool) = price > TMP_1391
CONDITION TMP_1392"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_1394(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_1394"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1361(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1361(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1362(uint256) = tx.gasprice * gaslimit
TMP_1363(uint256) = 1000000000000000000 + TMP_1362
TMP_1364(bool) = price > TMP_1363
CONDITION TMP_1364"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_1366(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_1366"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1429(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1429(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_684(string) -> dynargs[0]
REF_685(string) -> args[0]
REF_684(string) (->dynargs) := REF_685(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1430(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1430"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1441(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1441(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_690(string) -> dynargs[0]
REF_691(string) -> args[0]
REF_690(string) (->dynargs) := REF_691(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1442(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1442"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1445(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1445(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_692(string) -> dynargs[0]
REF_693(string) -> args[0]
REF_692(string) (->dynargs) := REF_693(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_694(string) -> dynargs[1]
REF_695(string) -> args[1]
REF_694(string) (->dynargs) := REF_695(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1446(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1446"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1457(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1457(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_704(string) -> dynargs[0]
REF_705(string) -> args[0]
REF_704(string) (->dynargs) := REF_705(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_706(string) -> dynargs[1]
REF_707(string) -> args[1]
REF_706(string) (->dynargs) := REF_707(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1458(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1458"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1461(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1461(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_708(string) -> dynargs[0]
REF_709(string) -> args[0]
REF_708(string) (->dynargs) := REF_709(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_710(string) -> dynargs[1]
REF_711(string) -> args[1]
REF_710(string) (->dynargs) := REF_711(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_712(string) -> dynargs[2]
REF_713(string) -> args[2]
REF_712(string) (->dynargs) := REF_713(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1462(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1462"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1473(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1473(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_726(string) -> dynargs[0]
REF_727(string) -> args[0]
REF_726(string) (->dynargs) := REF_727(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_728(string) -> dynargs[1]
REF_729(string) -> args[1]
REF_728(string) (->dynargs) := REF_729(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_730(string) -> dynargs[2]
REF_731(string) -> args[2]
REF_730(string) (->dynargs) := REF_731(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1474(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1474"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1477(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1477(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_732(string) -> dynargs[0]
REF_733(string) -> args[0]
REF_732(string) (->dynargs) := REF_733(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_734(string) -> dynargs[1]
REF_735(string) -> args[1]
REF_734(string) (->dynargs) := REF_735(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_736(string) -> dynargs[2]
REF_737(string) -> args[2]
REF_736(string) (->dynargs) := REF_737(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_738(string) -> dynargs[3]
REF_739(string) -> args[3]
REF_738(string) (->dynargs) := REF_739(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1478(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1478"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1489(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1489(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_756(string) -> dynargs[0]
REF_757(string) -> args[0]
REF_756(string) (->dynargs) := REF_757(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_758(string) -> dynargs[1]
REF_759(string) -> args[1]
REF_758(string) (->dynargs) := REF_759(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_760(string) -> dynargs[2]
REF_761(string) -> args[2]
REF_760(string) (->dynargs) := REF_761(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_762(string) -> dynargs[3]
REF_763(string) -> args[3]
REF_762(string) (->dynargs) := REF_763(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1490(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1490"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1493(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1493(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_764(string) -> dynargs[0]
REF_765(string) -> args[0]
REF_764(string) (->dynargs) := REF_765(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_766(string) -> dynargs[1]
REF_767(string) -> args[1]
REF_766(string) (->dynargs) := REF_767(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_768(string) -> dynargs[2]
REF_769(string) -> args[2]
REF_768(string) (->dynargs) := REF_769(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_770(string) -> dynargs[3]
REF_771(string) -> args[3]
REF_770(string) (->dynargs) := REF_771(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_772(string) -> dynargs[4]
REF_773(string) -> args[4]
REF_772(string) (->dynargs) := REF_773(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_1494(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_1494"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1505(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1505(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_794(string) -> dynargs[0]
REF_795(string) -> args[0]
REF_794(string) (->dynargs) := REF_795(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_796(string) -> dynargs[1]
REF_797(string) -> args[1]
REF_796(string) (->dynargs) := REF_797(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_798(string) -> dynargs[2]
REF_799(string) -> args[2]
REF_798(string) (->dynargs) := REF_799(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_800(string) -> dynargs[3]
REF_801(string) -> args[3]
REF_800(string) (->dynargs) := REF_801(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_802(string) -> dynargs[4]
REF_803(string) -> args[4]
REF_802(string) (->dynargs) := REF_803(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_1506(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_1506"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1396(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1396(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1397(uint256) = tx.gasprice * 200000
TMP_1398(uint256) = 1000000000000000000 + TMP_1397
TMP_1399(bool) = price > TMP_1398
CONDITION TMP_1399"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1400(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1400(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_1402(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_1402"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1420(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1420(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1421(uint256) = tx.gasprice * gaslimit
TMP_1422(uint256) = 1000000000000000000 + TMP_1421
TMP_1423(bool) = price > TMP_1422
CONDITION TMP_1423"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1424(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1424(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_1426(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1426"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1545(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1545(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_818(bytes) -> dynargs[0]
REF_819(bytes) -> args[0]
REF_818(bytes) (->dynargs) := REF_819(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1546(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1546"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_1549(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_1549(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_820(bytes) -> dynargs[0]
REF_821(bytes) -> args[0]
REF_820(bytes) (->dynargs) := REF_821(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1550(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1550"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1561(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1561(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_828(bytes) -> dynargs[0]
REF_829(bytes) -> args[0]
REF_828(bytes) (->dynargs) := REF_829(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_830(bytes) -> dynargs[1]
REF_831(bytes) -> args[1]
REF_830(bytes) (->dynargs) := REF_831(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1562(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1562"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_1565(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_1565(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_832(bytes) -> dynargs[0]
REF_833(bytes) -> args[0]
REF_832(bytes) (->dynargs) := REF_833(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_834(bytes) -> dynargs[1]
REF_835(bytes) -> args[1]
REF_834(bytes) (->dynargs) := REF_835(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1566(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1566"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1577(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1577(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_846(bytes) -> dynargs[0]
REF_847(bytes) -> args[0]
REF_846(bytes) (->dynargs) := REF_847(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_848(bytes) -> dynargs[1]
REF_849(bytes) -> args[1]
REF_848(bytes) (->dynargs) := REF_849(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_850(bytes) -> dynargs[2]
REF_851(bytes) -> args[2]
REF_850(bytes) (->dynargs) := REF_851(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1578(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1578"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_1581(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_1581(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_852(bytes) -> dynargs[0]
REF_853(bytes) -> args[0]
REF_852(bytes) (->dynargs) := REF_853(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_854(bytes) -> dynargs[1]
REF_855(bytes) -> args[1]
REF_854(bytes) (->dynargs) := REF_855(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_856(bytes) -> dynargs[2]
REF_857(bytes) -> args[2]
REF_856(bytes) (->dynargs) := REF_857(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1582(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1582"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1593(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1593(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_872(bytes) -> dynargs[0]
REF_873(bytes) -> args[0]
REF_872(bytes) (->dynargs) := REF_873(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_874(bytes) -> dynargs[1]
REF_875(bytes) -> args[1]
REF_874(bytes) (->dynargs) := REF_875(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_876(bytes) -> dynargs[2]
REF_877(bytes) -> args[2]
REF_876(bytes) (->dynargs) := REF_877(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_878(bytes) -> dynargs[3]
REF_879(bytes) -> args[3]
REF_878(bytes) (->dynargs) := REF_879(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1594(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1594"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_1597(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_1597(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_880(bytes) -> dynargs[0]
REF_881(bytes) -> args[0]
REF_880(bytes) (->dynargs) := REF_881(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_882(bytes) -> dynargs[1]
REF_883(bytes) -> args[1]
REF_882(bytes) (->dynargs) := REF_883(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_884(bytes) -> dynargs[2]
REF_885(bytes) -> args[2]
REF_884(bytes) (->dynargs) := REF_885(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_886(bytes) -> dynargs[3]
REF_887(bytes) -> args[3]
REF_886(bytes) (->dynargs) := REF_887(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1598(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1598"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1609(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1609(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_906(bytes) -> dynargs[0]
REF_907(bytes) -> args[0]
REF_906(bytes) (->dynargs) := REF_907(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_908(bytes) -> dynargs[1]
REF_909(bytes) -> args[1]
REF_908(bytes) (->dynargs) := REF_909(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_910(bytes) -> dynargs[2]
REF_911(bytes) -> args[2]
REF_910(bytes) (->dynargs) := REF_911(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_912(bytes) -> dynargs[3]
REF_913(bytes) -> args[3]
REF_912(bytes) (->dynargs) := REF_913(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_914(bytes) -> dynargs[4]
REF_915(bytes) -> args[4]
REF_914(bytes) (->dynargs) := REF_915(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1610(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_1610"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_1613(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_1613(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_916(bytes) -> dynargs[0]
REF_917(bytes) -> args[0]
REF_916(bytes) (->dynargs) := REF_917(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_918(bytes) -> dynargs[1]
REF_919(bytes) -> args[1]
REF_918(bytes) (->dynargs) := REF_919(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_920(bytes) -> dynargs[2]
REF_921(bytes) -> args[2]
REF_920(bytes) (->dynargs) := REF_921(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_922(bytes) -> dynargs[3]
REF_923(bytes) -> args[3]
REF_922(bytes) (->dynargs) := REF_923(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_924(bytes) -> dynargs[4]
REF_925(bytes) -> args[4]
REF_924(bytes) (->dynargs) := REF_925(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1614(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1614"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1516(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1516(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1517(uint256) = tx.gasprice * 200000
TMP_1518(uint256) = 1000000000000000000 + TMP_1517
TMP_1519(bool) = price > TMP_1518
CONDITION TMP_1519"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1520(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1520(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_1522(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_1522"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1524(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1524(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1525(uint256) = tx.gasprice * gaslimit
TMP_1526(uint256) = 1000000000000000000 + TMP_1525
TMP_1527(bool) = price > TMP_1526
CONDITION TMP_1527"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_1528(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_1528(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_1530(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1530"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1347(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1347(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1348(uint256) = tx.gasprice * 200000
TMP_1349(uint256) = 1000000000000000000 + TMP_1348
TMP_1350(bool) = price > TMP_1349
CONDITION TMP_1350"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_1352(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_1352"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1375(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1375(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1376(uint256) = tx.gasprice * 200000
TMP_1377(uint256) = 1000000000000000000 + TMP_1376
TMP_1378(bool) = price > TMP_1377
CONDITION TMP_1378"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_1380(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_1380"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1382(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1382(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1383(uint256) = tx.gasprice * gaslimit
TMP_1384(uint256) = 1000000000000000000 + TMP_1383
TMP_1385(bool) = price > TMP_1384
CONDITION TMP_1385"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_1387(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_1387"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1354(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1354(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1355(uint256) = tx.gasprice * gaslimit
TMP_1356(uint256) = 1000000000000000000 + TMP_1355
TMP_1357(bool) = price > TMP_1356
CONDITION TMP_1357"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_1359(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_1359"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1433(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1433(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_686(string) -> dynargs[0]
REF_687(string) -> args[0]
REF_686(string) (->dynargs) := REF_687(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1434(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1434"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_1437(string[])  = new string[](1)
dynargs(string[]) = ['TMP_1437(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_688(string) -> dynargs[0]
REF_689(string) -> args[0]
REF_688(string) (->dynargs) := REF_689(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1438(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1438"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1449(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1449(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_696(string) -> dynargs[0]
REF_697(string) -> args[0]
REF_696(string) (->dynargs) := REF_697(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_698(string) -> dynargs[1]
REF_699(string) -> args[1]
REF_698(string) (->dynargs) := REF_699(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1450(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1450"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_1453(string[])  = new string[](2)
dynargs(string[]) = ['TMP_1453(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_700(string) -> dynargs[0]
REF_701(string) -> args[0]
REF_700(string) (->dynargs) := REF_701(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_702(string) -> dynargs[1]
REF_703(string) -> args[1]
REF_702(string) (->dynargs) := REF_703(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1454(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1454"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1465(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1465(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_714(string) -> dynargs[0]
REF_715(string) -> args[0]
REF_714(string) (->dynargs) := REF_715(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_716(string) -> dynargs[1]
REF_717(string) -> args[1]
REF_716(string) (->dynargs) := REF_717(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_718(string) -> dynargs[2]
REF_719(string) -> args[2]
REF_718(string) (->dynargs) := REF_719(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1466(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1466"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_1469(string[])  = new string[](3)
dynargs(string[]) = ['TMP_1469(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_720(string) -> dynargs[0]
REF_721(string) -> args[0]
REF_720(string) (->dynargs) := REF_721(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_722(string) -> dynargs[1]
REF_723(string) -> args[1]
REF_722(string) (->dynargs) := REF_723(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_724(string) -> dynargs[2]
REF_725(string) -> args[2]
REF_724(string) (->dynargs) := REF_725(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1470(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1470"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1481(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1481(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_740(string) -> dynargs[0]
REF_741(string) -> args[0]
REF_740(string) (->dynargs) := REF_741(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_742(string) -> dynargs[1]
REF_743(string) -> args[1]
REF_742(string) (->dynargs) := REF_743(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_744(string) -> dynargs[2]
REF_745(string) -> args[2]
REF_744(string) (->dynargs) := REF_745(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_746(string) -> dynargs[3]
REF_747(string) -> args[3]
REF_746(string) (->dynargs) := REF_747(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1482(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1482"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_1485(string[])  = new string[](4)
dynargs(string[]) = ['TMP_1485(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_748(string) -> dynargs[0]
REF_749(string) -> args[0]
REF_748(string) (->dynargs) := REF_749(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_750(string) -> dynargs[1]
REF_751(string) -> args[1]
REF_750(string) (->dynargs) := REF_751(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_752(string) -> dynargs[2]
REF_753(string) -> args[2]
REF_752(string) (->dynargs) := REF_753(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_754(string) -> dynargs[3]
REF_755(string) -> args[3]
REF_754(string) (->dynargs) := REF_755(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1486(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1486"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1497(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1497(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_774(string) -> dynargs[0]
REF_775(string) -> args[0]
REF_774(string) (->dynargs) := REF_775(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_776(string) -> dynargs[1]
REF_777(string) -> args[1]
REF_776(string) (->dynargs) := REF_777(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_778(string) -> dynargs[2]
REF_779(string) -> args[2]
REF_778(string) (->dynargs) := REF_779(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_780(string) -> dynargs[3]
REF_781(string) -> args[3]
REF_780(string) (->dynargs) := REF_781(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_782(string) -> dynargs[4]
REF_783(string) -> args[4]
REF_782(string) (->dynargs) := REF_783(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_1498(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_1498"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_1501(string[])  = new string[](5)
dynargs(string[]) = ['TMP_1501(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_784(string) -> dynargs[0]
REF_785(string) -> args[0]
REF_784(string) (->dynargs) := REF_785(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_786(string) -> dynargs[1]
REF_787(string) -> args[1]
REF_786(string) (->dynargs) := REF_787(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_788(string) -> dynargs[2]
REF_789(string) -> args[2]
REF_788(string) (->dynargs) := REF_789(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_790(string) -> dynargs[3]
REF_791(string) -> args[3]
REF_790(string) (->dynargs) := REF_791(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_792(string) -> dynargs[4]
REF_793(string) -> args[4]
REF_792(string) (->dynargs) := REF_793(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_1502(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_1502"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_1404(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_1404(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_1405(uint256) = tx.gasprice * 200000
TMP_1406(uint256) = 1000000000000000000 + TMP_1405
TMP_1407(bool) = price > TMP_1406
CONDITION TMP_1407"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1408(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1408(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_1410(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_1410"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_1412(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_1412(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_1413(uint256) = tx.gasprice * gaslimit
TMP_1414(uint256) = 1000000000000000000 + TMP_1413
TMP_1415(bool) = price > TMP_1414
CONDITION TMP_1415"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_1416(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_1416(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_1418(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_1418"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-Slot-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_1628(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_1628"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(externalContract.external_oraclize_randomDS_proofVerify(_proof,_queryId,bytes(_result),oraclize_getNetworkName()))

IRs:
TMP_2149 = CONVERT _result to bytes
TMP_2150(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_2151(bool) = HIGH_LEVEL_CALL, dest:externalContract(LedgerProofVerifyI), function:external_oraclize_randomDS_proofVerify, arguments:['_proof', '_queryId', 'TMP_2149', 'TMP_2150']  
TMP_2152(None) = SOLIDITY_CALL assert(bool)(TMP_2151)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-Slot-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_1892(uint256) = 3 + 65
TMP_1893(uint256) = 3 + 65
TMP_1894(uint256) = TMP_1893 + 1
REF_1059(None) -> proof[TMP_1894]
TMP_1895 = CONVERT REF_1059 to uint256
TMP_1896(uint256) = TMP_1895 + 2
TMP_1897(uint256) = TMP_1892 + TMP_1896
TMP_1898(uint256) = TMP_1897 + 32
ledgerProofLength(uint256) := TMP_1898(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_1900 = new bytes(32)
keyhash(bytes) := TMP_1900(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_1901(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_1902(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_1903(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_1904(bytes32) = SOLIDITY_CALL sha3()(TMP_1903)
TMP_1905(bool) = TMP_1902 == TMP_1904
checkok(bool) := TMP_1905(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_1906(bool) = checkok == False
CONDITION TMP_1906"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_1908(uint256) = 32 + 8
TMP_1909(uint256) = TMP_1908 + 1
TMP_1910(uint256) = TMP_1909 + 32
TMP_1911(uint256) = ledgerProofLength + TMP_1910
TMP_1912(uint256) = TMP_1911 + 1
REF_1060(None) -> proof[TMP_1912]
TMP_1913 = CONVERT REF_1060 to uint256
TMP_1914(uint256) = TMP_1913 + 2
TMP_1915 = new bytes(TMP_1914)
sig1(bytes) := TMP_1915(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_1916(uint256) = 32 + 8
TMP_1917(uint256) = TMP_1916 + 1
TMP_1918(uint256) = TMP_1917 + 32
TMP_1919(uint256) = ledgerProofLength + TMP_1918
REF_1061 -> LENGTH sig1
TMP_1920(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1919,REF_1061,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_1921(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_1922(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_1921,result)
checkok(bool) := TMP_1922(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_1923(bool) = checkok == False
CONDITION TMP_1923"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_1925(uint256) = 8 + 1
TMP_1926(uint256) = TMP_1925 + 32
TMP_1927 = new bytes(TMP_1926)
commitmentSlice1(bytes) := TMP_1927(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_1928(uint256) = ledgerProofLength + 32
TMP_1929(uint256) = 8 + 1
TMP_1930(uint256) = TMP_1929 + 32
TMP_1931(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1928,TMP_1930,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_1933 = new bytes(64)
sessionPubkey(bytes) := TMP_1933(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_1934(uint256) = ledgerProofLength + 32
TMP_1935(uint256) = 8 + 1
TMP_1936(uint256) = TMP_1935 + 32
TMP_1937(uint256) = TMP_1934 + TMP_1936
REF_1062 -> LENGTH sig1
TMP_1938(uint256) = TMP_1937 + REF_1062
TMP_1939(uint256) = TMP_1938 + 65
sig2offset(uint256) := TMP_1939(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_1940(uint256) = sig2offset - 64
TMP_1941(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1940,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_1942(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_1942(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_1063(bytes32) -> oraclize_randomDS_args[queryId]
TMP_1943(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_1944(bool) = REF_1063 == TMP_1943
CONDITION TMP_1944"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_1064(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_1064 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_1946(uint256) = 32 + 8
TMP_1947(uint256) = TMP_1946 + 1
TMP_1948(uint256) = TMP_1947 + 32
TMP_1949 = new bytes(TMP_1948)
tosign1(bytes) := TMP_1949(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_1950(uint256) = 32 + 8
TMP_1951(uint256) = TMP_1950 + 1
TMP_1952(uint256) = TMP_1951 + 32
TMP_1953(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_1952,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_1954(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_1955(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1954,sig1,sessionPubkey)
checkok(bool) := TMP_1955(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_1956(bool) = checkok == False
CONDITION TMP_1956"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_1065(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1957(bool) = REF_1065 == False
CONDITION TMP_1957"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_1066(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_1958(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_1066(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_1958(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_1067(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_1067"];
}
// Function: 39147.sol-Slot-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_1855(uint256) = sig2offset + 1
REF_1050(None) -> proof[TMP_1855]
TMP_1856 = CONVERT REF_1050 to uint256
TMP_1857(uint256) = TMP_1856 + 2
TMP_1858 = new bytes(TMP_1857)
sig2(bytes) := TMP_1858(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_1051 -> LENGTH sig2
TMP_1859(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_1051,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_1861 = new bytes(64)
appkey1_pubkey(bytes) := TMP_1861(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_1862(uint256) = 3 + 1
TMP_1863(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1862,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_1865(uint256) = 1 + 65
TMP_1866(uint256) = TMP_1865 + 32
TMP_1867 = new bytes(TMP_1866)
tosign2(bytes) := TMP_1867(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_1052(uint256) -> tosign2[0]
REF_1052(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_1868(uint256) = sig2offset - 65
TMP_1869(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1868,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_1870(uint256) = 1 + 65
TMP_1871(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_1870)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_1872(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_1873(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1872,sig2,appkey1_pubkey)
sigok(bool) := TMP_1873(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_1874(bool) = sigok == False
CONDITION TMP_1874"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_1876(uint256) = 1 + 65
TMP_1877 = new bytes(TMP_1876)
tosign3(bytes) := TMP_1877(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_1053(uint256) -> tosign3[0]
REF_1053(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_1878(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_1880(uint256) = 3 + 65
TMP_1881(uint256) = TMP_1880 + 1
REF_1054(None) -> proof[TMP_1881]
TMP_1882 = CONVERT REF_1054 to uint256
TMP_1883(uint256) = TMP_1882 + 2
TMP_1884 = new bytes(TMP_1883)
sig3(bytes) := TMP_1884(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_1885(uint256) = 3 + 65
REF_1055 -> LENGTH sig3
TMP_1886(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_1885,REF_1055,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_1887(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_1888(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_1887,sig3,LEDGERKEY)
sigok(bool) := TMP_1888(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 39147.sol-Slot-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
externalContract.external_oraclize_randomDS_setCommitment(queryId,commitment)

IRs:
HIGH_LEVEL_CALL, dest:externalContract(LedgerProofVerifyI), function:external_oraclize_randomDS_setCommitment, arguments:['queryId', 'commitment']  "];
}
// Function: 39147.sol-Slot-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_1626"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_1624"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_1306(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_1307(bool) = TMP_1306 > 0
CONDITION TMP_1307"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_1308 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1308(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_1310(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_1311(bool) = TMP_1310 > 0
CONDITION TMP_1311"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_1312 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1312(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_1314(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_1315(bool) = TMP_1314 > 0
CONDITION TMP_1315"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_1316 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1316(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_1318(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_1319(bool) = TMP_1318 > 0
CONDITION TMP_1319"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_1320 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1320(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_1322(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_1323(bool) = TMP_1322 > 0
CONDITION TMP_1323"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_1324 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1324(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_1325(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_1326(bool) = TMP_1325 > 0
CONDITION TMP_1326"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_1327 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1327(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_1328(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_1329(bool) = TMP_1328 > 0
CONDITION TMP_1329"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_1330 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_1330(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 39147.sol-Slot-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 39147.sol-Slot-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_1622"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-Slot-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_1630 = CONVERT _a to bytes
tmp(bytes) := TMP_1630(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_1631(uint256) = 2 * 20
TMP_1632(uint256) = 2 + TMP_1631
TMP_1633(bool) = i < TMP_1632
CONDITION TMP_1633"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_941(None) -> tmp[i]
TMP_1634 = CONVERT REF_941 to uint160
b1(uint160) := TMP_1634(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_1635(uint256) = i + 1
REF_942(None) -> tmp[TMP_1635]
TMP_1636 = CONVERT REF_942 to uint160
b2(uint160) := TMP_1636(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_1637(bool) = b1 >= 97
TMP_1638(bool) = b1 <= 102
TMP_1639(bool) = TMP_1637 && TMP_1638
CONDITION TMP_1639"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_1640(bool) = b1 >= 65
TMP_1641(bool) = b1 <= 70
TMP_1642(bool) = TMP_1640 && TMP_1641
CONDITION TMP_1642"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_1643(bool) = b1 >= 48
TMP_1644(bool) = b1 <= 57
TMP_1645(bool) = TMP_1643 && TMP_1644
CONDITION TMP_1645"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_1646(bool) = b2 >= 97
TMP_1647(bool) = b2 <= 102
TMP_1648(bool) = TMP_1646 && TMP_1647
CONDITION TMP_1648"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_1649(bool) = b2 >= 65
TMP_1650(bool) = b2 <= 70
TMP_1651(bool) = TMP_1649 && TMP_1650
CONDITION TMP_1651"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_1652(bool) = b2 >= 48
TMP_1653(bool) = b2 <= 57
TMP_1654(bool) = TMP_1652 && TMP_1653
CONDITION TMP_1654"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_1655(uint160) = b1 * 16
TMP_1656(uint160) = TMP_1655 + b2
iaddr(uint160) = iaddr + TMP_1656"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_1657 = CONVERT iaddr to address
RETURN TMP_1657"];
}
// Function: 39147.sol-Slot-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_1726(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_1726"];
}
// Function: 39147.sol-Slot-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_1727 = CONVERT _a to bytes
bresult(bytes) := TMP_1727(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_987 -> LENGTH bresult
TMP_1728(bool) = i < REF_987
CONDITION TMP_1728"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_988(None) -> bresult[i]
TMP_1729(bool) = REF_988 >= 48
REF_989(None) -> bresult[i]
TMP_1730(bool) = REF_989 <= 57
TMP_1731(bool) = TMP_1729 && TMP_1730
CONDITION TMP_1731"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_1732(bool) = _b == 0
CONDITION TMP_1732"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_1733(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_990(None) -> bresult[i]
TMP_1734 = CONVERT REF_990 to uint256
TMP_1735(uint256) = TMP_1734 - 48
mint(uint256) = mint + TMP_1735"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_991(None) -> bresult[i]
TMP_1736(bool) = REF_991 == 46
CONDITION TMP_1736"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_1737(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_1738(bool) = _b > 0
CONDITION TMP_1738"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_1739(uint256) = 10 ** _b
mint(uint256) = mint * TMP_1739"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 39147.sol-Slot-profitDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->19;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_1223(bool) = i <= numInvestors
CONDITION TMP_1223"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
currentInvestor = investors[i].investorAddress

IRs:
REF_605(usingInvestorsModule.Investor) -> investors[i]
REF_606(address) -> REF_605.investorAddress
currentInvestor(address) := REF_606(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
profitOfInvestor = getProfitShare(currentInvestor)

IRs:
TMP_1224(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profitOfInvestor(uint256) := TMP_1224(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lossesOfInvestor = getLossesShare(currentInvestor)

IRs:
TMP_1225(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
lossesOfInvestor(uint256) := TMP_1225(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested) && (investors[i].amountInvested + profitOfInvestor >= lossesOfInvestor)

IRs:
REF_607(usingInvestorsModule.Investor) -> investors[i]
REF_608(uint256) -> REF_607.amountInvested
TMP_1226(uint256) = REF_608 + profitOfInvestor
REF_609(usingInvestorsModule.Investor) -> investors[i]
REF_610(uint256) -> REF_609.amountInvested
TMP_1227(bool) = TMP_1226 >= REF_610
REF_611(usingInvestorsModule.Investor) -> investors[i]
REF_612(uint256) -> REF_611.amountInvested
TMP_1228(uint256) = REF_612 + profitOfInvestor
TMP_1229(bool) = TMP_1228 >= lossesOfInvestor
TMP_1230(bool) = TMP_1227 && TMP_1229
CONDITION TMP_1230"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
investors[i].amountInvested += profitOfInvestor - lossesOfInvestor

IRs:
REF_613(usingInvestorsModule.Investor) -> investors[i]
REF_614(uint256) -> REF_613.amountInvested
TMP_1231(uint256) = profitOfInvestor - lossesOfInvestor
REF_614(-> investors) = REF_614 + TMP_1231"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOG_InvestorCapitalUpdate(currentInvestor,int256(profitOfInvestor - lossesOfInvestor))

IRs:
TMP_1232(uint256) = profitOfInvestor - lossesOfInvestor
TMP_1233 = CONVERT TMP_1232 to int256
Emit LOG_InvestorCapitalUpdate(currentInvestor,TMP_1233)"];
11->14;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
copyInvested + investors[i].amountInvested >= copyInvested

IRs:
REF_615(usingInvestorsModule.Investor) -> investors[i]
REF_616(uint256) -> REF_615.amountInvested
TMP_1236(uint256) = copyInvested + REF_616
TMP_1237(bool) = TMP_1236 >= copyInvested
CONDITION TMP_1237"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyInvested += investors[i].amountInvested

IRs:
REF_617(usingInvestorsModule.Investor) -> investors[i]
REF_618(uint256) -> REF_617.amountInvested
copyInvested(uint256) = copyInvested + REF_618"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_1238(uint256) := i(uint256)
i(uint256) = i + 1"];
18->5;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete investorsProfit

IRs:
investorsProfit = delete investorsProfit "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
delete investorsLosses

IRs:
investorsLosses = delete investorsLosses "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
invested = copyInvested

IRs:
invested(uint256) := copyInvested(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
profitDistributed = true

IRs:
profitDistributed(bool) := True(bool)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyIfProfitNotDistributed()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyIfProfitNotDistributed()()"];
23->1;
}
// Function: 39147.sol-Slot-proposeEmergencyWithdrawal(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
2->7;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i <= numInvestors

IRs:
TMP_1164(bool) = i <= numInvestors
CONDITION TMP_1164"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete investors[i].votedForEmergencyWithdrawal

IRs:
REF_574(usingInvestorsModule.Investor) -> investors[i]
REF_575(bool) -> REF_574.votedForEmergencyWithdrawal
REF_574 = delete REF_575 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_1165(uint256) := i(uint256)
i(uint256) = i + 1"];
6->4;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
proposedWithdrawal = WithdrawalProposal(withdrawalAddress,now)

IRs:
TMP_1166(EmergencyWithdrawalModule.WithdrawalProposal) = new WithdrawalProposal(withdrawalAddress,now)
proposedWithdrawal(EmergencyWithdrawalModule.WithdrawalProposal) := TMP_1166(EmergencyWithdrawalModule.WithdrawalProposal)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOG_EmergencyWithdrawalProposed()

IRs:
Emit LOG_EmergencyWithdrawalProposed()"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
10->3;
}
// Function: 39147.sol-Slot-radd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_1134(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_1134"];
}
// Function: 39147.sol-Slot-rdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * RAY + y / 2) / y)

IRs:
TMP_1142 = CONVERT x to uint256
TMP_1143(uint256) = TMP_1142 * RAY
TMP_1144(uint128) = y / 2
TMP_1145(uint256) = TMP_1143 + TMP_1144
TMP_1146(uint256) = TMP_1145 / y
TMP_1147(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_1146)
z(uint128) := TMP_1147(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-rmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_1156(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_1156"];
}
// Function: 39147.sol-Slot-rmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_1155(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_1155"];
}
// Function: 39147.sol-Slot-rmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + RAY / 2) / RAY)

IRs:
TMP_1136 = CONVERT x to uint256
TMP_1137(uint256) = TMP_1136 * y
TMP_1138(uint128) = RAY / 2
TMP_1139(uint256) = TMP_1137 + TMP_1138
TMP_1140(uint256) = TMP_1139 / RAY
TMP_1141(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_1140)
z(uint128) := TMP_1141(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-rpow(uint128,uint64)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->15;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
n != 0

IRs:
TMP_1148(bool) = n != 0
CONDITION TMP_1148"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
x = rmul(x,x)

IRs:
TMP_1149(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(x,x)
x(uint128) := TMP_1149(uint128)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
n % 2 != 0

IRs:
TMP_1150(uint64) = n % 2
TMP_1151(bool) = TMP_1150 != 0
CONDITION TMP_1151"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
z = rmul(z,x)

IRs:
TMP_1152(uint128) = INTERNAL_CALL, DSMath.rmul(uint128,uint128)(z,x)
z(uint128) := TMP_1152(uint128)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
n /= 2

IRs:
n(uint64) = n / 2"];
10->5;
11[label="Node Type: IF 11

EXPRESSION:
n % 2 != 0

IRs:
TMP_1153(uint64) = n % 2
TMP_1154(bool) = TMP_1153 != 0
CONDITION TMP_1154"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
z = x

IRs:
z(uint128) := x(uint128)"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
z = RAY

IRs:
z(uint128) := RAY(uint128)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->4;
15[label="Node Type: RETURN 15

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-rsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_1135(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_1135"];
}
// Function: 39147.sol-Slot-safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_1273(bool) = value == 0
CONDITION TMP_1273"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ZeroSend()

IRs:
Emit LOG_ZeroSend()"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
this.balance < value

IRs:
REF_638(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_1275(bool) = REF_638 < value
CONDITION TMP_1275"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_ValueIsTooBig()

IRs:
Emit LOG_ValueIsTooBig()"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_1279(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_1280 = UnaryType.BANG TMP_1279 
CONDITION TMP_1280"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOG_FailedSend(addr,value)

IRs:
Emit LOG_FailedSend(addr,value)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
addr != houseAddress

IRs:
TMP_1282(bool) = addr != houseAddress
CONDITION TMP_1282"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
! (houseAddress.call.gas(safeGas).value(value)())

IRs:
TMP_1285(bool) = LOW_LEVEL_CALL, dest:houseAddress, function:call, arguments:[] value:value gas:safeGas
TMP_1286 = UnaryType.BANG TMP_1285 
CONDITION TMP_1286"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_FailedSend(houseAddress,value)

IRs:
Emit LOG_FailedSend(houseAddress,value)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
LOG_SuccessfulSend(addr,value)

IRs:
Emit LOG_SuccessfulSend(addr,value)"];
}
// Function: 39147.sol-Slot-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 39147.sol-Slot-searchSmallestInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
investorID = 1

IRs:
investorID(uint256) := 1(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_1217(bool) = i <= numInvestors
CONDITION TMP_1217"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)

IRs:
REF_596(usingInvestorsModule.Investor) -> investors[i]
REF_597(address) -> REF_596.investorAddress
TMP_1218(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_597)
REF_598(usingInvestorsModule.Investor) -> investors[investorID]
REF_599(address) -> REF_598.investorAddress
TMP_1219(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_599)
TMP_1220(bool) = TMP_1218 < TMP_1219
CONDITION TMP_1220"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
investorID = i

IRs:
investorID(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_1221(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
investorID

IRs:
RETURN investorID"];
}
// Function: 39147.sol-Slot-sendPayout(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
payout >= spins[myid].amountWagered

IRs:
REF_1088(Slot.SpinsContainer) -> spins[myid]
REF_1089(uint256) -> REF_1088.amountWagered
TMP_2029(bool) = payout >= REF_1089
CONDITION TMP_2029"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investorsLosses += sub(payout,spins[myid].amountWagered)

IRs:
REF_1090(Slot.SpinsContainer) -> spins[myid]
REF_1091(uint256) -> REF_1090.amountWagered
TMP_2030(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(payout,REF_1091)
investorsLosses(uint256) = investorsLosses + TMP_2030"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
payout = (payout * (10000 - INVESTORS_EDGE)) / 10000

IRs:
TMP_2031(uint256) = 10000 - INVESTORS_EDGE
TMP_2032(uint256) = payout * TMP_2031
TMP_2033(uint256) = TMP_2032 / 10000
payout(uint256) := TMP_2033(uint256)"];
3->7;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
tempProfit = add(investorsProfit,sub(spins[myid].amountWagered,payout))

IRs:
REF_1092(Slot.SpinsContainer) -> spins[myid]
REF_1093(uint256) -> REF_1092.amountWagered
TMP_2034(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_1093,payout)
TMP_2035(uint256) = INTERNAL_CALL, DSMath.add(uint256,uint256)(investorsProfit,TMP_2034)
tempProfit(uint256) := TMP_2035(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
investorsProfit += (sub(spins[myid].amountWagered,payout) * (10000 - HOUSE_EDGE)) / 10000

IRs:
REF_1094(Slot.SpinsContainer) -> spins[myid]
REF_1095(uint256) -> REF_1094.amountWagered
TMP_2036(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(REF_1095,payout)
TMP_2037(uint256) = 10000 - HOUSE_EDGE
TMP_2038(uint256) = TMP_2036 * TMP_2037
TMP_2039(uint256) = TMP_2038 / 10000
investorsProfit(uint256) = investorsProfit + TMP_2039"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
safeSend(houseAddress,sub(tempProfit,investorsProfit))

IRs:
TMP_2040(uint256) = INTERNAL_CALL, DSMath.sub(uint256,uint256)(tempProfit,investorsProfit)
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(houseAddress,TMP_2040)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LOG_SpinsContainerInfo(myid,spins[myid].playerAddress,payout)

IRs:
REF_1096(Slot.SpinsContainer) -> spins[myid]
REF_1097(address) -> REF_1096.playerAddress
Emit LOG_SpinsContainerInfo(myid,REF_1097,payout)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
safeSend(spins[myid].playerAddress,payout)

IRs:
REF_1098(Slot.SpinsContainer) -> spins[myid]
REF_1099(address) -> REF_1098.playerAddress
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(REF_1099,payout)"];
}
// Function: 39147.sol-Slot-setConfiguration(uint256[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->26;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_setProof(proofType_Ledger)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setProof(bytes1)(proofType_Ledger)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
delete probabilities

IRs:
probabilities = delete probabilities "];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
delete multipliers

IRs:
multipliers = delete multipliers "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
lastProbability = 0

IRs:
lastProbability(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
lastMultiplier = 2 ** 256 - 1

IRs:
TMP_2052(uint256) = 2 ** 256
TMP_2053(uint256) = TMP_2052 - 1
lastMultiplier(uint256) := TMP_2053(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->18;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < _probabilities.length

IRs:
REF_1101 -> LENGTH _probabilities
TMP_2054(bool) = i < REF_1101
CONDITION TMP_2054"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
probabilities.push(_probabilities[i])

IRs:
REF_1103(uint256) -> _probabilities[i]
REF_1104 -> LENGTH probabilities
TMP_2056(uint256) := REF_1104(uint256)
TMP_2057(uint256) = TMP_2056 + 1
REF_1104(uint256) (->probabilities) := TMP_2057(uint256)
REF_1105(uint256) -> probabilities[TMP_2056]
REF_1105(uint256) (->probabilities) := REF_1103(uint256)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
lastProbability >= _probabilities[i]

IRs:
REF_1106(uint256) -> _probabilities[i]
TMP_2058(bool) = lastProbability >= REF_1106
CONDITION TMP_2058"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
revert()()

IRs:
TMP_2059(None) = SOLIDITY_CALL revert()()"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
lastProbability = _probabilities[i]

IRs:
REF_1107(uint256) -> _probabilities[i]
lastProbability(uint256) := REF_1107(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
i ++

IRs:
TMP_2060(uint256) := i(uint256)
i(uint256) = i + 1"];
15->9;
16[label="Node Type: BEGIN_LOOP 16
"];
16->19;
17[label="Node Type: END_LOOP 17
"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
18->16;
19[label="Node Type: IF_LOOP 19

EXPRESSION:
i < _multipliers.length

IRs:
REF_1108 -> LENGTH _multipliers
TMP_2061(bool) = i < REF_1108
CONDITION TMP_2061"];
19->20[label="True"];
19->17[label="False"];
20[label="Node Type: EXPRESSION 20

EXPRESSION:
multipliers.push(_multipliers[i])

IRs:
REF_1110(uint256) -> _multipliers[i]
REF_1111 -> LENGTH multipliers
TMP_2063(uint256) := REF_1111(uint256)
TMP_2064(uint256) = TMP_2063 + 1
REF_1111(uint256) (->multipliers) := TMP_2064(uint256)
REF_1112(uint256) -> multipliers[TMP_2063]
REF_1112(uint256) (->multipliers) := REF_1110(uint256)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
lastMultiplier <= _multipliers[i]

IRs:
REF_1113(uint256) -> _multipliers[i]
TMP_2065(bool) = lastMultiplier <= REF_1113
CONDITION TMP_2065"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
revert()()

IRs:
TMP_2066(None) = SOLIDITY_CALL revert()()"];
22->23;
23[label="Node Type: END_IF 23
"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
lastMultiplier = _multipliers[i]

IRs:
REF_1114(uint256) -> _multipliers[i]
lastMultiplier(uint256) := REF_1114(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
i ++

IRs:
TMP_2067(uint256) := i(uint256)
i(uint256) = i + 1"];
25->19;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
onlyIfFair(_probabilities,_multipliers)

IRs:
MODIFIER_CALL, Slot.onlyIfFair(uint256[],uint256[])(_probabilities,_multipliers)"];
27->1;
}
// Function: 39147.sol-Slot-setMinBet(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
minBet = _minBet

IRs:
minBet(uint256) := _minBet(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39147.sol-Slot-setSafeGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(ORACLIZE_BASE_GAS_LIMIT + safeGas >= ORACLIZE_BASE_GAS_LIMIT)

IRs:
TMP_1289(uint256) = ORACLIZE_BASE_GAS_LIMIT + safeGas
TMP_1290(bool) = TMP_1289 >= ORACLIZE_BASE_GAS_LIMIT
TMP_1291(None) = SOLIDITY_CALL assert(bool)(TMP_1290)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(safeGas <= 25000)

IRs:
TMP_1292(bool) = safeGas <= 25000
TMP_1293(None) = SOLIDITY_CALL assert(bool)(TMP_1292)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
safeGas = _gas

IRs:
safeGas(uint256) := _gas(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newGasLimit(_gas)

IRs:
Emit newGasLimit(_gas)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 39147.sol-Slot-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_2096(uint256) = 60 * 60
TMP_2097(uint256) = TMP_2096 * 24
day(uint256) := TMP_2097(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_2098(uint256) = 60 * 60
TMP_2099(uint256) = TMP_2098 * 24
TMP_2100(uint256) = TMP_2099 * 7
week(uint256) := TMP_2100(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_2101(uint256) = 60 * 60
TMP_2102(uint256) = TMP_2101 * 24
TMP_2103(uint256) = TMP_2102 * 30
month(uint256) := TMP_2103(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
13->14;
14[label="Node Type: OTHER_ENTRYPOINT 14

EXPRESSION:
ORACLIZE_PER_SPIN_GAS_LIMIT = 6100

IRs:
ORACLIZE_PER_SPIN_GAS_LIMIT(uint256) := 6100(uint256)"];
14->15;
15[label="Node Type: OTHER_ENTRYPOINT 15

EXPRESSION:
ORACLIZE_BASE_GAS_LIMIT = 200000

IRs:
ORACLIZE_BASE_GAS_LIMIT(uint256) := 200000(uint256)"];
15->16;
16[label="Node Type: OTHER_ENTRYPOINT 16

EXPRESSION:
MAX_INVESTORS = 5

IRs:
MAX_INVESTORS(uint256) := 5(uint256)"];
16->17;
17[label="Node Type: OTHER_ENTRYPOINT 17

EXPRESSION:
divestFee = 50

IRs:
divestFee(uint256) := 50(uint256)"];
17->18;
18[label="Node Type: OTHER_ENTRYPOINT 18

EXPRESSION:
EMERGENCY_WITHDRAWAL_RATIO = 80

IRs:
EMERGENCY_WITHDRAWAL_RATIO(uint256) := 80(uint256)"];
18->19;
19[label="Node Type: OTHER_ENTRYPOINT 19

EXPRESSION:
EMERGENCY_TIMEOUT = 259200

IRs:
EMERGENCY_TIMEOUT(uint256) := 259200(uint256)"];
19->20;
20[label="Node Type: OTHER_ENTRYPOINT 20

EXPRESSION:
WAD = 10 ** 18

IRs:
TMP_2104(uint256) = 10 ** 18
WAD(uint128) := TMP_2104(uint256)"];
20->21;
21[label="Node Type: OTHER_ENTRYPOINT 21

EXPRESSION:
RAY = 10 ** 27

IRs:
TMP_2105(uint256) = 10 ** 27
RAY(uint128) := TMP_2105(uint256)"];
21->22;
22[label="Node Type: OTHER_ENTRYPOINT 22

EXPRESSION:
INVESTORS_EDGE = 200

IRs:
INVESTORS_EDGE(uint256) := 200(uint256)"];
22->23;
23[label="Node Type: OTHER_ENTRYPOINT 23

EXPRESSION:
HOUSE_EDGE = 50

IRs:
HOUSE_EDGE(uint256) := 50(uint256)"];
23->24;
24[label="Node Type: OTHER_ENTRYPOINT 24

EXPRESSION:
CAPITAL_RISK = 250

IRs:
CAPITAL_RISK(uint256) := 250(uint256)"];
24->25;
25[label="Node Type: OTHER_ENTRYPOINT 25

EXPRESSION:
MAX_SPINS = 16

IRs:
MAX_SPINS(uint256) := 16(uint256)"];
}
// Function: 39147.sol-Slot-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
safeGas = 9000

IRs:
safeGas(uint256) := 9000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
numInvestors = 0

IRs:
numInvestors(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
invested = 0

IRs:
invested(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
investorsProfit = 0

IRs:
investorsProfit(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
investorsLosses = 0

IRs:
investorsLosses(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
minBet = 1

IRs:
minBet(uint256) := 1(uint256)"];
}
// Function: 39147.sol-Slot-stop_or_resume_Contract(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = _isStopped

IRs:
isStopped(bool) := _isStopped(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39147.sol-Slot-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_1658 = CONVERT _a to bytes
a(bytes) := TMP_1658(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_1659 = CONVERT _b to bytes
b(bytes) := TMP_1659(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_943 -> LENGTH a
minLength(uint256) := REF_943(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_944 -> LENGTH b
TMP_1660(bool) = REF_944 < minLength
CONDITION TMP_1660"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_945 -> LENGTH b
minLength(uint256) := REF_945(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_1661(bool) = i < minLength
CONDITION TMP_1661"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_946(None) -> a[i]
REF_947(None) -> b[i]
TMP_1662(bool) = REF_946 < REF_947
CONDITION TMP_1662"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_1663(uint256) = 0 - 1
RETURN TMP_1663"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_948(None) -> a[i]
REF_949(None) -> b[i]
TMP_1664(bool) = REF_948 > REF_949
CONDITION TMP_1664"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_1665(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_950 -> LENGTH a
REF_951 -> LENGTH b
TMP_1666(bool) = REF_950 < REF_951
CONDITION TMP_1666"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_1667(uint256) = 0 - 1
RETURN TMP_1667"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_952 -> LENGTH a
REF_953 -> LENGTH b
TMP_1668(bool) = REF_952 > REF_953
CONDITION TMP_1668"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39147.sol-Slot-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_1725(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_1725"];
}
// Function: 39147.sol-Slot-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_1724(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_1724"];
}
// Function: 39147.sol-Slot-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_1723(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_1723"];
}
// Function: 39147.sol-Slot-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_1695 = CONVERT _a to bytes
_ba(bytes) := TMP_1695(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_1696 = CONVERT _b to bytes
_bb(bytes) := TMP_1696(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_1697 = CONVERT _c to bytes
_bc(bytes) := TMP_1697(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_1698 = CONVERT _d to bytes
_bd(bytes) := TMP_1698(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_1699 = CONVERT _e to bytes
_be(bytes) := TMP_1699(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_967 -> LENGTH _ba
REF_968 -> LENGTH _bb
TMP_1701(uint256) = REF_967 + REF_968
REF_969 -> LENGTH _bc
TMP_1702(uint256) = TMP_1701 + REF_969
REF_970 -> LENGTH _bd
TMP_1703(uint256) = TMP_1702 + REF_970
REF_971 -> LENGTH _be
TMP_1704(uint256) = TMP_1703 + REF_971
TMP_1705 = new string(TMP_1704)
abcde(string) := TMP_1705(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_1706 = CONVERT abcde to bytes
babcde(bytes) := TMP_1706(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_972 -> LENGTH _ba
TMP_1707(bool) = i < REF_972
CONDITION TMP_1707"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_1708(uint256) := k(uint256)
k(uint256) = k + 1
REF_973(None) -> babcde[TMP_1708]
REF_974(None) -> _ba[i]
REF_973(None) (->babcde) := REF_974(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_1709(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_975 -> LENGTH _bb
TMP_1710(bool) = i < REF_975
CONDITION TMP_1710"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_1711(uint256) := k(uint256)
k(uint256) = k + 1
REF_976(None) -> babcde[TMP_1711]
REF_977(None) -> _bb[i]
REF_976(None) (->babcde) := REF_977(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_1712(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_978 -> LENGTH _bc
TMP_1713(bool) = i < REF_978
CONDITION TMP_1713"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_1714(uint256) := k(uint256)
k(uint256) = k + 1
REF_979(None) -> babcde[TMP_1714]
REF_980(None) -> _bc[i]
REF_979(None) (->babcde) := REF_980(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_1715(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_981 -> LENGTH _bd
TMP_1716(bool) = i < REF_981
CONDITION TMP_1716"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_1717(uint256) := k(uint256)
k(uint256) = k + 1
REF_982(None) -> babcde[TMP_1717]
REF_983(None) -> _bd[i]
REF_982(None) (->babcde) := REF_983(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_1718(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_984 -> LENGTH _be
TMP_1719(bool) = i < REF_984
CONDITION TMP_1719"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_1720(uint256) := k(uint256)
k(uint256) = k + 1
REF_985(None) -> babcde[TMP_1720]
REF_986(None) -> _be[i]
REF_985(None) (->babcde) := REF_986(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_1721(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_1722 = CONVERT babcde to string
RETURN TMP_1722"];
}
// Function: 39147.sol-Slot-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_993 -> LENGTH arr
arrlen(uint256) := REF_993(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_1753(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_1753(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_1754(bool) = i < arrlen
CONDITION TMP_1754"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_994(bytes) -> elemArray[i]
REF_995(string) -> arr[i]
TMP_1755 = CONVERT REF_995 to bytes
REF_994(bytes) (->elemArray) := TMP_1755(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_996(bytes) -> elemArray[i]
REF_997 -> LENGTH REF_996
REF_998(bytes) -> elemArray[i]
REF_999 -> LENGTH REF_998
TMP_1756(uint256) = REF_999 - 1
TMP_1757(uint256) = TMP_1756 / 23
TMP_1758(uint256) = REF_997 + TMP_1757
TMP_1759(uint256) = TMP_1758 + 3
outputlen(uint256) = outputlen + TMP_1759"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_1760(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_1761(uint256) = arrlen + 128
cborlen(uint256) := TMP_1761(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_1762 = CONVERT cborlen to bytes1
REF_1000 -> LENGTH TMP_1762
outputlen(uint256) = outputlen + REF_1000"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_1764 = new bytes(outputlen)
res(bytes) := TMP_1764(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_1765 = CONVERT cborlen to bytes1
REF_1001 -> LENGTH TMP_1765
TMP_1766(bool) = REF_1001 > ctr
CONDITION TMP_1766"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_1002(None) -> res[ctr]
TMP_1767 = CONVERT cborlen to bytes1
REF_1003(None) -> TMP_1767[ctr]
REF_1002(None) (->res) := REF_1003(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_1768(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_1769(bool) = i < arrlen
CONDITION TMP_1769"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_1004(uint256) -> res[ctr]
REF_1004(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_1770(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_1005(bytes) -> elemArray[i]
REF_1006 -> LENGTH REF_1005
TMP_1771(bool) = x < REF_1006
CONDITION TMP_1771"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_1772(uint256) = x % 23
TMP_1773(bool) = TMP_1772 == 0
CONDITION TMP_1773"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_1774 = CONVERT elemcborlen to bytes1
REF_1007 -> LENGTH TMP_1774
TMP_1775(uint256) = ctr - lctr
TMP_1776(bool) = REF_1007 > TMP_1775
CONDITION TMP_1776"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_1008(None) -> res[ctr]
TMP_1777 = CONVERT elemcborlen to bytes1
TMP_1778(uint256) = ctr - lctr
REF_1009(None) -> TMP_1777[TMP_1778]
REF_1008(None) (->res) := REF_1009(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_1779(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_1010(None) -> res[ctr]
REF_1011(bytes) -> elemArray[i]
REF_1012(None) -> REF_1011[x]
REF_1010(None) (->res) := REF_1012(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_1780(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_1781(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_1013(uint256) -> res[ctr]
REF_1013(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_1782(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_1783(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_1014(bytes) -> elemArray[i]
REF_1015 -> LENGTH REF_1014
TMP_1784(uint256) = REF_1015 - x
TMP_1785(bool) = TMP_1784 >= 24
CONDITION TMP_1785"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_1016(bytes) -> elemArray[i]
REF_1017 -> LENGTH REF_1016
TMP_1786(uint256) = REF_1017 - x
elemcborlen(uint256) := TMP_1786(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39147.sol-Slot-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)((z = x - y) <= x)

IRs:
TMP_1095(uint256) = x - y
z(uint256) := TMP_1095(uint256)
TMP_1096(bool) = z <= x
TMP_1097(None) = SOLIDITY_CALL assert(bool)(TMP_1096)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_1740(bool) = i == 0
CONDITION TMP_1740"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_1741(bool) = j != 0
CONDITION TMP_1741"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_1742(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_1744 = new bytes(len)
bstr(bytes) := TMP_1744(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_1745(uint256) = len - 1
k(uint256) := TMP_1745(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_1746(bool) = i != 0
CONDITION TMP_1746"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_1747(uint256) := k(uint256)
k(uint256) = k - 1
REF_992(bytes1) -> bstr[TMP_1747]
TMP_1748(uint256) = i % 10
TMP_1749(uint256) = 48 + TMP_1748
TMP_1750 = CONVERT TMP_1749 to bytes1
REF_992(bytes1) (->bstr) := TMP_1750(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_1751 = CONVERT bstr to string
RETURN TMP_1751"];
}
// Function: 39147.sol-Slot-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_1835 = new bytes(32)
sigr_(bytes) := TMP_1835(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_1048(None) -> dersig[3]
TMP_1836 = CONVERT REF_1048 to uint256
TMP_1837(uint256) = TMP_1836 - 32
TMP_1838(uint256) = 4 + TMP_1837
offset(uint256) := TMP_1838(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_1839(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_1839(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_1841 = new bytes(32)
sigs_(bytes) := TMP_1841(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_1842(uint256) = 32 + 2
offset(uint256) = offset + TMP_1842"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_1843(uint256) = offset - 1
REF_1049(None) -> dersig[TMP_1843]
TMP_1844 = CONVERT REF_1049 to uint256
TMP_1845(uint256) = TMP_1844 - 32
TMP_1846(uint256) = offset + TMP_1845
TMP_1847(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_1846,32,sigs_,0)
sigs_(bytes) := TMP_1847(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_3(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_3 index: 0 
signer(address)= UNPACK TUPLE_3 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_1848(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1849 = CONVERT TMP_1848 to address
TMP_1850(bool) = TMP_1849 == signer
CONDITION TMP_1850"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_4(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_4 index: 0 
signer(address)= UNPACK TUPLE_4 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_1851(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_1852 = CONVERT TMP_1851 to address
TMP_1853(bool) = TMP_1852 == signer
RETURN TMP_1853"];
}
// Function: 39147.sol-Slot-voteEmergencyWithdrawal(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investors[investorIDs[msg.sender]].votedForEmergencyWithdrawal = vote

IRs:
REF_571(uint256) -> investorIDs[msg.sender]
REF_572(usingInvestorsModule.Investor) -> investors[REF_571]
REF_573(bool) -> REF_572.votedForEmergencyWithdrawal
REF_573(bool) (->investors) := vote(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_EmergencyWithdrawalVote(msg.sender,vote)

IRs:
Emit LOG_EmergencyWithdrawalVote(msg.sender,vote)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyAfterProposed()

IRs:
MODIFIER_CALL, EmergencyWithdrawalModule.onlyAfterProposed()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyIfStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfStopped()()"];
5->1;
}
// Function: 39147.sol-Slot-wadd(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hadd(x,y)

IRs:
TMP_1118(uint128) = INTERNAL_CALL, DSMath.hadd(uint128,uint128)(x,y)
RETURN TMP_1118"];
}
// Function: 39147.sol-Slot-wdiv(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * WAD + y / 2) / y)

IRs:
TMP_1126 = CONVERT x to uint256
TMP_1127(uint256) = TMP_1126 * WAD
TMP_1128(uint128) = y / 2
TMP_1129(uint256) = TMP_1127 + TMP_1128
TMP_1130(uint256) = TMP_1129 / y
TMP_1131(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_1130)
z(uint128) := TMP_1131(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-wmax(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmax(x,y)

IRs:
TMP_1133(uint128) = INTERNAL_CALL, DSMath.hmax(uint128,uint128)(x,y)
RETURN TMP_1133"];
}
// Function: 39147.sol-Slot-wmin(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hmin(x,y)

IRs:
TMP_1132(uint128) = INTERNAL_CALL, DSMath.hmin(uint128,uint128)(x,y)
RETURN TMP_1132"];
}
// Function: 39147.sol-Slot-wmul(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
z = cast((uint256(x) * y + WAD / 2) / WAD)

IRs:
TMP_1120 = CONVERT x to uint256
TMP_1121(uint256) = TMP_1120 * y
TMP_1122(uint128) = WAD / 2
TMP_1123(uint256) = TMP_1121 + TMP_1122
TMP_1124(uint256) = TMP_1123 / WAD
TMP_1125(uint128) = INTERNAL_CALL, DSMath.cast(uint256)(TMP_1124)
z(uint128) := TMP_1125(uint128)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
z

IRs:
RETURN z"];
}
// Function: 39147.sol-Slot-wsub(uint128,uint128)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
hsub(x,y)

IRs:
TMP_1119(uint128) = INTERNAL_CALL, DSMath.hsub(uint128,uint128)(x,y)
RETURN TMP_1119"];
}
// Function: 39147.sol-oraclizeSettings-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-oraclizeSettings-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_773(bool) = msg.sender == owner
TMP_774(None) = SOLIDITY_CALL assert(bool)(TMP_773)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-oraclizeSettings-setSafeGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(ORACLIZE_BASE_GAS_LIMIT + safeGas >= ORACLIZE_BASE_GAS_LIMIT)

IRs:
TMP_766(uint256) = ORACLIZE_BASE_GAS_LIMIT + safeGas
TMP_767(bool) = TMP_766 >= ORACLIZE_BASE_GAS_LIMIT
TMP_768(None) = SOLIDITY_CALL assert(bool)(TMP_767)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(safeGas <= 25000)

IRs:
TMP_769(bool) = safeGas <= 25000
TMP_770(None) = SOLIDITY_CALL assert(bool)(TMP_769)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
safeGas = _gas

IRs:
safeGas(uint256) := _gas(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newGasLimit(_gas)

IRs:
Emit newGasLimit(_gas)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 39147.sol-oraclizeSettings-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ORACLIZE_PER_SPIN_GAS_LIMIT = 6100

IRs:
ORACLIZE_PER_SPIN_GAS_LIMIT(uint256) := 6100(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ORACLIZE_BASE_GAS_LIMIT = 200000

IRs:
ORACLIZE_BASE_GAS_LIMIT(uint256) := 200000(uint256)"];
}
// Function: 39147.sol-oraclizeSettings-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
safeGas = 9000

IRs:
safeGas(uint256) := 9000(uint256)"];
}
// Function: 39147.sol-usingInvestorsModule-HouseManaged()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
houseAddress = msg.sender

IRs:
houseAddress(address) := msg.sender(address)"];
}
// Function: 39147.sol-usingInvestorsModule-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 39147.sol-usingInvestorsModule-addInvestorAtID(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
investorIDs[msg.sender] = id

IRs:
REF_446(uint256) -> investorIDs[msg.sender]
REF_446(uint256) (->investorIDs) := id(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[id].investorAddress = msg.sender

IRs:
REF_447(usingInvestorsModule.Investor) -> investors[id]
REF_448(address) -> REF_447.investorAddress
REF_448(address) (->investors) := msg.sender(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
investors[id].amountInvested = msg.value

IRs:
REF_449(usingInvestorsModule.Investor) -> investors[id]
REF_450(uint256) -> REF_449.amountInvested
REF_450(uint256) (->investors) := msg.value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
LOG_InvestorEntrance(msg.sender,msg.value)

IRs:
Emit LOG_InvestorEntrance(msg.sender,msg.value)"];
}
// Function: 39147.sol-usingInvestorsModule-changeHouse_and_Owner_Addresses(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(newHouse != address(0x0))

IRs:
TMP_798 = CONVERT 0 to address
TMP_799(bool) = newHouse != TMP_798
TMP_800(None) = SOLIDITY_CALL assert(bool)(TMP_799)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(newOwner != address(0x0))

IRs:
TMP_801 = CONVERT 0 to address
TMP_802(bool) = newOwner != TMP_801
TMP_803(None) = SOLIDITY_CALL assert(bool)(TMP_802)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
LOG_OwnerAddressChanged(owner,newOwner)

IRs:
Emit LOG_OwnerAddressChanged(owner,newOwner)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
houseAddress = newHouse

IRs:
houseAddress(address) := newHouse(address)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_HouseAddressChanged(houseAddress,newHouse)

IRs:
Emit LOG_HouseAddressChanged(houseAddress,newHouse)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
7->1;
}
// Function: 39147.sol-usingInvestorsModule-divest()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
divest(msg.sender)

IRs:
INTERNAL_CALL, usingInvestorsModule.divest(address)(msg.sender)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
2->1;
}
// Function: 39147.sol-usingInvestorsModule-divest(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
currentID = investorIDs[currentInvestor]

IRs:
REF_470(uint256) -> investorIDs[currentInvestor]
currentID(uint256) := REF_470(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amountToReturn = getBalance(currentInvestor)

IRs:
TMP_876(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(currentInvestor)
amountToReturn(uint256) := TMP_876(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested >= investors[currentID].amountInvested)

IRs:
REF_471(usingInvestorsModule.Investor) -> investors[currentID]
REF_472(uint256) -> REF_471.amountInvested
TMP_877(bool) = invested >= REF_472
CONDITION TMP_877"];
4->5[label="True"];
4->20[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
invested -= investors[currentID].amountInvested

IRs:
REF_473(usingInvestorsModule.Investor) -> investors[currentID]
REF_474(uint256) -> REF_473.amountInvested
invested(uint256) = invested - REF_474"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
divestFeeAmount = (amountToReturn * divestFee) / 10000

IRs:
TMP_878(uint256) = amountToReturn * divestFee
TMP_879(uint256) = TMP_878 / 10000
divestFeeAmount(uint256) := TMP_879(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
amountToReturn -= divestFeeAmount

IRs:
amountToReturn(uint256) = amountToReturn - divestFeeAmount"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
delete investors[currentID]

IRs:
REF_475(usingInvestorsModule.Investor) -> investors[currentID]
investors = delete REF_475 "];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
delete investorIDs[currentInvestor]

IRs:
REF_476(uint256) -> investorIDs[currentInvestor]
investorIDs = delete REF_476 "];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
currentID != numInvestors

IRs:
TMP_880(bool) = currentID != numInvestors
CONDITION TMP_880"];
10->11[label="True"];
10->15[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
lastInvestor = investors[numInvestors]

IRs:
REF_477(usingInvestorsModule.Investor) -> investors[numInvestors]
lastInvestor(usingInvestorsModule.Investor) := REF_477(usingInvestorsModule.Investor)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorIDs[lastInvestor.investorAddress] = currentID

IRs:
REF_478(address) -> lastInvestor.investorAddress
REF_479(uint256) -> investorIDs[REF_478]
REF_479(uint256) (->investorIDs) := currentID(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
investors[currentID] = lastInvestor

IRs:
REF_480(usingInvestorsModule.Investor) -> investors[currentID]
REF_480(usingInvestorsModule.Investor) (->investors) := lastInvestor(usingInvestorsModule.Investor)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
delete investors[numInvestors]

IRs:
REF_481(usingInvestorsModule.Investor) -> investors[numInvestors]
investors = delete REF_481 "];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
numInvestors --

IRs:
TMP_881(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors - 1"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
safeSend(currentInvestor,amountToReturn)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(currentInvestor,amountToReturn)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
safeSend(houseAddress,divestFeeAmount)

IRs:
INTERNAL_CALL, usingInvestorsModule.safeSend(address,uint256)(houseAddress,divestFeeAmount)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
LOG_InvestorExit(currentInvestor,amountToReturn)

IRs:
Emit LOG_InvestorExit(currentInvestor,amountToReturn)"];
19->22;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
21->22;
22[label="Node Type: END_IF 22
"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
23->1;
}
// Function: 39147.sol-usingInvestorsModule-forceDivestOfAllInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
copyNumInvestors = numInvestors

IRs:
copyNumInvestors(uint256) := numInvestors(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= copyNumInvestors

IRs:
TMP_887(bool) = i <= copyNumInvestors
CONDITION TMP_887"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
divest(investors[1].investorAddress)

IRs:
REF_482(usingInvestorsModule.Investor) -> investors[1]
REF_483(address) -> REF_482.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_483)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_889(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
8->1;
}
// Function: 39147.sol-usingInvestorsModule-getBalance(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
invested = investors[investorIDs[currentInvestor]].amountInvested

IRs:
REF_439(uint256) -> investorIDs[currentInvestor]
REF_440(usingInvestorsModule.Investor) -> investors[REF_439]
REF_441(uint256) -> REF_440.amountInvested
invested(uint256) := REF_441(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
profit = getProfitShare(currentInvestor)

IRs:
TMP_823(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profit(uint256) := TMP_823(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
losses = getLossesShare(currentInvestor)

IRs:
TMP_824(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
losses(uint256) := TMP_824(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
(invested + profit < profit) || (invested + profit < invested) || (invested + profit < losses)

IRs:
TMP_825(uint256) = invested + profit
TMP_826(bool) = TMP_825 < profit
TMP_827(uint256) = invested + profit
TMP_828(bool) = TMP_827 < invested
TMP_829(bool) = TMP_826 || TMP_828
TMP_830(uint256) = invested + profit
TMP_831(bool) = TMP_830 < losses
TMP_832(bool) = TMP_829 || TMP_831
CONDITION TMP_832"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
0

IRs:
RETURN 0"];
6[label="Node Type: RETURN 6

EXPRESSION:
invested + profit - losses

IRs:
TMP_833(uint256) = invested + profit
TMP_834(uint256) = TMP_833 - losses
RETURN TMP_834"];
}
// Function: 39147.sol-usingInvestorsModule-getBankroll()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(invested < investorsProfit) || (invested + investorsProfit < invested) || (invested + investorsProfit < investorsLosses)

IRs:
TMP_807(bool) = invested < investorsProfit
TMP_808(uint256) = invested + investorsProfit
TMP_809(bool) = TMP_808 < invested
TMP_810(bool) = TMP_807 || TMP_809
TMP_811(uint256) = invested + investorsProfit
TMP_812(bool) = TMP_811 < investorsLosses
TMP_813(bool) = TMP_810 || TMP_812
CONDITION TMP_813"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: RETURN 3

EXPRESSION:
invested + investorsProfit - investorsLosses

IRs:
TMP_814(uint256) = invested + investorsProfit
TMP_815(uint256) = TMP_814 - investorsLosses
RETURN TMP_815"];
}
// Function: 39147.sol-usingInvestorsModule-getLossesShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsLosses) / invested

IRs:
REF_433(uint256) -> investorIDs[currentInvestor]
REF_434(usingInvestorsModule.Investor) -> investors[REF_433]
REF_435(uint256) -> REF_434.amountInvested
TMP_819(uint256) = REF_435 * investorsLosses
TMP_820(uint256) = TMP_819 / invested
RETURN TMP_820"];
}
// Function: 39147.sol-usingInvestorsModule-getMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_816(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_816"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
investorID = searchSmallestInvestor()

IRs:
TMP_817(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
investorID(uint256) := TMP_817(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
getBalance(investors[investorID].investorAddress)

IRs:
REF_431(usingInvestorsModule.Investor) -> investors[investorID]
REF_432(address) -> REF_431.investorAddress
TMP_818(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_432)
RETURN TMP_818"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39147.sol-usingInvestorsModule-getProfitShare(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
investors[investorIDs[currentInvestor]].amountInvested * (investorsProfit) / invested

IRs:
REF_436(uint256) -> investorIDs[currentInvestor]
REF_437(usingInvestorsModule.Investor) -> investors[REF_436]
REF_438(uint256) -> REF_437.amountInvested
TMP_821(uint256) = REF_438 * investorsProfit
TMP_822(uint256) = TMP_821 / invested
RETURN TMP_822"];
}
// Function: 39147.sol-usingInvestorsModule-increaseInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
investors[investorIDs[msg.sender]].amountInvested += msg.value

IRs:
REF_465(uint256) -> investorIDs[msg.sender]
REF_466(usingInvestorsModule.Investor) -> investors[REF_465]
REF_467(uint256) -> REF_466.amountInvested
REF_467(-> investors) = REF_467 + msg.value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
invested += msg.value

IRs:
invested(uint256) = invested + msg.value"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyInvestors()()"];
6->1;
}
// Function: 39147.sol-usingInvestorsModule-investorsInvariant()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: _ 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(numInvestors <= MAX_INVESTORS)

IRs:
TMP_921(bool) = numInvestors <= MAX_INVESTORS
TMP_922(None) = SOLIDITY_CALL assert(bool)(TMP_921)"];
}
// Function: 39147.sol-usingInvestorsModule-newInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
profitDistribution()

IRs:
INTERNAL_CALL, usingInvestorsModule.profitDistribution()()"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
numInvestors == MAX_INVESTORS

IRs:
TMP_863(bool) = numInvestors == MAX_INVESTORS
CONDITION TMP_863"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
smallestInvestorID = searchSmallestInvestor()

IRs:
TMP_864(uint256) = INTERNAL_CALL, usingInvestorsModule.searchSmallestInvestor()()
smallestInvestorID(uint256) := TMP_864(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
divest(investors[smallestInvestorID].investorAddress)

IRs:
REF_468(usingInvestorsModule.Investor) -> investors[smallestInvestorID]
REF_469(address) -> REF_468.investorAddress
INTERNAL_CALL, usingInvestorsModule.divest(address)(REF_469)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
numInvestors ++

IRs:
TMP_866(uint256) := numInvestors(uint256)
numInvestors(uint256) = numInvestors + 1"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
addInvestorAtID(numInvestors)

IRs:
INTERNAL_CALL, usingInvestorsModule.addInvestorAtID(uint256)(numInvestors)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyIfNotStopped()

IRs:
MODIFIER_CALL, HouseManaged.onlyIfNotStopped()()"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyMoreThanZero()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanZero()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyNotInvestors()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyNotInvestors()()"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyMoreThanMinInvestment()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyMoreThanMinInvestment()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
investorsInvariant()

IRs:
MODIFIER_CALL, usingInvestorsModule.investorsInvariant()()"];
12->1;
}
// Function: 39147.sol-usingInvestorsModule-onlyIfNotStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(! isStopped)

IRs:
TMP_909 = UnaryType.BANG isStopped 
TMP_910(None) = SOLIDITY_CALL assert(bool)(TMP_909)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyIfProfitNotDistributed()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! profitDistributed

IRs:
TMP_923 = UnaryType.BANG profitDistributed 
CONDITION TMP_923"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyIfStopped()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(isStopped)

IRs:
TMP_911(None) = SOLIDITY_CALL assert(bool)(isStopped)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] != 0)

IRs:
REF_491(uint256) -> investorIDs[msg.sender]
TMP_917(bool) = REF_491 != 0
TMP_918(None) = SOLIDITY_CALL assert(bool)(TMP_917)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyMoreThanMinInvestment()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value > getMinInvestment())

IRs:
TMP_912(uint256) = INTERNAL_CALL, usingInvestorsModule.getMinInvestment()()
TMP_913(bool) = msg.value > TMP_912
TMP_914(None) = SOLIDITY_CALL assert(bool)(TMP_913)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyMoreThanZero()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.value != 0)

IRs:
TMP_915(bool) = msg.value != 0
TMP_916(None) = SOLIDITY_CALL assert(bool)(TMP_915)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyNotInvestors()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(investorIDs[msg.sender] == 0)

IRs:
REF_492(uint256) -> investorIDs[msg.sender]
TMP_919(bool) = REF_492 == 0
TMP_920(None) = SOLIDITY_CALL assert(bool)(TMP_919)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.sender == owner)

IRs:
TMP_907(bool) = msg.sender == owner
TMP_908(None) = SOLIDITY_CALL assert(bool)(TMP_907)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 39147.sol-usingInvestorsModule-profitDistribution()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->19;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_841(bool) = i <= numInvestors
CONDITION TMP_841"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
currentInvestor = investors[i].investorAddress

IRs:
REF_451(usingInvestorsModule.Investor) -> investors[i]
REF_452(address) -> REF_451.investorAddress
currentInvestor(address) := REF_452(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
profitOfInvestor = getProfitShare(currentInvestor)

IRs:
TMP_842(uint256) = INTERNAL_CALL, usingInvestorsModule.getProfitShare(address)(currentInvestor)
profitOfInvestor(uint256) := TMP_842(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
lossesOfInvestor = getLossesShare(currentInvestor)

IRs:
TMP_843(uint256) = INTERNAL_CALL, usingInvestorsModule.getLossesShare(address)(currentInvestor)
lossesOfInvestor(uint256) := TMP_843(uint256)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
(investors[i].amountInvested + profitOfInvestor >= investors[i].amountInvested) && (investors[i].amountInvested + profitOfInvestor >= lossesOfInvestor)

IRs:
REF_453(usingInvestorsModule.Investor) -> investors[i]
REF_454(uint256) -> REF_453.amountInvested
TMP_844(uint256) = REF_454 + profitOfInvestor
REF_455(usingInvestorsModule.Investor) -> investors[i]
REF_456(uint256) -> REF_455.amountInvested
TMP_845(bool) = TMP_844 >= REF_456
REF_457(usingInvestorsModule.Investor) -> investors[i]
REF_458(uint256) -> REF_457.amountInvested
TMP_846(uint256) = REF_458 + profitOfInvestor
TMP_847(bool) = TMP_846 >= lossesOfInvestor
TMP_848(bool) = TMP_845 && TMP_847
CONDITION TMP_848"];
9->10[label="True"];
9->12[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
investors[i].amountInvested += profitOfInvestor - lossesOfInvestor

IRs:
REF_459(usingInvestorsModule.Investor) -> investors[i]
REF_460(uint256) -> REF_459.amountInvested
TMP_849(uint256) = profitOfInvestor - lossesOfInvestor
REF_460(-> investors) = REF_460 + TMP_849"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
LOG_InvestorCapitalUpdate(currentInvestor,int256(profitOfInvestor - lossesOfInvestor))

IRs:
TMP_850(uint256) = profitOfInvestor - lossesOfInvestor
TMP_851 = CONVERT TMP_850 to int256
Emit LOG_InvestorCapitalUpdate(currentInvestor,TMP_851)"];
11->14;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isStopped = true

IRs:
isStopped(bool) := True(bool)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_EmergencyAutoStop()

IRs:
Emit LOG_EmergencyAutoStop()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: IF 15

EXPRESSION:
copyInvested + investors[i].amountInvested >= copyInvested

IRs:
REF_461(usingInvestorsModule.Investor) -> investors[i]
REF_462(uint256) -> REF_461.amountInvested
TMP_854(uint256) = copyInvested + REF_462
TMP_855(bool) = TMP_854 >= copyInvested
CONDITION TMP_855"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyInvested += investors[i].amountInvested

IRs:
REF_463(usingInvestorsModule.Investor) -> investors[i]
REF_464(uint256) -> REF_463.amountInvested
copyInvested(uint256) = copyInvested + REF_464"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_856(uint256) := i(uint256)
i(uint256) = i + 1"];
18->5;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
delete investorsProfit

IRs:
investorsProfit = delete investorsProfit "];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
delete investorsLosses

IRs:
investorsLosses = delete investorsLosses "];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
invested = copyInvested

IRs:
invested(uint256) := copyInvested(uint256)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
profitDistributed = true

IRs:
profitDistributed(bool) := True(bool)"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyIfProfitNotDistributed()

IRs:
MODIFIER_CALL, usingInvestorsModule.onlyIfProfitNotDistributed()()"];
23->1;
}
// Function: 39147.sol-usingInvestorsModule-safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
value == 0

IRs:
TMP_891(bool) = value == 0
CONDITION TMP_891"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
LOG_ZeroSend()

IRs:
Emit LOG_ZeroSend()"];
2->3;
3[label="Node Type: RETURN 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
this.balance < value

IRs:
REF_484(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_893(bool) = REF_484 < value
CONDITION TMP_893"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
LOG_ValueIsTooBig()

IRs:
Emit LOG_ValueIsTooBig()"];
6->7;
7[label="Node Type: RETURN 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
! (addr.call.gas(safeGas).value(value)())

IRs:
TMP_897(bool) = LOW_LEVEL_CALL, dest:addr, function:call, arguments:[] value:value gas:safeGas
TMP_898 = UnaryType.BANG TMP_897 
CONDITION TMP_898"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
LOG_FailedSend(addr,value)

IRs:
Emit LOG_FailedSend(addr,value)"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
addr != houseAddress

IRs:
TMP_900(bool) = addr != houseAddress
CONDITION TMP_900"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
! (houseAddress.call.gas(safeGas).value(value)())

IRs:
TMP_903(bool) = LOW_LEVEL_CALL, dest:houseAddress, function:call, arguments:[] value:value gas:safeGas
TMP_904 = UnaryType.BANG TMP_903 
CONDITION TMP_904"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
LOG_FailedSend(houseAddress,value)

IRs:
Emit LOG_FailedSend(houseAddress,value)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
LOG_SuccessfulSend(addr,value)

IRs:
Emit LOG_SuccessfulSend(addr,value)"];
}
// Function: 39147.sol-usingInvestorsModule-searchSmallestInvestor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
investorID = 1

IRs:
investorID(uint256) := 1(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i <= numInvestors

IRs:
TMP_835(bool) = i <= numInvestors
CONDITION TMP_835"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
getBalance(investors[i].investorAddress) < getBalance(investors[investorID].investorAddress)

IRs:
REF_442(usingInvestorsModule.Investor) -> investors[i]
REF_443(address) -> REF_442.investorAddress
TMP_836(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_443)
REF_444(usingInvestorsModule.Investor) -> investors[investorID]
REF_445(address) -> REF_444.investorAddress
TMP_837(uint256) = INTERNAL_CALL, usingInvestorsModule.getBalance(address)(REF_445)
TMP_838(bool) = TMP_836 < TMP_837
CONDITION TMP_838"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
investorID = i

IRs:
investorID(uint256) := i(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_839(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
investorID

IRs:
RETURN investorID"];
}
// Function: 39147.sol-usingInvestorsModule-setSafeGas(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(ORACLIZE_BASE_GAS_LIMIT + safeGas >= ORACLIZE_BASE_GAS_LIMIT)

IRs:
TMP_790(uint256) = ORACLIZE_BASE_GAS_LIMIT + safeGas
TMP_791(bool) = TMP_790 >= ORACLIZE_BASE_GAS_LIMIT
TMP_792(None) = SOLIDITY_CALL assert(bool)(TMP_791)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(safeGas <= 25000)

IRs:
TMP_793(bool) = safeGas <= 25000
TMP_794(None) = SOLIDITY_CALL assert(bool)(TMP_793)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
safeGas = _gas

IRs:
safeGas(uint256) := _gas(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
newGasLimit(_gas)

IRs:
Emit newGasLimit(_gas)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
5->1;
}
// Function: 39147.sol-usingInvestorsModule-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
ORACLIZE_PER_SPIN_GAS_LIMIT = 6100

IRs:
ORACLIZE_PER_SPIN_GAS_LIMIT(uint256) := 6100(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
ORACLIZE_BASE_GAS_LIMIT = 200000

IRs:
ORACLIZE_BASE_GAS_LIMIT(uint256) := 200000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
MAX_INVESTORS = 5

IRs:
MAX_INVESTORS(uint256) := 5(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
divestFee = 50

IRs:
divestFee(uint256) := 50(uint256)"];
}
// Function: 39147.sol-usingInvestorsModule-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
safeGas = 9000

IRs:
safeGas(uint256) := 9000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
numInvestors = 0

IRs:
numInvestors(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
invested = 0

IRs:
invested(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
investorsProfit = 0

IRs:
investorsProfit(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
investorsLosses = 0

IRs:
investorsLosses(uint256) := 0(uint256)"];
}
// Function: 39147.sol-usingInvestorsModule-stop_or_resume_Contract(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
isStopped = _isStopped

IRs:
isStopped(bool) := _isStopped(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Owned.onlyOwner()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-__callback(bytes32,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
__callback(myid,result,new bytes(0))

IRs:
TMP_26 = new bytes(0)
INTERNAL_CALL, usingOraclize.__callback(bytes32,string,bytes)(myid,result,TMP_26)"];
}
// Function: 39147.sol-usingOraclize-__callback(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 39147.sol-usingOraclize-ba2cbor(bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_373 -> LENGTH arr
arrlen(uint256) := REF_373(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_482(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_482(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_483(bool) = i < arrlen
CONDITION TMP_483"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_374(bytes) -> elemArray[i]
REF_375(bytes) -> arr[i]
TMP_484 = CONVERT REF_375 to bytes
REF_374(bytes) (->elemArray) := TMP_484(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_376(bytes) -> elemArray[i]
REF_377 -> LENGTH REF_376
REF_378(bytes) -> elemArray[i]
REF_379 -> LENGTH REF_378
TMP_485(uint256) = REF_379 - 1
TMP_486(uint256) = TMP_485 / 23
TMP_487(uint256) = REF_377 + TMP_486
TMP_488(uint256) = TMP_487 + 3
outputlen(uint256) = outputlen + TMP_488"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_489(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_490(uint256) = arrlen + 128
cborlen(uint256) := TMP_490(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_491 = CONVERT cborlen to bytes1
REF_380 -> LENGTH TMP_491
outputlen(uint256) = outputlen + REF_380"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_493 = new bytes(outputlen)
res(bytes) := TMP_493(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_494 = CONVERT cborlen to bytes1
REF_381 -> LENGTH TMP_494
TMP_495(bool) = REF_381 > ctr
CONDITION TMP_495"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_382(None) -> res[ctr]
TMP_496 = CONVERT cborlen to bytes1
REF_383(None) -> TMP_496[ctr]
REF_382(None) (->res) := REF_383(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_497(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_498(bool) = i < arrlen
CONDITION TMP_498"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_384(uint256) -> res[ctr]
REF_384(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_499(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_385(bytes) -> elemArray[i]
REF_386 -> LENGTH REF_385
TMP_500(bool) = x < REF_386
CONDITION TMP_500"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_501(uint256) = x % 23
TMP_502(bool) = TMP_501 == 0
CONDITION TMP_502"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_503 = CONVERT elemcborlen to bytes1
REF_387 -> LENGTH TMP_503
TMP_504(uint256) = ctr - lctr
TMP_505(bool) = REF_387 > TMP_504
CONDITION TMP_505"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_388(None) -> res[ctr]
TMP_506 = CONVERT elemcborlen to bytes1
TMP_507(uint256) = ctr - lctr
REF_389(None) -> TMP_506[TMP_507]
REF_388(None) (->res) := REF_389(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_508(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_390(None) -> res[ctr]
REF_391(bytes) -> elemArray[i]
REF_392(None) -> REF_391[x]
REF_390(None) (->res) := REF_392(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_509(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_510(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_393(uint256) -> res[ctr]
REF_393(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_511(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_512(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_394(bytes) -> elemArray[i]
REF_395 -> LENGTH REF_394
TMP_513(uint256) = REF_395 - x
TMP_514(bool) = TMP_513 >= 24
CONDITION TMP_514"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_396(bytes) -> elemArray[i]
REF_397 -> LENGTH REF_396
TMP_515(uint256) = REF_397 - x
elemcborlen(uint256) := TMP_515(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39147.sol-usingOraclize-copyBytes(bytes,uint256,uint256,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
minLength = length + toOffset

IRs:
TMP_653(uint256) = length + toOffset
minLength(uint256) := TMP_653(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
to.length < minLength

IRs:
REF_423 -> LENGTH to
TMP_654(bool) = REF_423 < minLength
CONDITION TMP_654"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32 + fromOffset

IRs:
TMP_655(uint256) = 32 + fromOffset
i(uint256) := TMP_655(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
j = 32 + toOffset

IRs:
TMP_656(uint256) = 32 + toOffset
j(uint256) := TMP_656(uint256)"];
6->7;
7[label="Node Type: BEGIN_LOOP 7
"];
7->8;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < (32 + fromOffset + length)

IRs:
TMP_657(uint256) = 32 + fromOffset
TMP_658(uint256) = TMP_657 + length
TMP_659(bool) = i < TMP_658
CONDITION TMP_659"];
8->9[label="True"];
8->13[label="False"];
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i += 32

IRs:
i(uint256) = i + 32"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
j += 32

IRs:
j(uint256) = j + 32"];
12->8;
13[label="Node Type: END_LOOP 13
"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
to

IRs:
RETURN to"];
}
// Function: 39147.sol-usingOraclize-coupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_682(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_683 = CONVERT TMP_682 to OraclizeI
oraclize(OraclizeI) := TMP_683(OraclizeI)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 39147.sol-usingOraclize-ecrecovery(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
sig.length != 65

IRs:
REF_424 -> LENGTH sig
TMP_660(bool) = REF_424 != 65
CONDITION TMP_660"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: INLINE ASM 7
"];
7->8;
8[label="Node Type: END INLINE ASM 8
"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
v < 27

IRs:
TMP_661(bool) = v < 27
CONDITION TMP_661"];
9->10[label="True"];
9->11[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
v += 27

IRs:
v(uint8) = v + 27"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
v != 27 && v != 28

IRs:
TMP_662(bool) = v != 27
TMP_663(bool) = v != 28
TMP_664(bool) = TMP_662 && TMP_663
CONDITION TMP_664"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
(false,0)

IRs:
RETURN False,0"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
safer_ecrecover(hash,v,r,s)

IRs:
TUPLE_2(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TUPLE_2"];
}
// Function: 39147.sol-usingOraclize-getCodeSize(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: INLINE ASM 1
"];
1->2;
2[label="Node Type: END INLINE ASM 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
_size

IRs:
RETURN _size"];
}
// Function: 39147.sol-usingOraclize-indexOf(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
h = bytes(_haystack)

IRs:
TMP_363 = CONVERT _haystack to bytes
h(bytes) := TMP_363(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
n = bytes(_needle)

IRs:
TMP_364 = CONVERT _needle to bytes
n(bytes) := TMP_364(bytes)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
h.length < 1 || n.length < 1 || (n.length > h.length)

IRs:
REF_309 -> LENGTH h
TMP_365(bool) = REF_309 < 1
REF_310 -> LENGTH n
TMP_366(bool) = REF_310 < 1
TMP_367(bool) = TMP_365 || TMP_366
REF_311 -> LENGTH n
REF_312 -> LENGTH h
TMP_368(bool) = REF_311 > REF_312
TMP_369(bool) = TMP_367 || TMP_368
CONDITION TMP_369"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
- 1

IRs:
TMP_370(uint256) = 0 - 1
RETURN TMP_370"];
5[label="Node Type: IF 5

EXPRESSION:
h.length > (2 ** 128 - 1)

IRs:
REF_313 -> LENGTH h
TMP_371(uint256) = 2 ** 128
TMP_372(uint256) = TMP_371 - 1
TMP_373(bool) = REF_313 > TMP_372
CONDITION TMP_373"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
- 1

IRs:
TMP_374(uint256) = 0 - 1
RETURN TMP_374"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
subindex = 0

IRs:
subindex(uint256) := 0(uint256)"];
7->10;
8[label="Node Type: BEGIN_LOOP 8
"];
8->11;
9[label="Node Type: END_LOOP 9
"];
9->23;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
10->8;
11[label="Node Type: IF_LOOP 11

EXPRESSION:
i < h.length

IRs:
REF_314 -> LENGTH h
TMP_375(bool) = i < REF_314
CONDITION TMP_375"];
11->12[label="True"];
11->9[label="False"];
12[label="Node Type: IF 12

EXPRESSION:
h[i] == n[0]

IRs:
REF_315(None) -> h[i]
REF_316(None) -> n[0]
TMP_376(bool) = REF_315 == REF_316
CONDITION TMP_376"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
subindex = 1

IRs:
subindex(uint256) := 1(uint256)"];
13->14;
14[label="Node Type: BEGIN_LOOP 14
"];
14->15;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]

IRs:
REF_317 -> LENGTH n
TMP_377(bool) = subindex < REF_317
TMP_378(uint256) = i + subindex
REF_318 -> LENGTH h
TMP_379(bool) = TMP_378 < REF_318
TMP_380(bool) = TMP_377 && TMP_379
TMP_381(uint256) = i + subindex
REF_319(None) -> h[TMP_381]
REF_320(None) -> n[subindex]
TMP_382(bool) = REF_319 == REF_320
TMP_383(bool) = TMP_380 && TMP_382
CONDITION TMP_383"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
subindex ++

IRs:
TMP_384(uint256) := subindex(uint256)
subindex(uint256) = subindex + 1"];
16->15;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: IF 18

EXPRESSION:
subindex == n.length

IRs:
REF_321 -> LENGTH n
TMP_385(bool) = subindex == REF_321
CONDITION TMP_385"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
int256(i)

IRs:
TMP_386 = CONVERT i to int256
RETURN TMP_386"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_387(uint256) := i(uint256)
i(uint256) = i + 1"];
22->11;
23[label="Node Type: RETURN 23

EXPRESSION:
- 1

IRs:
TMP_388(uint256) = 0 - 1
RETURN TMP_388"];
}
// Function: 39147.sol-usingOraclize-matchBytes32Prefix(bytes32,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
match_ = true

IRs:
match_(bool) := True(bool)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < prefix.length

IRs:
REF_411 -> LENGTH prefix
TMP_583(bool) = i < REF_411
CONDITION TMP_583"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
content[i] != prefix[i]

IRs:
REF_412(None) -> content[i]
REF_413(None) -> prefix[i]
TMP_584(bool) = REF_412 != REF_413
CONDITION TMP_584"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
match_ = false

IRs:
match_(bool) := False(bool)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_585(uint8) := i(uint8)
i(uint8) = i + 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
match_

IRs:
RETURN match_"];
}
// Function: 39147.sol-usingOraclize-oraclizeAPI()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(address(OAR) == 0) || (getCodeSize(address(OAR)) == 0)

IRs:
TMP_673 = CONVERT OAR to address
TMP_674(bool) = TMP_673 == 0
TMP_675 = CONVERT OAR to address
TMP_676(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(TMP_675)
TMP_677(bool) = TMP_676 == 0
TMP_678(bool) = TMP_674 || TMP_677
CONDITION TMP_678"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclize_setNetwork(networkID_auto)

IRs:
TMP_679(bool) = INTERNAL_CALL, usingOraclize.oraclize_setNetwork(uint8)(networkID_auto)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclize = OraclizeI(OAR.getAddress())

IRs:
TMP_680(address) = HIGH_LEVEL_CALL, dest:OAR(OraclizeAddrResolverI), function:getAddress, arguments:[]  
TMP_681 = CONVERT TMP_680 to OraclizeI
oraclize(OraclizeI) := TMP_681(OraclizeI)"];
4->5;
5[label="Node Type: _ 5
"];
}
// Function: 39147.sol-usingOraclize-oraclize_cbAddress()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.cbAddress()

IRs:
TMP_314(address) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:cbAddress, arguments:[]  
RETURN TMP_314"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_getNetworkName()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize_network_name

IRs:
RETURN oraclize_network_name"];
}
// Function: 39147.sol-usingOraclize-oraclize_getPrice(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource)

IRs:
TMP_30(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
RETURN TMP_30"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_getPrice(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_32(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
RETURN TMP_32"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_newRandomDSQuery(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_nbytes == 0) || (_nbytes > 32)

IRs:
TMP_516(bool) = _nbytes == 0
TMP_517(bool) = _nbytes > 32
TMP_518(bool) = TMP_516 || TMP_517
CONDITION TMP_518"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
nbytes = new bytes(1)

IRs:
TMP_520 = new bytes(1)
nbytes(bytes) := TMP_520(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
nbytes[0] = bytes1(_nbytes)

IRs:
REF_398(bytes1) -> nbytes[0]
TMP_521 = CONVERT _nbytes to bytes1
REF_398(bytes1) (->nbytes) := TMP_521(bytes1)"];
5->6;
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash()

IRs:
TMP_522(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_getSessionPubKeyHash()()
sessionKeyHash_bytes32(bytes32) := TMP_522(bytes32)"];
8->9;
9[label="Node Type: INLINE ASM 9
"];
9->10;
10[label="Node Type: END INLINE ASM 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
args = (unonce,nbytes,sessionKeyHash)

IRs:
args(bytes[3]) = ['unonce(bytes)', 'nbytes(bytes)', 'sessionKeyHash(bytes)']"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
queryId = oraclize_query(_delay,random,args,_customGasLimit)

IRs:
TMP_523(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[3],uint256)(_delay,random,args,_customGasLimit)
queryId(bytes32) := TMP_523(bytes32)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_randomDS_setCommitment(queryId,sha3()(bytes8(_delay),args[1],sha256()(args[0]),args[2]))

IRs:
TMP_524 = CONVERT _delay to bytes8
REF_399(bytes) -> args[1]
REF_400(bytes) -> args[0]
TMP_525(bytes32) = SOLIDITY_CALL sha256()(REF_400)
REF_401(bytes) -> args[2]
TMP_526(bytes32) = SOLIDITY_CALL sha3()(TMP_524,REF_399,TMP_525,REF_401)
INTERNAL_CALL, usingOraclize.oraclize_randomDS_setCommitment(bytes32,bytes32)(queryId,TMP_526)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
queryId

IRs:
RETURN queryId"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_235(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_235(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_171(bytes) -> dynargs[0]
REF_172(bytes) -> args[0]
REF_171(bytes) (->dynargs) := REF_172(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_236(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_236"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_247(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_247(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_177(bytes) -> dynargs[0]
REF_178(bytes) -> args[0]
REF_177(bytes) (->dynargs) := REF_178(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_248(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_248"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_251(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_251(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_179(bytes) -> dynargs[0]
REF_180(bytes) -> args[0]
REF_179(bytes) (->dynargs) := REF_180(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_181(bytes) -> dynargs[1]
REF_182(bytes) -> args[1]
REF_181(bytes) (->dynargs) := REF_182(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_252(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_252"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_263(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_263(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_191(bytes) -> dynargs[0]
REF_192(bytes) -> args[0]
REF_191(bytes) (->dynargs) := REF_192(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_193(bytes) -> dynargs[1]
REF_194(bytes) -> args[1]
REF_193(bytes) (->dynargs) := REF_194(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_264(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_264"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_267(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_267(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_195(bytes) -> dynargs[0]
REF_196(bytes) -> args[0]
REF_195(bytes) (->dynargs) := REF_196(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_197(bytes) -> dynargs[1]
REF_198(bytes) -> args[1]
REF_197(bytes) (->dynargs) := REF_198(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_199(bytes) -> dynargs[2]
REF_200(bytes) -> args[2]
REF_199(bytes) (->dynargs) := REF_200(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_268(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_268"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_279(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_279(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_213(bytes) -> dynargs[0]
REF_214(bytes) -> args[0]
REF_213(bytes) (->dynargs) := REF_214(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_215(bytes) -> dynargs[1]
REF_216(bytes) -> args[1]
REF_215(bytes) (->dynargs) := REF_216(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_217(bytes) -> dynargs[2]
REF_218(bytes) -> args[2]
REF_217(bytes) (->dynargs) := REF_218(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_280(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_280"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_283(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_283(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_219(bytes) -> dynargs[0]
REF_220(bytes) -> args[0]
REF_219(bytes) (->dynargs) := REF_220(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_221(bytes) -> dynargs[1]
REF_222(bytes) -> args[1]
REF_221(bytes) (->dynargs) := REF_222(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_223(bytes) -> dynargs[2]
REF_224(bytes) -> args[2]
REF_223(bytes) (->dynargs) := REF_224(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_225(bytes) -> dynargs[3]
REF_226(bytes) -> args[3]
REF_225(bytes) (->dynargs) := REF_226(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_284(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_284"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_295(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_295(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_243(bytes) -> dynargs[0]
REF_244(bytes) -> args[0]
REF_243(bytes) (->dynargs) := REF_244(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_245(bytes) -> dynargs[1]
REF_246(bytes) -> args[1]
REF_245(bytes) (->dynargs) := REF_246(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_247(bytes) -> dynargs[2]
REF_248(bytes) -> args[2]
REF_247(bytes) (->dynargs) := REF_248(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_249(bytes) -> dynargs[3]
REF_250(bytes) -> args[3]
REF_249(bytes) (->dynargs) := REF_250(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_296(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_296"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_299(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_299(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_251(bytes) -> dynargs[0]
REF_252(bytes) -> args[0]
REF_251(bytes) (->dynargs) := REF_252(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_253(bytes) -> dynargs[1]
REF_254(bytes) -> args[1]
REF_253(bytes) (->dynargs) := REF_254(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_255(bytes) -> dynargs[2]
REF_256(bytes) -> args[2]
REF_255(bytes) (->dynargs) := REF_256(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_257(bytes) -> dynargs[3]
REF_258(bytes) -> args[3]
REF_257(bytes) (->dynargs) := REF_258(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_259(bytes) -> dynargs[4]
REF_260(bytes) -> args[4]
REF_259(bytes) (->dynargs) := REF_260(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_300(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[])(datasource,dynargs)
RETURN TMP_300"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_311(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_311(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_281(bytes) -> dynargs[0]
REF_282(bytes) -> args[0]
REF_281(bytes) (->dynargs) := REF_282(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_283(bytes) -> dynargs[1]
REF_284(bytes) -> args[1]
REF_283(bytes) (->dynargs) := REF_284(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_285(bytes) -> dynargs[2]
REF_286(bytes) -> args[2]
REF_285(bytes) (->dynargs) := REF_286(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_287(bytes) -> dynargs[3]
REF_288(bytes) -> args[3]
REF_287(bytes) (->dynargs) := REF_288(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_289(bytes) -> dynargs[4]
REF_290(bytes) -> args[4]
REF_289(bytes) (->dynargs) := REF_290(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_312(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,bytes[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_312"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_202(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_202(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_203(uint256) = tx.gasprice * 200000
TMP_204(uint256) = 1000000000000000000 + TMP_203
TMP_205(bool) = price > TMP_204
CONDITION TMP_205"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_206(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_206(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_208(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_208"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_226(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_226(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_227(uint256) = tx.gasprice * gaslimit
TMP_228(uint256) = 1000000000000000000 + TMP_227
TMP_229(bool) = price > TMP_228
CONDITION TMP_229"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_230(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_230(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_232(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_232"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_34(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_34(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_35(uint256) = tx.gasprice * 200000
TMP_36(uint256) = 1000000000000000000 + TMP_35
TMP_37(bool) = price > TMP_36
CONDITION TMP_37"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(0,datasource,arg)

IRs:
TMP_39(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['0', 'datasource', 'arg'] value:price 
RETURN TMP_39"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_62(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_63(uint256) = tx.gasprice * 200000
TMP_64(uint256) = 1000000000000000000 + TMP_63
TMP_65(bool) = price > TMP_64
CONDITION TMP_65"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(0,datasource,arg1,arg2)

IRs:
TMP_67(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['0', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_67"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_83(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_83(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_84(uint256) = tx.gasprice * gaslimit
TMP_85(uint256) = 1000000000000000000 + TMP_84
TMP_86(bool) = price > TMP_85
CONDITION TMP_86"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(0,datasource,arg1,arg2,gaslimit)

IRs:
TMP_88(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['0', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_88"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_55(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_55(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_56(uint256) = tx.gasprice * gaslimit
TMP_57(uint256) = 1000000000000000000 + TMP_56
TMP_58(bool) = price > TMP_57
CONDITION TMP_58"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(0,datasource,arg,gaslimit)

IRs:
TMP_60(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['0', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_60"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_123(string[])  = new string[](1)
dynargs(string[]) = ['TMP_123(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_39(string) -> dynargs[0]
REF_40(string) -> args[0]
REF_39(string) (->dynargs) := REF_40(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_124(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_124"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_135(string[])  = new string[](1)
dynargs(string[]) = ['TMP_135(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_45(string) -> dynargs[0]
REF_46(string) -> args[0]
REF_45(string) (->dynargs) := REF_46(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_136(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_136"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_139(string[])  = new string[](2)
dynargs(string[]) = ['TMP_139(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_47(string) -> dynargs[0]
REF_48(string) -> args[0]
REF_47(string) (->dynargs) := REF_48(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_49(string) -> dynargs[1]
REF_50(string) -> args[1]
REF_49(string) (->dynargs) := REF_50(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_140(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_140"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_151(string[])  = new string[](2)
dynargs(string[]) = ['TMP_151(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_59(string) -> dynargs[0]
REF_60(string) -> args[0]
REF_59(string) (->dynargs) := REF_60(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_61(string) -> dynargs[1]
REF_62(string) -> args[1]
REF_61(string) (->dynargs) := REF_62(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_152(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_152"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_155(string[])  = new string[](3)
dynargs(string[]) = ['TMP_155(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_63(string) -> dynargs[0]
REF_64(string) -> args[0]
REF_63(string) (->dynargs) := REF_64(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_65(string) -> dynargs[1]
REF_66(string) -> args[1]
REF_65(string) (->dynargs) := REF_66(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_67(string) -> dynargs[2]
REF_68(string) -> args[2]
REF_67(string) (->dynargs) := REF_68(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_156(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_156"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_167(string[])  = new string[](3)
dynargs(string[]) = ['TMP_167(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_81(string) -> dynargs[0]
REF_82(string) -> args[0]
REF_81(string) (->dynargs) := REF_82(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_83(string) -> dynargs[1]
REF_84(string) -> args[1]
REF_83(string) (->dynargs) := REF_84(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_85(string) -> dynargs[2]
REF_86(string) -> args[2]
REF_85(string) (->dynargs) := REF_86(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_168(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_168"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_171(string[])  = new string[](4)
dynargs(string[]) = ['TMP_171(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_87(string) -> dynargs[0]
REF_88(string) -> args[0]
REF_87(string) (->dynargs) := REF_88(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_89(string) -> dynargs[1]
REF_90(string) -> args[1]
REF_89(string) (->dynargs) := REF_90(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_91(string) -> dynargs[2]
REF_92(string) -> args[2]
REF_91(string) (->dynargs) := REF_92(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_93(string) -> dynargs[3]
REF_94(string) -> args[3]
REF_93(string) (->dynargs) := REF_94(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_172(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_172"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_183(string[])  = new string[](4)
dynargs(string[]) = ['TMP_183(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_111(string) -> dynargs[0]
REF_112(string) -> args[0]
REF_111(string) (->dynargs) := REF_112(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_113(string) -> dynargs[1]
REF_114(string) -> args[1]
REF_113(string) (->dynargs) := REF_114(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_115(string) -> dynargs[2]
REF_116(string) -> args[2]
REF_115(string) (->dynargs) := REF_116(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_117(string) -> dynargs[3]
REF_118(string) -> args[3]
REF_117(string) (->dynargs) := REF_118(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_184(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_184"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_187(string[])  = new string[](5)
dynargs(string[]) = ['TMP_187(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_119(string) -> dynargs[0]
REF_120(string) -> args[0]
REF_119(string) (->dynargs) := REF_120(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_121(string) -> dynargs[1]
REF_122(string) -> args[1]
REF_121(string) (->dynargs) := REF_122(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_123(string) -> dynargs[2]
REF_124(string) -> args[2]
REF_123(string) (->dynargs) := REF_124(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_125(string) -> dynargs[3]
REF_126(string) -> args[3]
REF_125(string) (->dynargs) := REF_126(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_127(string) -> dynargs[4]
REF_128(string) -> args[4]
REF_127(string) (->dynargs) := REF_128(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs)

IRs:
TMP_188(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[])(datasource,dynargs)
RETURN TMP_188"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_199(string[])  = new string[](5)
dynargs(string[]) = ['TMP_199(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_149(string) -> dynargs[0]
REF_150(string) -> args[0]
REF_149(string) (->dynargs) := REF_150(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_151(string) -> dynargs[1]
REF_152(string) -> args[1]
REF_151(string) (->dynargs) := REF_152(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_153(string) -> dynargs[2]
REF_154(string) -> args[2]
REF_153(string) (->dynargs) := REF_154(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_155(string) -> dynargs[3]
REF_156(string) -> args[3]
REF_155(string) (->dynargs) := REF_156(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_157(string) -> dynargs[4]
REF_158(string) -> args[4]
REF_157(string) (->dynargs) := REF_158(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(datasource,dynargs,gaslimit)

IRs:
TMP_200(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(string,string[],uint256)(datasource,dynargs,gaslimit)
RETURN TMP_200"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_90(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_90(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_91(uint256) = tx.gasprice * 200000
TMP_92(uint256) = 1000000000000000000 + TMP_91
TMP_93(bool) = price > TMP_92
CONDITION TMP_93"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_94(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_94(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(0,datasource,args)

IRs:
TMP_96(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['0', 'datasource', 'args'] value:price 
RETURN TMP_96"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_114(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_114(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_115(uint256) = tx.gasprice * gaslimit
TMP_116(uint256) = 1000000000000000000 + TMP_115
TMP_117(bool) = price > TMP_116
CONDITION TMP_117"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_118(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_118(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(0,datasource,args,gaslimit)

IRs:
TMP_120(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['0', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_120"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_239(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_239(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_173(bytes) -> dynargs[0]
REF_174(bytes) -> args[0]
REF_173(bytes) (->dynargs) := REF_174(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_240(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_240"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](1)

IRs:
TMP_243(bytes[])  = new bytes[](1)
dynargs(bytes[]) = ['TMP_243(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_175(bytes) -> dynargs[0]
REF_176(bytes) -> args[0]
REF_175(bytes) (->dynargs) := REF_176(bytes)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_244(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_244"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_255(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_255(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_183(bytes) -> dynargs[0]
REF_184(bytes) -> args[0]
REF_183(bytes) (->dynargs) := REF_184(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_185(bytes) -> dynargs[1]
REF_186(bytes) -> args[1]
REF_185(bytes) (->dynargs) := REF_186(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_256(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_256"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](2)

IRs:
TMP_259(bytes[])  = new bytes[](2)
dynargs(bytes[]) = ['TMP_259(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_187(bytes) -> dynargs[0]
REF_188(bytes) -> args[0]
REF_187(bytes) (->dynargs) := REF_188(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_189(bytes) -> dynargs[1]
REF_190(bytes) -> args[1]
REF_189(bytes) (->dynargs) := REF_190(bytes)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_260(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_260"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_271(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_271(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_201(bytes) -> dynargs[0]
REF_202(bytes) -> args[0]
REF_201(bytes) (->dynargs) := REF_202(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_203(bytes) -> dynargs[1]
REF_204(bytes) -> args[1]
REF_203(bytes) (->dynargs) := REF_204(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_205(bytes) -> dynargs[2]
REF_206(bytes) -> args[2]
REF_205(bytes) (->dynargs) := REF_206(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_272(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_272"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](3)

IRs:
TMP_275(bytes[])  = new bytes[](3)
dynargs(bytes[]) = ['TMP_275(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_207(bytes) -> dynargs[0]
REF_208(bytes) -> args[0]
REF_207(bytes) (->dynargs) := REF_208(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_209(bytes) -> dynargs[1]
REF_210(bytes) -> args[1]
REF_209(bytes) (->dynargs) := REF_210(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_211(bytes) -> dynargs[2]
REF_212(bytes) -> args[2]
REF_211(bytes) (->dynargs) := REF_212(bytes)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_276(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_276"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_287(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_287(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_227(bytes) -> dynargs[0]
REF_228(bytes) -> args[0]
REF_227(bytes) (->dynargs) := REF_228(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_229(bytes) -> dynargs[1]
REF_230(bytes) -> args[1]
REF_229(bytes) (->dynargs) := REF_230(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_231(bytes) -> dynargs[2]
REF_232(bytes) -> args[2]
REF_231(bytes) (->dynargs) := REF_232(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_233(bytes) -> dynargs[3]
REF_234(bytes) -> args[3]
REF_233(bytes) (->dynargs) := REF_234(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_288(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_288"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](4)

IRs:
TMP_291(bytes[])  = new bytes[](4)
dynargs(bytes[]) = ['TMP_291(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_235(bytes) -> dynargs[0]
REF_236(bytes) -> args[0]
REF_235(bytes) (->dynargs) := REF_236(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_237(bytes) -> dynargs[1]
REF_238(bytes) -> args[1]
REF_237(bytes) (->dynargs) := REF_238(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_239(bytes) -> dynargs[2]
REF_240(bytes) -> args[2]
REF_239(bytes) (->dynargs) := REF_240(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_241(bytes) -> dynargs[3]
REF_242(bytes) -> args[3]
REF_241(bytes) (->dynargs) := REF_242(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_292(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_292"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_303(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_303(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_261(bytes) -> dynargs[0]
REF_262(bytes) -> args[0]
REF_261(bytes) (->dynargs) := REF_262(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_263(bytes) -> dynargs[1]
REF_264(bytes) -> args[1]
REF_263(bytes) (->dynargs) := REF_264(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_265(bytes) -> dynargs[2]
REF_266(bytes) -> args[2]
REF_265(bytes) (->dynargs) := REF_266(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_267(bytes) -> dynargs[3]
REF_268(bytes) -> args[3]
REF_267(bytes) (->dynargs) := REF_268(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_269(bytes) -> dynargs[4]
REF_270(bytes) -> args[4]
REF_269(bytes) (->dynargs) := REF_270(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_304(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[])(timestamp,datasource,dynargs)
RETURN TMP_304"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new bytes[](5)

IRs:
TMP_307(bytes[])  = new bytes[](5)
dynargs(bytes[]) = ['TMP_307(bytes[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_271(bytes) -> dynargs[0]
REF_272(bytes) -> args[0]
REF_271(bytes) (->dynargs) := REF_272(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_273(bytes) -> dynargs[1]
REF_274(bytes) -> args[1]
REF_273(bytes) (->dynargs) := REF_274(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_275(bytes) -> dynargs[2]
REF_276(bytes) -> args[2]
REF_275(bytes) (->dynargs) := REF_276(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_277(bytes) -> dynargs[3]
REF_278(bytes) -> args[3]
REF_277(bytes) (->dynargs) := REF_278(bytes)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_279(bytes) -> dynargs[4]
REF_280(bytes) -> args[4]
REF_279(bytes) (->dynargs) := REF_280(bytes)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_308(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,bytes[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_308"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_210(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_210(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_211(uint256) = tx.gasprice * 200000
TMP_212(uint256) = 1000000000000000000 + TMP_211
TMP_213(bool) = price > TMP_212
CONDITION TMP_213"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_214(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_214(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_216(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_216"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,bytes[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_218(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_218(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_219(uint256) = tx.gasprice * gaslimit
TMP_220(uint256) = 1000000000000000000 + TMP_219
TMP_221(bool) = price > TMP_220
CONDITION TMP_221"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = ba2cbor(argN)

IRs:
TMP_222(bytes) = INTERNAL_CALL, usingOraclize.ba2cbor(bytes[])(argN)
args(bytes) := TMP_222(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_224(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_224"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_41(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_41(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_42(uint256) = tx.gasprice * 200000
TMP_43(uint256) = 1000000000000000000 + TMP_42
TMP_44(bool) = price > TMP_43
CONDITION TMP_44"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query.value(price)(timestamp,datasource,arg)

IRs:
TMP_46(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query, arguments:['timestamp', 'datasource', 'arg'] value:price 
RETURN TMP_46"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_69(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_69(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_70(uint256) = tx.gasprice * 200000
TMP_71(uint256) = 1000000000000000000 + TMP_70
TMP_72(bool) = price > TMP_71
CONDITION TMP_72"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2.value(price)(timestamp,datasource,arg1,arg2)

IRs:
TMP_74(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2, arguments:['timestamp', 'datasource', 'arg1', 'arg2'] value:price 
RETURN TMP_74"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_76(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_76(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_77(uint256) = tx.gasprice * gaslimit
TMP_78(uint256) = 1000000000000000000 + TMP_77
TMP_79(bool) = price > TMP_78
CONDITION TMP_79"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query2_withGasLimit.value(price)(timestamp,datasource,arg1,arg2,gaslimit)

IRs:
TMP_81(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query2_withGasLimit, arguments:['timestamp', 'datasource', 'arg1', 'arg2', 'gaslimit'] value:price 
RETURN TMP_81"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_48(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_48(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_49(uint256) = tx.gasprice * gaslimit
TMP_50(uint256) = 1000000000000000000 + TMP_49
TMP_51(bool) = price > TMP_50
CONDITION TMP_51"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize.query_withGasLimit.value(price)(timestamp,datasource,arg,gaslimit)

IRs:
TMP_53(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:query_withGasLimit, arguments:['timestamp', 'datasource', 'arg', 'gaslimit'] value:price 
RETURN TMP_53"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[1])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_127(string[])  = new string[](1)
dynargs(string[]) = ['TMP_127(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_41(string) -> dynargs[0]
REF_42(string) -> args[0]
REF_41(string) (->dynargs) := REF_42(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_128(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_128"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[1],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](1)

IRs:
TMP_131(string[])  = new string[](1)
dynargs(string[]) = ['TMP_131(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_43(string) -> dynargs[0]
REF_44(string) -> args[0]
REF_43(string) (->dynargs) := REF_44(string)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_132(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_132"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
4->1;
5[label="Node Type: RETURN 5

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[2])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_143(string[])  = new string[](2)
dynargs(string[]) = ['TMP_143(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_51(string) -> dynargs[0]
REF_52(string) -> args[0]
REF_51(string) (->dynargs) := REF_52(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_53(string) -> dynargs[1]
REF_54(string) -> args[1]
REF_53(string) (->dynargs) := REF_54(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_144(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_144"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[2],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](2)

IRs:
TMP_147(string[])  = new string[](2)
dynargs(string[]) = ['TMP_147(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_55(string) -> dynargs[0]
REF_56(string) -> args[0]
REF_55(string) (->dynargs) := REF_56(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_57(string) -> dynargs[1]
REF_58(string) -> args[1]
REF_57(string) (->dynargs) := REF_58(string)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_148(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_148"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
5->1;
6[label="Node Type: RETURN 6

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[3])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_159(string[])  = new string[](3)
dynargs(string[]) = ['TMP_159(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_69(string) -> dynargs[0]
REF_70(string) -> args[0]
REF_69(string) (->dynargs) := REF_70(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_71(string) -> dynargs[1]
REF_72(string) -> args[1]
REF_71(string) (->dynargs) := REF_72(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_73(string) -> dynargs[2]
REF_74(string) -> args[2]
REF_73(string) (->dynargs) := REF_74(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_160(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_160"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[3],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](3)

IRs:
TMP_163(string[])  = new string[](3)
dynargs(string[]) = ['TMP_163(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_75(string) -> dynargs[0]
REF_76(string) -> args[0]
REF_75(string) (->dynargs) := REF_76(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_77(string) -> dynargs[1]
REF_78(string) -> args[1]
REF_77(string) (->dynargs) := REF_78(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_79(string) -> dynargs[2]
REF_80(string) -> args[2]
REF_79(string) (->dynargs) := REF_80(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_164(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_164"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
6->1;
7[label="Node Type: RETURN 7

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[4])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_175(string[])  = new string[](4)
dynargs(string[]) = ['TMP_175(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_95(string) -> dynargs[0]
REF_96(string) -> args[0]
REF_95(string) (->dynargs) := REF_96(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_97(string) -> dynargs[1]
REF_98(string) -> args[1]
REF_97(string) (->dynargs) := REF_98(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_99(string) -> dynargs[2]
REF_100(string) -> args[2]
REF_99(string) (->dynargs) := REF_100(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_101(string) -> dynargs[3]
REF_102(string) -> args[3]
REF_101(string) (->dynargs) := REF_102(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_176(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_176"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[4],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](4)

IRs:
TMP_179(string[])  = new string[](4)
dynargs(string[]) = ['TMP_179(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_103(string) -> dynargs[0]
REF_104(string) -> args[0]
REF_103(string) (->dynargs) := REF_104(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_105(string) -> dynargs[1]
REF_106(string) -> args[1]
REF_105(string) (->dynargs) := REF_106(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_107(string) -> dynargs[2]
REF_108(string) -> args[2]
REF_107(string) (->dynargs) := REF_108(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_109(string) -> dynargs[3]
REF_110(string) -> args[3]
REF_109(string) (->dynargs) := REF_110(string)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_180(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_180"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[5])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_191(string[])  = new string[](5)
dynargs(string[]) = ['TMP_191(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_129(string) -> dynargs[0]
REF_130(string) -> args[0]
REF_129(string) (->dynargs) := REF_130(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_131(string) -> dynargs[1]
REF_132(string) -> args[1]
REF_131(string) (->dynargs) := REF_132(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_133(string) -> dynargs[2]
REF_134(string) -> args[2]
REF_133(string) (->dynargs) := REF_134(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_135(string) -> dynargs[3]
REF_136(string) -> args[3]
REF_135(string) (->dynargs) := REF_136(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_137(string) -> dynargs[4]
REF_138(string) -> args[4]
REF_137(string) (->dynargs) := REF_138(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs)

IRs:
TMP_192(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[])(timestamp,datasource,dynargs)
RETURN TMP_192"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[5],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
dynargs = new string[](5)

IRs:
TMP_195(string[])  = new string[](5)
dynargs(string[]) = ['TMP_195(string[])']"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
dynargs[0] = args[0]

IRs:
REF_139(string) -> dynargs[0]
REF_140(string) -> args[0]
REF_139(string) (->dynargs) := REF_140(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
dynargs[1] = args[1]

IRs:
REF_141(string) -> dynargs[1]
REF_142(string) -> args[1]
REF_141(string) (->dynargs) := REF_142(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
dynargs[2] = args[2]

IRs:
REF_143(string) -> dynargs[2]
REF_144(string) -> args[2]
REF_143(string) (->dynargs) := REF_144(string)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
dynargs[3] = args[3]

IRs:
REF_145(string) -> dynargs[3]
REF_146(string) -> args[3]
REF_145(string) (->dynargs) := REF_146(string)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dynargs[4] = args[4]

IRs:
REF_147(string) -> dynargs[4]
REF_148(string) -> args[4]
REF_147(string) (->dynargs) := REF_148(string)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
oraclize_query(timestamp,datasource,dynargs,gaslimit)

IRs:
TMP_196(bytes32) = INTERNAL_CALL, usingOraclize.oraclize_query(uint256,string,string[],uint256)(timestamp,datasource,dynargs,gaslimit)
RETURN TMP_196"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
8->1;
9[label="Node Type: RETURN 9

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource)

IRs:
TMP_98(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource']  
price(uint256) := TMP_98(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * 200000

IRs:
TMP_99(uint256) = tx.gasprice * 200000
TMP_100(uint256) = 1000000000000000000 + TMP_99
TMP_101(bool) = price > TMP_100
CONDITION TMP_101"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_102(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_102(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN.value(price)(timestamp,datasource,args)

IRs:
TMP_104(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN, arguments:['timestamp', 'datasource', 'args'] value:price 
RETURN TMP_104"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_query(uint256,string,string[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
price = oraclize.getPrice(datasource,gaslimit)

IRs:
TMP_106(uint256) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:getPrice, arguments:['datasource', 'gaslimit']  
price(uint256) := TMP_106(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
price > 1000000000000000000 + tx.gasprice * gaslimit

IRs:
TMP_107(uint256) = tx.gasprice * gaslimit
TMP_108(uint256) = 1000000000000000000 + TMP_107
TMP_109(bool) = price > TMP_108
CONDITION TMP_109"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
0

IRs:
RETURN 0"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
args = stra2cbor(argN)

IRs:
TMP_110(bytes) = INTERNAL_CALL, usingOraclize.stra2cbor(string[])(argN)
args(bytes) := TMP_110(bytes)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
oraclize.queryN_withGasLimit.value(price)(timestamp,datasource,args,gaslimit)

IRs:
TMP_112(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:queryN_withGasLimit, arguments:['timestamp', 'datasource', 'args', 'gaslimit'] value:price 
RETURN TMP_112"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
7->1;
8[label="Node Type: RETURN 8

EXPRESSION:
id

IRs:
RETURN id"];
}
// Function: 39147.sol-usingOraclize-oraclize_randomDS_getSessionPubKeyHash()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.randomDS_getSessionPubKeyHash()

IRs:
TMP_322(bytes32) = HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:randomDS_getSessionPubKeyHash, arguments:[]  
RETURN TMP_322"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_randomDS_proofVerify(bytes32,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
(_proof[0] != L) || (_proof[1] != P) || (_proof[2] != 1)

IRs:
REF_428(None) -> _proof[0]
TMP_685(bool) = REF_428 != L
REF_429(None) -> _proof[1]
TMP_686(bool) = REF_429 != P
TMP_687(bool) = TMP_685 || TMP_686
REF_430(None) -> _proof[2]
TMP_688(bool) = REF_430 != 1
TMP_689(bool) = TMP_687 || TMP_688
CONDITION TMP_689"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
proofVerified = oraclize_randomDS_proofVerify__main(_proof,_queryId,bytes(_result),oraclize_getNetworkName())

IRs:
TMP_690 = CONVERT _result to bytes
TMP_691(string) = INTERNAL_CALL, usingOraclize.oraclize_getNetworkName()()
TMP_692(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)(_proof,_queryId,TMP_690,TMP_691)
proofVerified(bool) := TMP_692(bool)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
proofVerified == false

IRs:
TMP_693(bool) = proofVerified == False
CONDITION TMP_693"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: _ 8
"];
}
// Function: 39147.sol-usingOraclize-oraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
ledgerProofLength = 3 + 65 + (uint256(proof[3 + 65 + 1]) + 2) + 32

IRs:
TMP_586(uint256) = 3 + 65
TMP_587(uint256) = 3 + 65
TMP_588(uint256) = TMP_587 + 1
REF_414(None) -> proof[TMP_588]
TMP_589 = CONVERT REF_414 to uint256
TMP_590(uint256) = TMP_589 + 2
TMP_591(uint256) = TMP_586 + TMP_590
TMP_592(uint256) = TMP_591 + 32
ledgerProofLength(uint256) := TMP_592(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
keyhash = new bytes(32)

IRs:
TMP_594 = new bytes(32)
keyhash(bytes) := TMP_594(bytes)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
copyBytes(proof,ledgerProofLength,32,keyhash,0)

IRs:
TMP_595(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,32,keyhash,0)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
checkok = (sha3()(keyhash) == sha3()(sha256()(context_name,queryId)))

IRs:
TMP_596(bytes32) = SOLIDITY_CALL sha3()(keyhash)
TMP_597(bytes32) = SOLIDITY_CALL sha256()(context_name,queryId)
TMP_598(bytes32) = SOLIDITY_CALL sha3()(TMP_597)
TMP_599(bool) = TMP_596 == TMP_598
checkok(bool) := TMP_599(bool)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
checkok == false

IRs:
TMP_600(bool) = checkok == False
CONDITION TMP_600"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
sig1 = new bytes(uint256(proof[ledgerProofLength + (32 + 8 + 1 + 32) + 1]) + 2)

IRs:
TMP_602(uint256) = 32 + 8
TMP_603(uint256) = TMP_602 + 1
TMP_604(uint256) = TMP_603 + 32
TMP_605(uint256) = ledgerProofLength + TMP_604
TMP_606(uint256) = TMP_605 + 1
REF_415(None) -> proof[TMP_606]
TMP_607 = CONVERT REF_415 to uint256
TMP_608(uint256) = TMP_607 + 2
TMP_609 = new bytes(TMP_608)
sig1(bytes) := TMP_609(bytes)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(proof,ledgerProofLength + (32 + 8 + 1 + 32),sig1.length,sig1,0)

IRs:
TMP_610(uint256) = 32 + 8
TMP_611(uint256) = TMP_610 + 1
TMP_612(uint256) = TMP_611 + 32
TMP_613(uint256) = ledgerProofLength + TMP_612
REF_416 -> LENGTH sig1
TMP_614(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_613,REF_416,sig1,0)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
checkok = matchBytes32Prefix(sha256()(sig1),result)

IRs:
TMP_615(bytes32) = SOLIDITY_CALL sha256()(sig1)
TMP_616(bool) = INTERNAL_CALL, usingOraclize.matchBytes32Prefix(bytes32,bytes)(TMP_615,result)
checkok(bool) := TMP_616(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
checkok == false

IRs:
TMP_617(bool) = checkok == False
CONDITION TMP_617"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
commitmentSlice1 = new bytes(8 + 1 + 32)

IRs:
TMP_619(uint256) = 8 + 1
TMP_620(uint256) = TMP_619 + 32
TMP_621 = new bytes(TMP_620)
commitmentSlice1(bytes) := TMP_621(bytes)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
copyBytes(proof,ledgerProofLength + 32,8 + 1 + 32,commitmentSlice1,0)

IRs:
TMP_622(uint256) = ledgerProofLength + 32
TMP_623(uint256) = 8 + 1
TMP_624(uint256) = TMP_623 + 32
TMP_625(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_622,TMP_624,commitmentSlice1,0)"];
16->17;
17[label="Node Type: NEW VARIABLE 17

EXPRESSION:
sessionPubkey = new bytes(64)

IRs:
TMP_627 = new bytes(64)
sessionPubkey(bytes) := TMP_627(bytes)"];
17->18;
18[label="Node Type: NEW VARIABLE 18

EXPRESSION:
sig2offset = ledgerProofLength + 32 + (8 + 1 + 32) + sig1.length + 65

IRs:
TMP_628(uint256) = ledgerProofLength + 32
TMP_629(uint256) = 8 + 1
TMP_630(uint256) = TMP_629 + 32
TMP_631(uint256) = TMP_628 + TMP_630
REF_417 -> LENGTH sig1
TMP_632(uint256) = TMP_631 + REF_417
TMP_633(uint256) = TMP_632 + 65
sig2offset(uint256) := TMP_633(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
copyBytes(proof,sig2offset - 64,64,sessionPubkey,0)

IRs:
TMP_634(uint256) = sig2offset - 64
TMP_635(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_634,64,sessionPubkey,0)"];
19->20;
20[label="Node Type: NEW VARIABLE 20

EXPRESSION:
sessionPubkeyHash = sha256()(sessionPubkey)

IRs:
TMP_636(bytes32) = SOLIDITY_CALL sha256()(sessionPubkey)
sessionPubkeyHash(bytes32) := TMP_636(bytes32)"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
oraclize_randomDS_args[queryId] == sha3()(commitmentSlice1,sessionPubkeyHash)

IRs:
REF_418(bytes32) -> oraclize_randomDS_args[queryId]
TMP_637(bytes32) = SOLIDITY_CALL sha3()(commitmentSlice1,sessionPubkeyHash)
TMP_638(bool) = REF_418 == TMP_637
CONDITION TMP_638"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
delete oraclize_randomDS_args[queryId]

IRs:
REF_419(bytes32) -> oraclize_randomDS_args[queryId]
oraclize_randomDS_args = delete REF_419 "];
22->24;
23[label="Node Type: RETURN 23

EXPRESSION:
false

IRs:
RETURN False"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: NEW VARIABLE 25

EXPRESSION:
tosign1 = new bytes(32 + 8 + 1 + 32)

IRs:
TMP_640(uint256) = 32 + 8
TMP_641(uint256) = TMP_640 + 1
TMP_642(uint256) = TMP_641 + 32
TMP_643 = new bytes(TMP_642)
tosign1(bytes) := TMP_643(bytes)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
copyBytes(proof,ledgerProofLength,32 + 8 + 1 + 32,tosign1,0)

IRs:
TMP_644(uint256) = 32 + 8
TMP_645(uint256) = TMP_644 + 1
TMP_646(uint256) = TMP_645 + 32
TMP_647(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,ledgerProofLength,TMP_646,tosign1,0)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
checkok = verifySig(sha256()(tosign1),sig1,sessionPubkey)

IRs:
TMP_648(bytes32) = SOLIDITY_CALL sha256()(tosign1)
TMP_649(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_648,sig1,sessionPubkey)
checkok(bool) := TMP_649(bool)"];
27->28;
28[label="Node Type: IF 28

EXPRESSION:
checkok == false

IRs:
TMP_650(bool) = checkok == False
CONDITION TMP_650"];
28->29[label="True"];
28->30[label="False"];
29[label="Node Type: RETURN 29

EXPRESSION:
false

IRs:
RETURN False"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: IF 31

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false

IRs:
REF_420(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_651(bool) = REF_420 == False
CONDITION TMP_651"];
31->32[label="True"];
31->33[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof,sig2offset)

IRs:
REF_421(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
TMP_652(bool) = INTERNAL_CALL, usingOraclize.oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)(proof,sig2offset)
REF_421(bool) (->oraclize_randomDS_sessionKeysHashVerified) := TMP_652(bool)"];
32->33;
33[label="Node Type: END_IF 33
"];
33->34;
34[label="Node Type: RETURN 34

EXPRESSION:
oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]

IRs:
REF_422(bool) -> oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash]
RETURN REF_422"];
}
// Function: 39147.sol-usingOraclize-oraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
sig2 = new bytes(uint256(proof[sig2offset + 1]) + 2)

IRs:
TMP_549(uint256) = sig2offset + 1
REF_405(None) -> proof[TMP_549]
TMP_550 = CONVERT REF_405 to uint256
TMP_551(uint256) = TMP_550 + 2
TMP_552 = new bytes(TMP_551)
sig2(bytes) := TMP_552(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
copyBytes(proof,sig2offset,sig2.length,sig2,0)

IRs:
REF_406 -> LENGTH sig2
TMP_553(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,sig2offset,REF_406,sig2,0)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
appkey1_pubkey = new bytes(64)

IRs:
TMP_555 = new bytes(64)
appkey1_pubkey(bytes) := TMP_555(bytes)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
copyBytes(proof,3 + 1,64,appkey1_pubkey,0)

IRs:
TMP_556(uint256) = 3 + 1
TMP_557(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_556,64,appkey1_pubkey,0)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tosign2 = new bytes(1 + 65 + 32)

IRs:
TMP_559(uint256) = 1 + 65
TMP_560(uint256) = TMP_559 + 32
TMP_561 = new bytes(TMP_560)
tosign2(bytes) := TMP_561(bytes)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
tosign2[0] = 1

IRs:
REF_407(uint256) -> tosign2[0]
REF_407(uint256) (->tosign2) := 1(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
copyBytes(proof,sig2offset - 65,65,tosign2,1)

IRs:
TMP_562(uint256) = sig2offset - 65
TMP_563(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_562,65,tosign2,1)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
CODEHASH = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c

IRs:
CODEHASH(bytes) := 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c(string)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
copyBytes(CODEHASH,0,32,tosign2,1 + 65)

IRs:
TMP_564(uint256) = 1 + 65
TMP_565(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(CODEHASH,0,32,tosign2,TMP_564)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
sigok = verifySig(sha256()(tosign2),sig2,appkey1_pubkey)

IRs:
TMP_566(bytes32) = SOLIDITY_CALL sha256()(tosign2)
TMP_567(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_566,sig2,appkey1_pubkey)
sigok(bool) := TMP_567(bool)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
sigok == false

IRs:
TMP_568(bool) = sigok == False
CONDITION TMP_568"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: RETURN 13

EXPRESSION:
false

IRs:
RETURN False"];
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: NEW VARIABLE 15

EXPRESSION:
LEDGERKEY = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4

IRs:
LEDGERKEY(bytes) := 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4(string)"];
15->16;
16[label="Node Type: NEW VARIABLE 16

EXPRESSION:
tosign3 = new bytes(1 + 65)

IRs:
TMP_570(uint256) = 1 + 65
TMP_571 = new bytes(TMP_570)
tosign3(bytes) := TMP_571(bytes)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tosign3[0] = 0xFE

IRs:
REF_408(uint256) -> tosign3[0]
REF_408(uint256) (->tosign3) := 254(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
copyBytes(proof,3,65,tosign3,1)

IRs:
TMP_572(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,3,65,tosign3,1)"];
18->19;
19[label="Node Type: NEW VARIABLE 19

EXPRESSION:
sig3 = new bytes(uint256(proof[3 + 65 + 1]) + 2)

IRs:
TMP_574(uint256) = 3 + 65
TMP_575(uint256) = TMP_574 + 1
REF_409(None) -> proof[TMP_575]
TMP_576 = CONVERT REF_409 to uint256
TMP_577(uint256) = TMP_576 + 2
TMP_578 = new bytes(TMP_577)
sig3(bytes) := TMP_578(bytes)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
copyBytes(proof,3 + 65,sig3.length,sig3,0)

IRs:
TMP_579(uint256) = 3 + 65
REF_410 -> LENGTH sig3
TMP_580(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(proof,TMP_579,REF_410,sig3,0)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
sigok = verifySig(sha256()(tosign3),sig3,LEDGERKEY)

IRs:
TMP_581(bytes32) = SOLIDITY_CALL sha256()(tosign3)
TMP_582(bool) = INTERNAL_CALL, usingOraclize.verifySig(bytes32,bytes,bytes)(TMP_581,sig3,LEDGERKEY)
sigok(bool) := TMP_582(bool)"];
21->22;
22[label="Node Type: RETURN 22

EXPRESSION:
sigok

IRs:
RETURN sigok"];
}
// Function: 39147.sol-usingOraclize-oraclize_randomDS_setCommitment(bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_randomDS_args[queryId] = commitment

IRs:
REF_402(bytes32) -> oraclize_randomDS_args[queryId]
REF_402(bytes32) (->oraclize_randomDS_args) := commitment(bytes32)"];
}
// Function: 39147.sol-usingOraclize-oraclize_setConfig(bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setConfig(config)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setConfig, arguments:['config']  
RETURN TMP_320"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_setCustomGasPrice(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setCustomGasPrice(gasPrice)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setCustomGasPrice, arguments:['gasPrice']  
RETURN TMP_318"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_setNetwork(uint8)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0

IRs:
TMP_0(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(166879805866326139730078904348178637806357513965)
TMP_1(bool) = TMP_0 > 0
CONDITION TMP_1"];
1->2[label="True"];
1->5[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)

IRs:
TMP_2 = CONVERT 166879805866326139730078904348178637806357513965 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_2(OraclizeAddrResolverI)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
oraclize_setNetworkName(eth_mainnet)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_mainnet)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0

IRs:
TMP_4(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1097422988916857156046675838961943218895050702321)
TMP_5(bool) = TMP_4 > 0
CONDITION TMP_5"];
6->7[label="True"];
6->10[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)

IRs:
TMP_6 = CONVERT 1097422988916857156046675838961943218895050702321 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_6(OraclizeAddrResolverI)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
oraclize_setNetworkName(eth_ropsten3)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_ropsten3)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0

IRs:
TMP_8(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(1048324215600149964926726871673577870280409853054)
TMP_9(bool) = TMP_8 > 0
CONDITION TMP_9"];
11->12[label="True"];
11->15[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)

IRs:
TMP_10 = CONVERT 1048324215600149964926726871673577870280409853054 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_10(OraclizeAddrResolverI)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
oraclize_setNetworkName(eth_kovan)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_kovan)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0

IRs:
TMP_12(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(116432261400918649897535177377955459648826436936)
TMP_13(bool) = TMP_12 > 0
CONDITION TMP_13"];
16->17[label="True"];
16->20[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)

IRs:
TMP_14 = CONVERT 116432261400918649897535177377955459648826436936 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_14(OraclizeAddrResolverI)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
oraclize_setNetworkName(eth_rinkeby)

IRs:
INTERNAL_CALL, usingOraclize.oraclize_setNetworkName(string)(eth_rinkeby)"];
18->19;
19[label="Node Type: RETURN 19

EXPRESSION:
true

IRs:
RETURN True"];
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0

IRs:
TMP_16(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(635311691173595039251750320822679867724247381109)
TMP_17(bool) = TMP_16 > 0
CONDITION TMP_17"];
21->22[label="True"];
21->24[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)

IRs:
TMP_18 = CONVERT 635311691173595039251750320822679867724247381109 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_18(OraclizeAddrResolverI)"];
22->23;
23[label="Node Type: RETURN 23

EXPRESSION:
true

IRs:
RETURN True"];
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: IF 25

EXPRESSION:
getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0

IRs:
TMP_19(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(187709041778388189316595140198321842980723710911)
TMP_20(bool) = TMP_19 > 0
CONDITION TMP_20"];
25->26[label="True"];
25->28[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)

IRs:
TMP_21 = CONVERT 187709041778388189316595140198321842980723710911 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_21(OraclizeAddrResolverI)"];
26->27;
27[label="Node Type: RETURN 27

EXPRESSION:
true

IRs:
RETURN True"];
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: IF 29

EXPRESSION:
getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0

IRs:
TMP_22(uint256) = INTERNAL_CALL, usingOraclize.getCodeSize(address)(467773401235755137097289008257078260350600581034)
TMP_23(bool) = TMP_22 > 0
CONDITION TMP_23"];
29->30[label="True"];
29->32[label="False"];
30[label="Node Type: EXPRESSION 30

EXPRESSION:
OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)

IRs:
TMP_24 = CONVERT 467773401235755137097289008257078260350600581034 to OraclizeAddrResolverI
OAR(OraclizeAddrResolverI) := TMP_24(OraclizeAddrResolverI)"];
30->31;
31[label="Node Type: RETURN 31

EXPRESSION:
true

IRs:
RETURN True"];
32[label="Node Type: END_IF 32
"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 39147.sol-usingOraclize-oraclize_setNetworkName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize_network_name = _network_name

IRs:
oraclize_network_name(string) := _network_name(string)"];
}
// Function: 39147.sol-usingOraclize-oraclize_setProof(bytes1)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
oraclize.setProofType(proofP)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:setProofType, arguments:['proofP']  
RETURN TMP_316"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-oraclize_useCoupon(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
oraclize.useCoupon(code)

IRs:
HIGH_LEVEL_CALL, dest:oraclize(OraclizeI), function:useCoupon, arguments:['code']  "];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
oraclizeAPI()

IRs:
MODIFIER_CALL, usingOraclize.oraclizeAPI()()"];
2->1;
}
// Function: 39147.sol-usingOraclize-parseAddr(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tmp = bytes(_a)

IRs:
TMP_324 = CONVERT _a to bytes
tmp(bytes) := TMP_324(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
iaddr = 0

IRs:
iaddr(uint160) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->32;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 2

IRs:
i(uint256) := 2(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < 2 + 2 * 20

IRs:
TMP_325(uint256) = 2 * 20
TMP_326(uint256) = 2 + TMP_325
TMP_327(bool) = i < TMP_326
CONDITION TMP_327"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
iaddr *= 256

IRs:
iaddr(uint160) = iaddr * 256"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
b1 = uint160(tmp[i])

IRs:
REF_296(None) -> tmp[i]
TMP_328 = CONVERT REF_296 to uint160
b1(uint160) := TMP_328(uint160)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
b2 = uint160(tmp[i + 1])

IRs:
TMP_329(uint256) = i + 1
REF_297(None) -> tmp[TMP_329]
TMP_330 = CONVERT REF_297 to uint160
b2(uint160) := TMP_330(uint160)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
(b1 >= 97) && (b1 <= 102)

IRs:
TMP_331(bool) = b1 >= 97
TMP_332(bool) = b1 <= 102
TMP_333(bool) = TMP_331 && TMP_332
CONDITION TMP_333"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
b1 -= 87

IRs:
b1(uint160) = b1 - 87"];
13->20;
14[label="Node Type: IF 14

EXPRESSION:
(b1 >= 65) && (b1 <= 70)

IRs:
TMP_334(bool) = b1 >= 65
TMP_335(bool) = b1 <= 70
TMP_336(bool) = TMP_334 && TMP_335
CONDITION TMP_336"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
b1 -= 55

IRs:
b1(uint160) = b1 - 55"];
15->19;
16[label="Node Type: IF 16

EXPRESSION:
(b1 >= 48) && (b1 <= 57)

IRs:
TMP_337(bool) = b1 >= 48
TMP_338(bool) = b1 <= 57
TMP_339(bool) = TMP_337 && TMP_338
CONDITION TMP_339"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
b1 -= 48

IRs:
b1(uint160) = b1 - 48"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: IF 21

EXPRESSION:
(b2 >= 97) && (b2 <= 102)

IRs:
TMP_340(bool) = b2 >= 97
TMP_341(bool) = b2 <= 102
TMP_342(bool) = TMP_340 && TMP_341
CONDITION TMP_342"];
21->22[label="True"];
21->23[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
b2 -= 87

IRs:
b2(uint160) = b2 - 87"];
22->29;
23[label="Node Type: IF 23

EXPRESSION:
(b2 >= 65) && (b2 <= 70)

IRs:
TMP_343(bool) = b2 >= 65
TMP_344(bool) = b2 <= 70
TMP_345(bool) = TMP_343 && TMP_344
CONDITION TMP_345"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
b2 -= 55

IRs:
b2(uint160) = b2 - 55"];
24->28;
25[label="Node Type: IF 25

EXPRESSION:
(b2 >= 48) && (b2 <= 57)

IRs:
TMP_346(bool) = b2 >= 48
TMP_347(bool) = b2 <= 57
TMP_348(bool) = TMP_346 && TMP_347
CONDITION TMP_348"];
25->26[label="True"];
25->27[label="False"];
26[label="Node Type: EXPRESSION 26

EXPRESSION:
b2 -= 48

IRs:
b2(uint160) = b2 - 48"];
26->27;
27[label="Node Type: END_IF 27
"];
27->28;
28[label="Node Type: END_IF 28
"];
28->29;
29[label="Node Type: END_IF 29
"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
iaddr += (b1 * 16 + b2)

IRs:
TMP_349(uint160) = b1 * 16
TMP_350(uint160) = TMP_349 + b2
iaddr(uint160) = iaddr + TMP_350"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
i += 2

IRs:
i(uint256) = i + 2"];
31->8;
32[label="Node Type: RETURN 32

EXPRESSION:
address(iaddr)

IRs:
TMP_351 = CONVERT iaddr to address
RETURN TMP_351"];
}
// Function: 39147.sol-usingOraclize-parseInt(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
parseInt(_a,0)

IRs:
TMP_420(uint256) = INTERNAL_CALL, usingOraclize.parseInt(string,uint256)(_a,0)
RETURN TMP_420"];
}
// Function: 39147.sol-usingOraclize-parseInt(string,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bresult = bytes(_a)

IRs:
TMP_421 = CONVERT _a to bytes
bresult(bytes) := TMP_421(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
mint = 0

IRs:
mint(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
decimals = false

IRs:
decimals(bool) := False(bool)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->22;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < bresult.length

IRs:
REF_342 -> LENGTH bresult
TMP_422(bool) = i < REF_342
CONDITION TMP_422"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: IF 8

EXPRESSION:
(bresult[i] >= 48) && (bresult[i] <= 57)

IRs:
REF_343(None) -> bresult[i]
TMP_423(bool) = REF_343 >= 48
REF_344(None) -> bresult[i]
TMP_424(bool) = REF_344 <= 57
TMP_425(bool) = TMP_423 && TMP_424
CONDITION TMP_425"];
8->9[label="True"];
8->17[label="False"];
9[label="Node Type: IF 9

EXPRESSION:
decimals

IRs:
CONDITION decimals"];
9->10[label="True"];
9->14[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
_b == 0

IRs:
TMP_426(bool) = _b == 0
CONDITION TMP_426"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: BREAK 11
"];
11->5;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_b --

IRs:
TMP_427(uint256) := _b(uint256)
_b(uint256) = _b - 1"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mint *= 10

IRs:
mint(uint256) = mint * 10"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
mint += uint256(bresult[i]) - 48

IRs:
REF_345(None) -> bresult[i]
TMP_428 = CONVERT REF_345 to uint256
TMP_429(uint256) = TMP_428 - 48
mint(uint256) = mint + TMP_429"];
16->20;
17[label="Node Type: IF 17

EXPRESSION:
bresult[i] == 46

IRs:
REF_346(None) -> bresult[i]
TMP_430(bool) = REF_346 == 46
CONDITION TMP_430"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
decimals = true

IRs:
decimals(bool) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
i ++

IRs:
TMP_431(uint256) := i(uint256)
i(uint256) = i + 1"];
21->7;
22[label="Node Type: IF 22

EXPRESSION:
_b > 0

IRs:
TMP_432(bool) = _b > 0
CONDITION TMP_432"];
22->23[label="True"];
22->24[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
mint *= 10 ** _b

IRs:
TMP_433(uint256) = 10 ** _b
mint(uint256) = mint * TMP_433"];
23->24;
24[label="Node Type: END_IF 24
"];
24->25;
25[label="Node Type: RETURN 25

EXPRESSION:
mint

IRs:
RETURN mint"];
}
// Function: 39147.sol-usingOraclize-safer_ecrecover(bytes32,uint8,bytes32,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(ret,addr)

IRs:
RETURN ret,addr"];
}
// Function: 39147.sol-usingOraclize-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
day = 60 * 60 * 24

IRs:
TMP_665(uint256) = 60 * 60
TMP_666(uint256) = TMP_665 * 24
day(uint256) := TMP_666(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
week = 60 * 60 * 24 * 7

IRs:
TMP_667(uint256) = 60 * 60
TMP_668(uint256) = TMP_667 * 24
TMP_669(uint256) = TMP_668 * 7
week(uint256) := TMP_669(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
month = 60 * 60 * 24 * 30

IRs:
TMP_670(uint256) = 60 * 60
TMP_671(uint256) = TMP_670 * 24
TMP_672(uint256) = TMP_671 * 30
month(uint256) := TMP_672(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
proofType_NONE = 0x00

IRs:
proofType_NONE(bytes1) := 0(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
proofType_TLSNotary = 0x10

IRs:
proofType_TLSNotary(bytes1) := 16(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
proofType_Android = 0x20

IRs:
proofType_Android(bytes1) := 32(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
proofType_Ledger = 0x30

IRs:
proofType_Ledger(bytes1) := 48(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
proofType_Native = 0xF0

IRs:
proofType_Native(bytes1) := 240(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
proofStorage_IPFS = 0x01

IRs:
proofStorage_IPFS(bytes1) := 1(uint256)"];
8->9;
9[label="Node Type: OTHER_ENTRYPOINT 9

EXPRESSION:
networkID_auto = 0

IRs:
networkID_auto(uint8) := 0(uint256)"];
9->10;
10[label="Node Type: OTHER_ENTRYPOINT 10

EXPRESSION:
networkID_mainnet = 1

IRs:
networkID_mainnet(uint8) := 1(uint256)"];
10->11;
11[label="Node Type: OTHER_ENTRYPOINT 11

EXPRESSION:
networkID_testnet = 2

IRs:
networkID_testnet(uint8) := 2(uint256)"];
11->12;
12[label="Node Type: OTHER_ENTRYPOINT 12

EXPRESSION:
networkID_morden = 2

IRs:
networkID_morden(uint8) := 2(uint256)"];
12->13;
13[label="Node Type: OTHER_ENTRYPOINT 13

EXPRESSION:
networkID_consensys = 161

IRs:
networkID_consensys(uint8) := 161(uint256)"];
}
// Function: 39147.sol-usingOraclize-strCompare(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
a = bytes(_a)

IRs:
TMP_352 = CONVERT _a to bytes
a(bytes) := TMP_352(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
b = bytes(_b)

IRs:
TMP_353 = CONVERT _b to bytes
b(bytes) := TMP_353(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
minLength = a.length

IRs:
REF_298 -> LENGTH a
minLength(uint256) := REF_298(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
b.length < minLength

IRs:
REF_299 -> LENGTH b
TMP_354(bool) = REF_299 < minLength
CONDITION TMP_354"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
minLength = b.length

IRs:
REF_300 -> LENGTH b
minLength(uint256) := REF_300(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->9;
7[label="Node Type: BEGIN_LOOP 7
"];
7->10;
8[label="Node Type: END_LOOP 8
"];
8->18;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
9->7;
10[label="Node Type: IF_LOOP 10

EXPRESSION:
i < minLength

IRs:
TMP_355(bool) = i < minLength
CONDITION TMP_355"];
10->11[label="True"];
10->8[label="False"];
11[label="Node Type: IF 11

EXPRESSION:
a[i] < b[i]

IRs:
REF_301(None) -> a[i]
REF_302(None) -> b[i]
TMP_356(bool) = REF_301 < REF_302
CONDITION TMP_356"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: RETURN 12

EXPRESSION:
- 1

IRs:
TMP_357(uint256) = 0 - 1
RETURN TMP_357"];
13[label="Node Type: IF 13

EXPRESSION:
a[i] > b[i]

IRs:
REF_303(None) -> a[i]
REF_304(None) -> b[i]
TMP_358(bool) = REF_303 > REF_304
CONDITION TMP_358"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: RETURN 14

EXPRESSION:
1

IRs:
RETURN 1"];
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i ++

IRs:
TMP_359(uint256) := i(uint256)
i(uint256) = i + 1"];
17->10;
18[label="Node Type: IF 18

EXPRESSION:
a.length < b.length

IRs:
REF_305 -> LENGTH a
REF_306 -> LENGTH b
TMP_360(bool) = REF_305 < REF_306
CONDITION TMP_360"];
18->19[label="True"];
18->20[label="False"];
19[label="Node Type: RETURN 19

EXPRESSION:
- 1

IRs:
TMP_361(uint256) = 0 - 1
RETURN TMP_361"];
20[label="Node Type: IF 20

EXPRESSION:
a.length > b.length

IRs:
REF_307 -> LENGTH a
REF_308 -> LENGTH b
TMP_362(bool) = REF_307 > REF_308
CONDITION TMP_362"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: RETURN 21

EXPRESSION:
1

IRs:
RETURN 1"];
22[label="Node Type: RETURN 22

EXPRESSION:
0

IRs:
RETURN 0"];
}
// Function: 39147.sol-usingOraclize-strConcat(string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,,,)

IRs:
TMP_419(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,,,)
RETURN TMP_419"];
}
// Function: 39147.sol-usingOraclize-strConcat(string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,,)

IRs:
TMP_418(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,,)
RETURN TMP_418"];
}
// Function: 39147.sol-usingOraclize-strConcat(string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
strConcat(_a,_b,_c,_d,)

IRs:
TMP_417(string) = INTERNAL_CALL, usingOraclize.strConcat(string,string,string,string,string)(_a,_b,_c,_d,)
RETURN TMP_417"];
}
// Function: 39147.sol-usingOraclize-strConcat(string,string,string,string,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ba = bytes(_a)

IRs:
TMP_389 = CONVERT _a to bytes
_ba(bytes) := TMP_389(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_bb = bytes(_b)

IRs:
TMP_390 = CONVERT _b to bytes
_bb(bytes) := TMP_390(bytes)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_bc = bytes(_c)

IRs:
TMP_391 = CONVERT _c to bytes
_bc(bytes) := TMP_391(bytes)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_bd = bytes(_d)

IRs:
TMP_392 = CONVERT _d to bytes
_bd(bytes) := TMP_392(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_be = bytes(_e)

IRs:
TMP_393 = CONVERT _e to bytes
_be(bytes) := TMP_393(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length)

IRs:
REF_322 -> LENGTH _ba
REF_323 -> LENGTH _bb
TMP_395(uint256) = REF_322 + REF_323
REF_324 -> LENGTH _bc
TMP_396(uint256) = TMP_395 + REF_324
REF_325 -> LENGTH _bd
TMP_397(uint256) = TMP_396 + REF_325
REF_326 -> LENGTH _be
TMP_398(uint256) = TMP_397 + REF_326
TMP_399 = new string(TMP_398)
abcde(string) := TMP_399(string)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
babcde = bytes(abcde)

IRs:
TMP_400 = CONVERT abcde to bytes
babcde(bytes) := TMP_400(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
k = 0

IRs:
k(uint256) := 0(uint256)"];
8->11;
9[label="Node Type: BEGIN_LOOP 9
"];
9->12;
10[label="Node Type: END_LOOP 10
"];
10->17;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
11->9;
12[label="Node Type: IF_LOOP 12

EXPRESSION:
i < _ba.length

IRs:
REF_327 -> LENGTH _ba
TMP_401(bool) = i < REF_327
CONDITION TMP_401"];
12->13[label="True"];
12->10[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
babcde[k ++] = _ba[i]

IRs:
TMP_402(uint256) := k(uint256)
k(uint256) = k + 1
REF_328(None) -> babcde[TMP_402]
REF_329(None) -> _ba[i]
REF_328(None) (->babcde) := REF_329(None)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i ++

IRs:
TMP_403(uint256) := i(uint256)
i(uint256) = i + 1"];
14->12;
15[label="Node Type: BEGIN_LOOP 15
"];
15->18;
16[label="Node Type: END_LOOP 16
"];
16->23;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
17->15;
18[label="Node Type: IF_LOOP 18

EXPRESSION:
i < _bb.length

IRs:
REF_330 -> LENGTH _bb
TMP_404(bool) = i < REF_330
CONDITION TMP_404"];
18->19[label="True"];
18->16[label="False"];
19[label="Node Type: EXPRESSION 19

EXPRESSION:
babcde[k ++] = _bb[i]

IRs:
TMP_405(uint256) := k(uint256)
k(uint256) = k + 1
REF_331(None) -> babcde[TMP_405]
REF_332(None) -> _bb[i]
REF_331(None) (->babcde) := REF_332(None)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_406(uint256) := i(uint256)
i(uint256) = i + 1"];
20->18;
21[label="Node Type: BEGIN_LOOP 21
"];
21->24;
22[label="Node Type: END_LOOP 22
"];
22->29;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
23->21;
24[label="Node Type: IF_LOOP 24

EXPRESSION:
i < _bc.length

IRs:
REF_333 -> LENGTH _bc
TMP_407(bool) = i < REF_333
CONDITION TMP_407"];
24->25[label="True"];
24->22[label="False"];
25[label="Node Type: EXPRESSION 25

EXPRESSION:
babcde[k ++] = _bc[i]

IRs:
TMP_408(uint256) := k(uint256)
k(uint256) = k + 1
REF_334(None) -> babcde[TMP_408]
REF_335(None) -> _bc[i]
REF_334(None) (->babcde) := REF_335(None)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
i ++

IRs:
TMP_409(uint256) := i(uint256)
i(uint256) = i + 1"];
26->24;
27[label="Node Type: BEGIN_LOOP 27
"];
27->30;
28[label="Node Type: END_LOOP 28
"];
28->35;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
29->27;
30[label="Node Type: IF_LOOP 30

EXPRESSION:
i < _bd.length

IRs:
REF_336 -> LENGTH _bd
TMP_410(bool) = i < REF_336
CONDITION TMP_410"];
30->31[label="True"];
30->28[label="False"];
31[label="Node Type: EXPRESSION 31

EXPRESSION:
babcde[k ++] = _bd[i]

IRs:
TMP_411(uint256) := k(uint256)
k(uint256) = k + 1
REF_337(None) -> babcde[TMP_411]
REF_338(None) -> _bd[i]
REF_337(None) (->babcde) := REF_338(None)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
i ++

IRs:
TMP_412(uint256) := i(uint256)
i(uint256) = i + 1"];
32->30;
33[label="Node Type: BEGIN_LOOP 33
"];
33->36;
34[label="Node Type: END_LOOP 34
"];
34->39;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
35->33;
36[label="Node Type: IF_LOOP 36

EXPRESSION:
i < _be.length

IRs:
REF_339 -> LENGTH _be
TMP_413(bool) = i < REF_339
CONDITION TMP_413"];
36->37[label="True"];
36->34[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
babcde[k ++] = _be[i]

IRs:
TMP_414(uint256) := k(uint256)
k(uint256) = k + 1
REF_340(None) -> babcde[TMP_414]
REF_341(None) -> _be[i]
REF_340(None) (->babcde) := REF_341(None)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
i ++

IRs:
TMP_415(uint256) := i(uint256)
i(uint256) = i + 1"];
38->36;
39[label="Node Type: RETURN 39

EXPRESSION:
string(babcde)

IRs:
TMP_416 = CONVERT babcde to string
RETURN TMP_416"];
}
// Function: 39147.sol-usingOraclize-stra2cbor(string[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
arrlen = arr.length

IRs:
REF_348 -> LENGTH arr
arrlen(uint256) := REF_348(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
outputlen = 0

IRs:
outputlen(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
elemArray = new bytes[](arrlen)

IRs:
TMP_447(bytes[])  = new bytes[](arrlen)
elemArray(bytes[]) = ['TMP_447(bytes[])']"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < arrlen

IRs:
TMP_448(bool) = i < arrlen
CONDITION TMP_448"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
elemArray[i] = (bytes(arr[i]))

IRs:
REF_349(bytes) -> elemArray[i]
REF_350(string) -> arr[i]
TMP_449 = CONVERT REF_350 to bytes
REF_349(bytes) (->elemArray) := TMP_449(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
outputlen += elemArray[i].length + (elemArray[i].length - 1) / 23 + 3

IRs:
REF_351(bytes) -> elemArray[i]
REF_352 -> LENGTH REF_351
REF_353(bytes) -> elemArray[i]
REF_354 -> LENGTH REF_353
TMP_450(uint256) = REF_354 - 1
TMP_451(uint256) = TMP_450 / 23
TMP_452(uint256) = REF_352 + TMP_451
TMP_453(uint256) = TMP_452 + 3
outputlen(uint256) = outputlen + TMP_453"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_454(uint256) := i(uint256)
i(uint256) = i + 1"];
10->7;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
ctr = 0

IRs:
ctr(uint256) := 0(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
cborlen = arrlen + 0x80

IRs:
TMP_455(uint256) = arrlen + 128
cborlen(uint256) := TMP_455(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
outputlen += bytes1(cborlen).length

IRs:
TMP_456 = CONVERT cborlen to bytes1
REF_355 -> LENGTH TMP_456
outputlen(uint256) = outputlen + REF_355"];
13->14;
14[label="Node Type: NEW VARIABLE 14

EXPRESSION:
res = new bytes(outputlen)

IRs:
TMP_458 = new bytes(outputlen)
res(bytes) := TMP_458(bytes)"];
14->15;
15[label="Node Type: BEGIN_LOOP 15
"];
15->16;
16[label="Node Type: IF_LOOP 16

EXPRESSION:
bytes1(cborlen).length > ctr

IRs:
TMP_459 = CONVERT cborlen to bytes1
REF_356 -> LENGTH TMP_459
TMP_460(bool) = REF_356 > ctr
CONDITION TMP_460"];
16->17[label="True"];
16->19[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
res[ctr] = bytes1(cborlen)[ctr]

IRs:
REF_357(None) -> res[ctr]
TMP_461 = CONVERT cborlen to bytes1
REF_358(None) -> TMP_461[ctr]
REF_357(None) (->res) := REF_358(None)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
ctr ++

IRs:
TMP_462(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
18->16;
19[label="Node Type: END_LOOP 19
"];
19->22;
20[label="Node Type: BEGIN_LOOP 20
"];
20->23;
21[label="Node Type: END_LOOP 21
"];
21->46;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
22->20;
23[label="Node Type: IF_LOOP 23

EXPRESSION:
i < arrlen

IRs:
TMP_463(bool) = i < arrlen
CONDITION TMP_463"];
23->24[label="True"];
23->21[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
res[ctr] = 0x5F

IRs:
REF_359(uint256) -> res[ctr]
REF_359(uint256) (->res) := 95(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
ctr ++

IRs:
TMP_464(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
25->28;
26[label="Node Type: BEGIN_LOOP 26
"];
26->29;
27[label="Node Type: END_LOOP 27
"];
27->43;
28[label="Node Type: NEW VARIABLE 28

EXPRESSION:
x = 0

IRs:
x(uint256) := 0(uint256)"];
28->26;
29[label="Node Type: IF_LOOP 29

EXPRESSION:
x < elemArray[i].length

IRs:
REF_360(bytes) -> elemArray[i]
REF_361 -> LENGTH REF_360
TMP_465(bool) = x < REF_361
CONDITION TMP_465"];
29->30[label="True"];
29->27[label="False"];
30[label="Node Type: IF 30

EXPRESSION:
x % 23 == 0

IRs:
TMP_466(uint256) = x % 23
TMP_467(bool) = TMP_466 == 0
CONDITION TMP_467"];
30->47[label="True"];
30->39[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
elemcborlen += 0x40

IRs:
elemcborlen(uint256) = elemcborlen + 64"];
32->33;
33[label="Node Type: NEW VARIABLE 33

EXPRESSION:
lctr = ctr

IRs:
lctr(uint256) := ctr(uint256)"];
33->34;
34[label="Node Type: BEGIN_LOOP 34
"];
34->35;
35[label="Node Type: IF_LOOP 35

EXPRESSION:
bytes1(elemcborlen).length > ctr - lctr

IRs:
TMP_468 = CONVERT elemcborlen to bytes1
REF_362 -> LENGTH TMP_468
TMP_469(uint256) = ctr - lctr
TMP_470(bool) = REF_362 > TMP_469
CONDITION TMP_470"];
35->36[label="True"];
35->38[label="False"];
36[label="Node Type: EXPRESSION 36

EXPRESSION:
res[ctr] = bytes1(elemcborlen)[ctr - lctr]

IRs:
REF_363(None) -> res[ctr]
TMP_471 = CONVERT elemcborlen to bytes1
TMP_472(uint256) = ctr - lctr
REF_364(None) -> TMP_471[TMP_472]
REF_363(None) (->res) := REF_364(None)"];
36->37;
37[label="Node Type: EXPRESSION 37

EXPRESSION:
ctr ++

IRs:
TMP_473(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
37->35;
38[label="Node Type: END_LOOP 38
"];
38->39;
39[label="Node Type: END_IF 39
"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
res[ctr] = elemArray[i][x]

IRs:
REF_365(None) -> res[ctr]
REF_366(bytes) -> elemArray[i]
REF_367(None) -> REF_366[x]
REF_365(None) (->res) := REF_367(None)"];
40->41;
41[label="Node Type: EXPRESSION 41

EXPRESSION:
ctr ++

IRs:
TMP_474(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
41->42;
42[label="Node Type: EXPRESSION 42

EXPRESSION:
x ++

IRs:
TMP_475(uint256) := x(uint256)
x(uint256) = x + 1"];
42->29;
43[label="Node Type: EXPRESSION 43

EXPRESSION:
res[ctr] = 0xFF

IRs:
REF_368(uint256) -> res[ctr]
REF_368(uint256) (->res) := 255(uint256)"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
ctr ++

IRs:
TMP_476(uint256) := ctr(uint256)
ctr(uint256) = ctr + 1"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
i ++

IRs:
TMP_477(uint256) := i(uint256)
i(uint256) = i + 1"];
45->23;
46[label="Node Type: RETURN 46

EXPRESSION:
res

IRs:
RETURN res"];
47[label="Node Type: IF 47

EXPRESSION:
elemArray[i].length - x >= 24

IRs:
REF_369(bytes) -> elemArray[i]
REF_370 -> LENGTH REF_369
TMP_478(uint256) = REF_370 - x
TMP_479(bool) = TMP_478 >= 24
CONDITION TMP_479"];
47->48[label="True"];
47->49[label="False"];
48[label="Node Type: EXPRESSION 48

EXPRESSION:
elemcborlen = 23

IRs:
elemcborlen(uint256) := 23(uint256)"];
48->50;
49[label="Node Type: EXPRESSION 49

EXPRESSION:
elemcborlen = elemArray[i].length - x

IRs:
REF_371(bytes) -> elemArray[i]
REF_372 -> LENGTH REF_371
TMP_480(uint256) = REF_372 - x
elemcborlen(uint256) := TMP_480(uint256)"];
49->50;
50[label="Node Type: END_IF 50
"];
50->32;
}
// Function: 39147.sol-usingOraclize-uint2str(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
i == 0

IRs:
TMP_434(bool) = i == 0
CONDITION TMP_434"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
j = i

IRs:
j(uint256) := i(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: BEGIN_LOOP 6
"];
6->7;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
j != 0

IRs:
TMP_435(bool) = j != 0
CONDITION TMP_435"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
len ++

IRs:
TMP_436(uint256) := len(uint256)
len(uint256) = len + 1"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
j /= 10

IRs:
j(uint256) = j / 10"];
9->7;
10[label="Node Type: END_LOOP 10
"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
bstr = new bytes(len)

IRs:
TMP_438 = new bytes(len)
bstr(bytes) := TMP_438(bytes)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
k = len - 1

IRs:
TMP_439(uint256) = len - 1
k(uint256) := TMP_439(uint256)"];
12->13;
13[label="Node Type: BEGIN_LOOP 13
"];
13->14;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i != 0

IRs:
TMP_440(bool) = i != 0
CONDITION TMP_440"];
14->15[label="True"];
14->17[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
bstr[k --] = bytes1(48 + i % 10)

IRs:
TMP_441(uint256) := k(uint256)
k(uint256) = k - 1
REF_347(bytes1) -> bstr[TMP_441]
TMP_442(uint256) = i % 10
TMP_443(uint256) = 48 + TMP_442
TMP_444 = CONVERT TMP_443 to bytes1
REF_347(bytes1) (->bstr) := TMP_444(bytes1)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
i /= 10

IRs:
i(uint256) = i / 10"];
16->14;
17[label="Node Type: END_LOOP 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
string(bstr)

IRs:
TMP_445 = CONVERT bstr to string
RETURN TMP_445"];
}
// Function: 39147.sol-usingOraclize-verifySig(bytes32,bytes,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
sigr_ = new bytes(32)

IRs:
TMP_529 = new bytes(32)
sigr_(bytes) := TMP_529(bytes)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
offset = 4 + (uint256(dersig[3]) - 0x20)

IRs:
REF_403(None) -> dersig[3]
TMP_530 = CONVERT REF_403 to uint256
TMP_531(uint256) = TMP_530 - 32
TMP_532(uint256) = 4 + TMP_531
offset(uint256) := TMP_532(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
sigr_ = copyBytes(dersig,offset,32,sigr_,0)

IRs:
TMP_533(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,offset,32,sigr_,0)
sigr_(bytes) := TMP_533(bytes)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
sigs_ = new bytes(32)

IRs:
TMP_535 = new bytes(32)
sigs_(bytes) := TMP_535(bytes)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
offset += 32 + 2

IRs:
TMP_536(uint256) = 32 + 2
offset(uint256) = offset + TMP_536"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
sigs_ = copyBytes(dersig,offset + (uint256(dersig[offset - 1]) - 0x20),32,sigs_,0)

IRs:
TMP_537(uint256) = offset - 1
REF_404(None) -> dersig[TMP_537]
TMP_538 = CONVERT REF_404 to uint256
TMP_539(uint256) = TMP_538 - 32
TMP_540(uint256) = offset + TMP_539
TMP_541(bytes) = INTERNAL_CALL, usingOraclize.copyBytes(bytes,uint256,uint256,bytes,uint256)(dersig,TMP_540,32,sigs_,0)
sigs_(bytes) := TMP_541(bytes)"];
10->11;
11[label="Node Type: INLINE ASM 11
"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,27,sigr,sigs)

IRs:
TUPLE_0(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,27,sigr,sigs)
sigok(bool)= UNPACK TUPLE_0 index: 0 
signer(address)= UNPACK TUPLE_0 index: 1 "];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
address(sha3()(pubkey)) == signer

IRs:
TMP_542(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_543 = CONVERT TMP_542 to address
TMP_544(bool) = TMP_543 == signer
CONDITION TMP_544"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
(sigok,signer) = safer_ecrecover(tosignh,28,sigr,sigs)

IRs:
TUPLE_1(bool,address) = INTERNAL_CALL, usingOraclize.safer_ecrecover(bytes32,uint8,bytes32,bytes32)(tosignh,28,sigr,sigs)
sigok(bool)= UNPACK TUPLE_1 index: 0 
signer(address)= UNPACK TUPLE_1 index: 1 "];
16->17;
17[label="Node Type: RETURN 17

EXPRESSION:
(address(sha3()(pubkey)) == signer)

IRs:
TMP_545(bytes32) = SOLIDITY_CALL sha3()(pubkey)
TMP_546 = CONVERT TMP_545 to address
TMP_547(bool) = TMP_546 == signer
RETURN TMP_547"];
}
}
