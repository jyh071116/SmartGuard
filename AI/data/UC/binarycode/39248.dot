digraph G {
// Function: 39248.sol-ABCToken-ABCToken(string,string,uint8,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_initialTokensHolder] = _totalSupply

IRs:
REF_58(uint256) -> balances[_initialTokensHolder]
REF_58(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 39248.sol-ABCToken-allowance(address,address)
digraph{
}
// Function: 39248.sol-ABCToken-approve(address,uint256)
digraph{
}
// Function: 39248.sol-ABCToken-balanceOf(address)
digraph{
}
// Function: 39248.sol-ABCToken-decimals()
digraph{
}
// Function: 39248.sol-ABCToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addr = _addr

IRs:
_addr(address) := _addr(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
length > 0

IRs:
TMP_50(bool) = length > 0
CONDITION TMP_50"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 39248.sol-ABCToken-name()
digraph{
}
// Function: 39248.sol-ABCToken-symbol()
digraph{
}
// Function: 39248.sol-ABCToken-totalSupply()
digraph{
}
// Function: 39248.sol-ABCToken-transfer(address,uint256)
digraph{
}
// Function: 39248.sol-ABCToken-transfer(address,uint256,bytes)
digraph{
}
// Function: 39248.sol-ABCToken-transferFrom(address,address,uint256)
digraph{
}
// Function: 39248.sol-ABCToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_42(uint256) -> balances[msg.sender]
REF_42(-> balances) = REF_42 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_43(uint256) -> balances[_to]
REF_43(-> balances) = REF_43 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ABCToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_44(uint256) -> balances[msg.sender]
REF_44(-> balances) = REF_44 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_45(uint256) -> balances[_to]
REF_45(-> balances) = REF_45 + _value"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
reciever = ContractReceiver(_to)

IRs:
TMP_46 = CONVERT _to to ContractReceiver
reciever(ContractReceiver) := TMP_46(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reciever.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:reciever(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_from = _from

IRs:
_from(address) := _from(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_value = _value

IRs:
_value(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_data = _data

IRs:
_data(bytes) := _data(bytes)"];
}
// Function: 39248.sol-DAS-DAS(uint256,uint256,uint256,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
dasToken = new DASToken(DA$,DA$,18,1000000000 * (10 ** 18),_congressLeader)

IRs:
TMP_55(uint256) = 10 ** 18
TMP_56(uint256) = 1000000000 * TMP_55
TMP_57(DASToken) = new DASToken(DA$,DA$,18,TMP_56,_congressLeader) 
dasToken(DASToken) := TMP_57(DASToken)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
abcToken = new ABCToken(Alphabit,ABC,18,210000000 * (10 ** 18),_congressLeader)

IRs:
TMP_59(uint256) = 10 ** 18
TMP_60(uint256) = 210000000 * TMP_59
TMP_61(ABCToken) = new ABCToken(Alphabit,ABC,18,TMP_60,_congressLeader) 
abcToken(ABCToken) := TMP_61(ABCToken)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
congressMemberThreshold = _congressMemberThreshold

IRs:
congressMemberThreshold(uint256) := _congressMemberThreshold(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
minimumQuorum = _minimumQuorum

IRs:
minimumQuorum(uint256) := _minimumQuorum(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
debatingPeriod = _debatingPeriod

IRs:
debatingPeriod(uint256) := _debatingPeriod(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
marginForMajority = _marginForMajority

IRs:
marginForMajority(uint256) := _marginForMajority(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
RulesChangedEvent(congressMemberThreshold,minimumQuorum,debatingPeriod,marginForMajority)

IRs:
Emit RulesChangedEvent(congressMemberThreshold,minimumQuorum,debatingPeriod,marginForMajority)"];
}
// Function: 39248.sol-DAS-blockTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokensLocks[_voter] + 1 < tokensLocks[_voter]

IRs:
REF_59(uint32) -> tokensLocks[_voter]
TMP_64(uint32) = REF_59 + 1
REF_60(uint32) -> tokensLocks[_voter]
TMP_65(bool) = TMP_64 < REF_60
CONDITION TMP_65"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokensLocks[_voter] += 1

IRs:
REF_61(uint32) -> tokensLocks[_voter]
REF_61(-> tokensLocks) = REF_61 + 1"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
tokensLocks[_voter] == 1

IRs:
REF_62(uint32) -> tokensLocks[_voter]
TMP_66(bool) = REF_62 == 1
CONDITION TMP_66"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dasToken.blockAccount(_voter)

IRs:
HIGH_LEVEL_CALL, dest:dasToken(DASToken), function:blockAccount, arguments:['_voter']  "];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 39248.sol-DAS-createProposal(address,uint256,string,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_proposalID = proposals.length

IRs:
REF_68 -> LENGTH proposals
_proposalID(uint256) := REF_68(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
proposals.length += 1

IRs:
REF_69 -> LENGTH proposals
REF_69(-> proposals) = REF_69 + 1"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
proposalsNumber = _proposalID + 1

IRs:
TMP_71(uint256) = _proposalID + 1
proposalsNumber(uint256) := TMP_71(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
proposals[_proposalID].beneficiary = _beneficiary

IRs:
REF_70(DAS.Proposal) -> proposals[_proposalID]
REF_71(address) -> REF_70.beneficiary
REF_71(address) (->proposals) := _beneficiary(address)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
proposals[_proposalID].etherAmount = _etherAmount

IRs:
REF_72(DAS.Proposal) -> proposals[_proposalID]
REF_73(uint256) -> REF_72.etherAmount
REF_73(uint256) (->proposals) := _etherAmount(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
proposals[_proposalID].description = _description

IRs:
REF_74(DAS.Proposal) -> proposals[_proposalID]
REF_75(string) -> REF_74.description
REF_75(string) (->proposals) := _description(string)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
proposals[_proposalID].proposalHash = getProposalHash(_beneficiary,_etherAmount,_transactionBytecode)

IRs:
REF_76(DAS.Proposal) -> proposals[_proposalID]
REF_77(bytes32) -> REF_76.proposalHash
TMP_72(bytes32) = INTERNAL_CALL, DAS.getProposalHash(address,uint256,bytes)(_beneficiary,_etherAmount,_transactionBytecode)
REF_77(bytes32) (->proposals) := TMP_72(bytes32)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
proposals[_proposalID].state = ProposalState.Proposed

IRs:
REF_78(DAS.Proposal) -> proposals[_proposalID]
REF_79(DAS.ProposalState) -> REF_78.state
REF_80(DAS.ProposalState) -> ProposalState.Proposed
REF_79(DAS.ProposalState) (->proposals) := REF_80(DAS.ProposalState)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
proposals[_proposalID].votingDeadline = now + debatingPeriod * 1

IRs:
REF_81(DAS.Proposal) -> proposals[_proposalID]
REF_82(uint256) -> REF_81.votingDeadline
TMP_73(uint256) = debatingPeriod * 1
TMP_74(uint256) = now + TMP_73
REF_82(uint256) (->proposals) := TMP_74(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
proposals[_proposalID].votesNumber = 0

IRs:
REF_83(DAS.Proposal) -> proposals[_proposalID]
REF_84(uint256) -> REF_83.votesNumber
REF_84(uint256) (->proposals) := 0(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
ProposalAddedEvent(_proposalID,_beneficiary,_etherAmount,_description)

IRs:
Emit ProposalAddedEvent(_proposalID,_beneficiary,_etherAmount,_description)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
_proposalID

IRs:
RETURN _proposalID"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
onlyCongressMembers()

IRs:
MODIFIER_CALL, DAS.onlyCongressMembers()()"];
13->1;
14[label="Node Type: RETURN 14

EXPRESSION:
_proposalID

IRs:
RETURN _proposalID"];
}
// Function: 39248.sol-DAS-executeProposal(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[_proposalID]

IRs:
REF_122(DAS.Proposal) -> proposals[_proposalID]
p(DAS.Proposal) := REF_122(DAS.Proposal)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
p.state != ProposalState.Passed

IRs:
REF_123(DAS.ProposalState) -> p.state
REF_124(DAS.ProposalState) -> ProposalState.Passed
TMP_100(bool) = REF_123 != REF_124
CONDITION TMP_100"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
p.state = ProposalState.Executed

IRs:
REF_125(DAS.ProposalState) -> p.state
REF_126(DAS.ProposalState) -> ProposalState.Executed
REF_125(DAS.ProposalState) (->p) := REF_126(DAS.ProposalState)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! p.beneficiary.call.value(p.etherAmount * 1000000000000000000)(_transactionBytecode)

IRs:
REF_127(address) -> p.beneficiary
REF_130(uint256) -> p.etherAmount
TMP_101(uint256) = REF_130 * 1000000000000000000
TMP_103(bool) = LOW_LEVEL_CALL, dest:REF_127, function:call, arguments:['_transactionBytecode'] value:TMP_101 
TMP_104 = UnaryType.BANG TMP_103 
CONDITION TMP_104"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: THROW 7
"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ProposalExecutedEvent(_proposalID)

IRs:
Emit ProposalExecutedEvent(_proposalID)"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyCongressMembers()

IRs:
MODIFIER_CALL, DAS.onlyCongressMembers()()"];
10->1;
}
// Function: 39248.sol-DAS-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 39248.sol-DAS-finishProposalVoting(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->34;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[_proposalID]

IRs:
REF_98(DAS.Proposal) -> proposals[_proposalID]
p(DAS.Proposal) := REF_98(DAS.Proposal)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now < p.votingDeadline

IRs:
REF_99(uint256) -> p.votingDeadline
TMP_87(bool) = now < REF_99
CONDITION TMP_87"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
p.state != ProposalState.Proposed

IRs:
REF_100(DAS.ProposalState) -> p.state
REF_101(DAS.ProposalState) -> ProposalState.Proposed
TMP_88(bool) = REF_100 != REF_101
CONDITION TMP_88"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_votesNumber = p.votes.length

IRs:
REF_102(DAS.Vote[]) -> p.votes
REF_103 -> LENGTH REF_102
_votesNumber(uint256) := REF_103(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
tokensFor = 0

IRs:
tokensFor(uint256) := 0(uint256)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
tokensAgainst = 0

IRs:
tokensAgainst(uint256) := 0(uint256)"];
10->13;
11[label="Node Type: BEGIN_LOOP 11
"];
11->14;
12[label="Node Type: END_LOOP 12
"];
12->21;
13[label="Node Type: NEW VARIABLE 13

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
13->11;
14[label="Node Type: IF_LOOP 14

EXPRESSION:
i < _votesNumber

IRs:
TMP_89(bool) = i < _votesNumber
CONDITION TMP_89"];
14->15[label="True"];
14->12[label="False"];
15[label="Node Type: IF 15

EXPRESSION:
p.votes[i].inSupport

IRs:
REF_104(DAS.Vote[]) -> p.votes
REF_105(DAS.Vote) -> REF_104[i]
REF_106(bool) -> REF_105.inSupport
CONDITION REF_106"];
15->16[label="True"];
15->17[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
tokensFor += p.votes[i].voterTokens

IRs:
REF_107(DAS.Vote[]) -> p.votes
REF_108(DAS.Vote) -> REF_107[i]
REF_109(uint256) -> REF_108.voterTokens
tokensFor(uint256) = tokensFor + REF_109"];
16->18;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
tokensAgainst += p.votes[i].voterTokens

IRs:
REF_110(DAS.Vote[]) -> p.votes
REF_111(DAS.Vote) -> REF_110[i]
REF_112(uint256) -> REF_111.voterTokens
tokensAgainst(uint256) = tokensAgainst + REF_112"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
unblockTokens(p.votes[i].voter)

IRs:
REF_113(DAS.Vote[]) -> p.votes
REF_114(DAS.Vote) -> REF_113[i]
REF_115(address) -> REF_114.voter
INTERNAL_CALL, DAS.unblockTokens(address)(REF_115)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
i ++

IRs:
TMP_91(uint256) := i(uint256)
i(uint256) = i + 1"];
20->14;
21[label="Node Type: IF 21

EXPRESSION:
(tokensFor + tokensAgainst) < minimumQuorum

IRs:
TMP_92(uint256) = tokensFor + tokensAgainst
TMP_93(bool) = TMP_92 < minimumQuorum
CONDITION TMP_93"];
21->22[label="True"];
21->25[label="False"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
p.state = ProposalState.NoQuorum

IRs:
REF_116(DAS.ProposalState) -> p.state
REF_117(DAS.ProposalState) -> ProposalState.NoQuorum
REF_116(DAS.ProposalState) (->p) := REF_117(DAS.ProposalState)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
ProposalTalliedEvent(_proposalID,false,false)

IRs:
Emit ProposalTalliedEvent(_proposalID,False,False)"];
23->24;
24[label="Node Type: RETURN 24
"];
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
(tokensFor - tokensAgainst) < marginForMajority

IRs:
TMP_95(uint256) = tokensFor - tokensAgainst
TMP_96(bool) = TMP_95 < marginForMajority
CONDITION TMP_96"];
26->27[label="True"];
26->30[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
p.state = ProposalState.Rejected

IRs:
REF_118(DAS.ProposalState) -> p.state
REF_119(DAS.ProposalState) -> ProposalState.Rejected
REF_118(DAS.ProposalState) (->p) := REF_119(DAS.ProposalState)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
ProposalTalliedEvent(_proposalID,true,false)

IRs:
Emit ProposalTalliedEvent(_proposalID,True,False)"];
28->29;
29[label="Node Type: RETURN 29
"];
30[label="Node Type: END_IF 30
"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
p.state = ProposalState.Passed

IRs:
REF_120(DAS.ProposalState) -> p.state
REF_121(DAS.ProposalState) -> ProposalState.Passed
REF_120(DAS.ProposalState) (->p) := REF_121(DAS.ProposalState)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
ProposalTalliedEvent(_proposalID,true,true)

IRs:
Emit ProposalTalliedEvent(_proposalID,True,True)"];
32->33;
33[label="Node Type: RETURN 33
"];
34[label="Node Type: EXPRESSION 34

EXPRESSION:
onlyCongressMembers()

IRs:
MODIFIER_CALL, DAS.onlyCongressMembers()()"];
34->1;
}
// Function: 39248.sol-DAS-getProposalHash(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
sha3()(_beneficiary,_etherAmount,_transactionBytecode)

IRs:
TMP_63(bytes32) = SOLIDITY_CALL sha3()(_beneficiary,_etherAmount,_transactionBytecode)
RETURN TMP_63"];
}
// Function: 39248.sol-DAS-onlyCongressMembers()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
dasToken.balanceOf(msg.sender) < congressMemberThreshold

IRs:
TMP_107(uint256) = HIGH_LEVEL_CALL, dest:dasToken(DASToken), function:balanceOf, arguments:['msg.sender']  
TMP_108(bool) = TMP_107 < congressMemberThreshold
CONDITION TMP_108"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39248.sol-DAS-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Decentralized Autonomous State

IRs:
name(string) := Decentralized Autonomous State(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
proposalsNumber = 0

IRs:
proposalsNumber(uint256) := 0(uint256)"];
}
// Function: 39248.sol-DAS-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_from = _from

IRs:
_from(address) := _from(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_value = _value

IRs:
_value(uint256) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_data = _data

IRs:
_data(bytes) := _data(bytes)"];
}
// Function: 39248.sol-DAS-unblockTokens(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tokensLocks[_voter] <= 0

IRs:
REF_64(uint32) -> tokensLocks[_voter]
TMP_68(bool) = REF_64 <= 0
CONDITION TMP_68"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tokensLocks[_voter] -= 1

IRs:
REF_65(uint32) -> tokensLocks[_voter]
REF_65(-> tokensLocks) = REF_65 - 1"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
tokensLocks[_voter] == 0

IRs:
REF_66(uint32) -> tokensLocks[_voter]
TMP_69(bool) = REF_66 == 0
CONDITION TMP_69"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
dasToken.unblockAccount(_voter)

IRs:
HIGH_LEVEL_CALL, dest:dasToken(DASToken), function:unblockAccount, arguments:['_voter']  "];
6->7;
7[label="Node Type: END_IF 7
"];
}
// Function: 39248.sol-DAS-vote(uint256,bool,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
p = proposals[_proposalID]

IRs:
REF_85(DAS.Proposal) -> proposals[_proposalID]
p(DAS.Proposal) := REF_85(DAS.Proposal)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
p.state != ProposalState.Proposed

IRs:
REF_86(DAS.ProposalState) -> p.state
REF_87(DAS.ProposalState) -> ProposalState.Proposed
TMP_77(bool) = REF_86 != REF_87
CONDITION TMP_77"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
p.voted[msg.sender] == true

IRs:
REF_88(mapping(address => bool)) -> p.voted
REF_89(bool) -> REF_88[msg.sender]
TMP_78(bool) = REF_89 == True
CONDITION TMP_78"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: THROW 6
"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
voterTokens = dasToken.balanceOf(msg.sender)

IRs:
TMP_79(uint256) = HIGH_LEVEL_CALL, dest:dasToken(DASToken), function:balanceOf, arguments:['msg.sender']  
voterTokens(uint256) := TMP_79(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
blockTokens(msg.sender)

IRs:
INTERNAL_CALL, DAS.blockTokens(address)(msg.sender)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
p.voted[msg.sender] = true

IRs:
REF_91(mapping(address => bool)) -> p.voted
REF_92(bool) -> REF_91[msg.sender]
REF_92(bool) (->p) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
p.votes.push(Vote(msg.sender,_inSupport,voterTokens,_justificationText))

IRs:
REF_93(DAS.Vote[]) -> p.votes
TMP_81(DAS.Vote) = new Vote(msg.sender,_inSupport,voterTokens,_justificationText)
REF_95 -> LENGTH REF_93
TMP_83(uint256) := REF_95(uint256)
TMP_84(uint256) = TMP_83 + 1
REF_95(uint256) (->p) := TMP_84(uint256)
REF_96(DAS.Vote) -> REF_93[TMP_83]
REF_96(DAS.Vote) (->p) := TMP_81(DAS.Vote)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
p.votesNumber += 1

IRs:
REF_97(uint256) -> p.votesNumber
REF_97(-> p) = REF_97 + 1"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
VotedEvent(_proposalID,msg.sender,_inSupport,voterTokens,_justificationText)

IRs:
Emit VotedEvent(_proposalID,msg.sender,_inSupport,voterTokens,_justificationText)"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyCongressMembers()

IRs:
MODIFIER_CALL, DAS.onlyCongressMembers()()"];
14->1;
}
// Function: 39248.sol-DASToken-DASToken(string,string,uint8,uint256,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
secretaryGeneral = msg.sender

IRs:
secretaryGeneral(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
symbol = _symbol

IRs:
symbol(string) := _symbol(string)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
decimals = _decimals

IRs:
decimals(uint8) := _decimals(uint8)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
totalSupply = _totalSupply

IRs:
totalSupply(uint256) := _totalSupply(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_initialTokensHolder] = _totalSupply

IRs:
REF_32(uint256) -> balances[_initialTokensHolder]
REF_32(uint256) (->balances) := _totalSupply(uint256)"];
}
// Function: 39248.sol-DASToken-allowance(address,address)
digraph{
}
// Function: 39248.sol-DASToken-approve(address,uint256)
digraph{
}
// Function: 39248.sol-DASToken-balanceOf(address)
digraph{
}
// Function: 39248.sol-DASToken-blockAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blockedAccounts[_account] = true

IRs:
REF_33(bool) -> blockedAccounts[_account]
REF_33(bool) (->blockedAccounts) := True(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlySecretaryGeneral()

IRs:
MODIFIER_CALL, DASToken.onlySecretaryGeneral()()"];
2->1;
}
// Function: 39248.sol-DASToken-decimals()
digraph{
}
// Function: 39248.sol-DASToken-isAccountBlocked(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
blockedAccounts[_account]

IRs:
REF_35(bool) -> blockedAccounts[_account]
RETURN REF_35"];
}
// Function: 39248.sol-DASToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addr = _addr

IRs:
_addr(address) := _addr(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
length > 0

IRs:
TMP_28(bool) = length > 0
CONDITION TMP_28"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 39248.sol-DASToken-name()
digraph{
}
// Function: 39248.sol-DASToken-onlySecretaryGeneral()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender != secretaryGeneral

IRs:
TMP_37(bool) = msg.sender != secretaryGeneral
CONDITION TMP_37"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: _ 4
"];
}
// Function: 39248.sol-DASToken-symbol()
digraph{
}
// Function: 39248.sol-DASToken-totalSupply()
digraph{
}
// Function: 39248.sol-DASToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
blockedAccounts[msg.sender]

IRs:
REF_38(bool) -> blockedAccounts[msg.sender]
CONDITION REF_38"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
ERC23Token.transfer(_to,_value,empty)

IRs:
TMP_35(bool) = INTERNAL_CALL, ERC23Token.transfer(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_35"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-DASToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
blockedAccounts[msg.sender]

IRs:
REF_36(bool) -> blockedAccounts[msg.sender]
CONDITION REF_36"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
ERC23Token.transfer(_to,_value,_data)

IRs:
TMP_34(bool) = INTERNAL_CALL, ERC23Token.transfer(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_34"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-DASToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
blockedAccounts[_from]

IRs:
REF_40(bool) -> blockedAccounts[_from]
CONDITION REF_40"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
ERC23Token.transferFrom(_from,_to,_value)

IRs:
TMP_36(bool) = INTERNAL_CALL, ERC23Token.transferFrom(address,address,uint256)(_from,_to,_value)
RETURN TMP_36"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-DASToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_16(uint256) -> balances[msg.sender]
REF_16(-> balances) = REF_16 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_17(uint256) -> balances[_to]
REF_17(-> balances) = REF_17 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-DASToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_18(uint256) -> balances[msg.sender]
REF_18(-> balances) = REF_18 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_19(uint256) -> balances[_to]
REF_19(-> balances) = REF_19 + _value"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
reciever = ContractReceiver(_to)

IRs:
TMP_24 = CONVERT _to to ContractReceiver
reciever(ContractReceiver) := TMP_24(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reciever.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:reciever(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-DASToken-unblockAccount(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
blockedAccounts[_account] = false

IRs:
REF_34(bool) -> blockedAccounts[_account]
REF_34(bool) (->blockedAccounts) := False(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlySecretaryGeneral()

IRs:
MODIFIER_CALL, DASToken.onlySecretaryGeneral()()"];
2->1;
}
// Function: 39248.sol-ERC23-allowance(address,address)
digraph{
}
// Function: 39248.sol-ERC23-approve(address,uint256)
digraph{
}
// Function: 39248.sol-ERC23-balanceOf(address)
digraph{
}
// Function: 39248.sol-ERC23-decimals()
digraph{
}
// Function: 39248.sol-ERC23-name()
digraph{
}
// Function: 39248.sol-ERC23-symbol()
digraph{
}
// Function: 39248.sol-ERC23-totalSupply()
digraph{
}
// Function: 39248.sol-ERC23-transfer(address,uint256)
digraph{
}
// Function: 39248.sol-ERC23-transfer(address,uint256,bytes)
digraph{
}
// Function: 39248.sol-ERC23-transferFrom(address,address,uint256)
digraph{
}
// Function: 39248.sol-ERC23Token-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_14(mapping(address => uint256)) -> allowed[_owner]
REF_15(uint256) -> REF_14[_spender]
RETURN REF_15"];
2[label="Node Type: RETURN 2

EXPRESSION:
remaining

IRs:
RETURN remaining"];
}
// Function: 39248.sol-ERC23Token-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_12(mapping(address => uint256)) -> allowed[msg.sender]
REF_13(uint256) -> REF_12[_spender]
REF_13(uint256) (->allowed) := _value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: RETURN 4

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ERC23Token-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_11(uint256) -> balances[_owner]
RETURN REF_11"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 39248.sol-ERC23Token-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 39248.sol-ERC23Token-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_addr = _addr

IRs:
_addr(address) := _addr(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
length > 0

IRs:
TMP_12(bool) = length > 0
CONDITION TMP_12"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
false

IRs:
RETURN False"];
9[label="Node Type: RETURN 9

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 39248.sol-ERC23Token-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 39248.sol-ERC23Token-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 39248.sol-ERC23Token-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 39248.sol-ERC23Token-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_3(bool) = INTERNAL_CALL, ERC23Token.isContract(address)(_to)
CONDITION TMP_3"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_4(bool) = INTERNAL_CALL, ERC23Token.transferToContract(address,uint256,bytes)(_to,_value,empty)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_5(bool) = INTERNAL_CALL, ERC23Token.transferToAddress(address,uint256,bytes)(_to,_value,empty)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ERC23Token-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_0(bool) = INTERNAL_CALL, ERC23Token.isContract(address)(_to)
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_1(bool) = INTERNAL_CALL, ERC23Token.transferToContract(address,uint256,bytes)(_to,_value,_data)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_2(bool) = INTERNAL_CALL, ERC23Token.transferToAddress(address,uint256,bytes)(_to,_value,_data)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ERC23Token-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_allowance = allowed[_from][msg.sender]

IRs:
REF_5(mapping(address => uint256)) -> allowed[_from]
REF_6(uint256) -> REF_5[msg.sender]
_allowance(uint256) := REF_6(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_value > _allowance

IRs:
TMP_13(bool) = _value > _allowance
CONDITION TMP_13"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: THROW 3
"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] += _value

IRs:
REF_7(uint256) -> balances[_to]
REF_7(-> balances) = REF_7 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[_from] -= _value

IRs:
REF_8(uint256) -> balances[_from]
REF_8(-> balances) = REF_8 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_9(mapping(address => uint256)) -> allowed[_from]
REF_10(uint256) -> REF_9[msg.sender]
REF_10(-> allowed) = REF_10 - _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ERC23Token-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(-> balances) = REF_0 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_1(uint256) -> balances[_to]
REF_1(-> balances) = REF_1 + _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 39248.sol-ERC23Token-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_2(uint256) -> balances[msg.sender]
REF_2(-> balances) = REF_2 - _value"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_to] += _value

IRs:
REF_3(uint256) -> balances[_to]
REF_3(-> balances) = REF_3 + _value"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
reciever = ContractReceiver(_to)

IRs:
TMP_8 = CONVERT _to to ContractReceiver
reciever(ContractReceiver) := TMP_8(ContractReceiver)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
reciever.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:reciever(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
}
