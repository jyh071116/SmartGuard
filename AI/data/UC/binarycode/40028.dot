digraph G {
// Function: 40028.sol-AssetMin-__transferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_isHuman()

IRs:
TMP_35(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_35"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
multiAsset.proxyTransferToICAPWithReference(_icap,_value,_reference)

IRs:
TMP_36(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxyTransferToICAPWithReference, arguments:['_icap', '_value', '_reference']  
RETURN TMP_36"];
4[label="Node Type: RETURN 4

EXPRESSION:
multiAsset.transferFromToICAPWithReference(msg.sender,_icap,_value,_reference)

IRs:
TMP_37(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transferFromToICAPWithReference, arguments:['msg.sender', '_icap', '_value', '_reference']  
RETURN TMP_37"];
}
// Function: 40028.sol-AssetMin-__transferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_isHuman()

IRs:
TMP_30(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_30"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
multiAsset.proxyTransferWithReference(_to,_value,symbol,_reference)

IRs:
TMP_31(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxyTransferWithReference, arguments:['_to', '_value', 'symbol', '_reference']  
RETURN TMP_31"];
4[label="Node Type: RETURN 4

EXPRESSION:
multiAsset.transferFromWithReference(msg.sender,_to,_value,symbol,_reference)

IRs:
TMP_32(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transferFromWithReference, arguments:['msg.sender', '_to', '_value', 'symbol', '_reference']  
RETURN TMP_32"];
}
// Function: 40028.sol-AssetMin-_isContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender != tx.origin

IRs:
TMP_15(bool) = msg.sender != tx.origin
RETURN TMP_15"];
}
// Function: 40028.sol-AssetMin-_isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! _isContract()

IRs:
TMP_16(bool) = INTERNAL_CALL, SafeMin._isContract()()
TMP_17 = UnaryType.BANG TMP_16 
RETURN TMP_17"];
}
// Function: 40028.sol-AssetMin-_safeFalse()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeSend(msg.sender,msg.value)

IRs:
INTERNAL_CALL, SafeMin._safeSend(address,uint256)(msg.sender,msg.value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 40028.sol-AssetMin-_safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _unsafeSend(_to,_value)

IRs:
TMP_11(bool) = INTERNAL_CALL, SafeMin._unsafeSend(address,uint256)(_to,_value)
TMP_12 = UnaryType.BANG TMP_11 
CONDITION TMP_12"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-AssetMin-_unsafeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value)()

IRs:
TMP_14(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:[] value:_value 
RETURN TMP_14"];
}
// Function: 40028.sol-AssetMin-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.allowance(_from,_spender,symbol)

IRs:
TMP_27(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:allowance, arguments:['_from', '_spender', 'symbol']  
RETURN TMP_27"];
}
// Function: 40028.sol-AssetMin-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.proxyApprove(_spender,_value,symbol)

IRs:
TMP_38(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxyApprove, arguments:['_spender', '_value', 'symbol']  
RETURN TMP_38"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHuman()

IRs:
MODIFIER_CALL, SafeMin.onlyHuman()()"];
2->1;
}
// Function: 40028.sol-AssetMin-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.balanceOf(_owner,symbol)

IRs:
TMP_26(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:balanceOf, arguments:['_owner', 'symbol']  
RETURN TMP_26"];
}
// Function: 40028.sol-AssetMin-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.baseUnit(symbol)

IRs:
TMP_49(uint8) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:baseUnit, arguments:['symbol']  
RETURN TMP_49"];
}
// Function: 40028.sol-AssetMin-emitApprove(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Approve(_from,_spender,_value)

IRs:
Emit Approve(_from,_spender,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMultiAsset()

IRs:
MODIFIER_CALL, AssetMin.onlyMultiAsset()()"];
2->1;
}
// Function: 40028.sol-AssetMin-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMultiAsset()

IRs:
MODIFIER_CALL, AssetMin.onlyMultiAsset()()"];
2->1;
}
// Function: 40028.sol-AssetMin-immutable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_address == 0

IRs:
TMP_51(bool) = _address == 0
CONDITION TMP_51"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-AssetMin-init(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ma = MultiAsset(_multiAsset)

IRs:
TMP_18 = CONVERT _multiAsset to MultiAsset
ma(MultiAsset) := TMP_18(MultiAsset)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! ma.isCreated(_symbol)

IRs:
TMP_19(bool) = HIGH_LEVEL_CALL, dest:ma(MultiAsset), function:isCreated, arguments:['_symbol']  
TMP_20 = UnaryType.BANG TMP_19 
CONDITION TMP_20"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
multiAsset = ma

IRs:
multiAsset(MultiAsset) := ma(MultiAsset)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
symbol = _symbol

IRs:
symbol(bytes32) := _symbol(bytes32)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
immutable(address(multiAsset))

IRs:
TMP_21 = CONVERT multiAsset to address
MODIFIER_CALL, SafeMin.immutable(address)(TMP_21)"];
8->1;
}
// Function: 40028.sol-AssetMin-onlyHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_isHuman()

IRs:
TMP_50(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_50"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-AssetMin-onlyMultiAsset()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == address(multiAsset)

IRs:
TMP_52 = CONVERT multiAsset to address
TMP_53(bool) = msg.sender == TMP_52
CONDITION TMP_53"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-AssetMin-sendToOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = multiAsset.owner(symbol)

IRs:
TMP_46(address) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:owner, arguments:['symbol']  
owner(address) := TMP_46(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
multiAsset.transfer(owner,balanceOf(owner),symbol)

IRs:
TMP_47(uint256) = INTERNAL_CALL, AssetMin.balanceOf(address)(owner)
TMP_48(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transfer, arguments:['owner', 'TMP_47', 'symbol']  
RETURN TMP_48"];
}
// Function: 40028.sol-AssetMin-setCosignerAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.proxySetCosignerAddress(_cosigner,symbol)

IRs:
TMP_40(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxySetCosignerAddress, arguments:['_cosigner', 'symbol']  
RETURN TMP_40"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyHuman()

IRs:
MODIFIER_CALL, SafeMin.onlyHuman()()"];
2->1;
}
// Function: 40028.sol-AssetMin-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bytes(name).length != 0

IRs:
TMP_23 = CONVERT name to bytes
REF_5 -> LENGTH TMP_23
TMP_24(bool) = REF_5 != 0
CONDITION TMP_24"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 40028.sol-AssetMin-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.totalSupply(symbol)

IRs:
TMP_25(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:totalSupply, arguments:['symbol']  
RETURN TMP_25"];
}
// Function: 40028.sol-AssetMin-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
__transferWithReference(_to,_value,)

IRs:
TMP_28(bool) = INTERNAL_CALL, AssetMin.__transferWithReference(address,uint256,string)(_to,_value,)
RETURN TMP_28"];
}
// Function: 40028.sol-AssetMin-transferToICAP(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
__transferToICAPWithReference(_icap,_value,)

IRs:
TMP_33(bool) = INTERNAL_CALL, AssetMin.__transferToICAPWithReference(bytes32,uint256,string)(_icap,_value,)
RETURN TMP_33"];
}
// Function: 40028.sol-AssetMin-transferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
__transferToICAPWithReference(_icap,_value,_reference)

IRs:
TMP_34(bool) = INTERNAL_CALL, AssetMin.__transferToICAPWithReference(bytes32,uint256,string)(_icap,_value,_reference)
RETURN TMP_34"];
}
// Function: 40028.sol-AssetMin-transferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
__transferWithReference(_to,_value,_reference)

IRs:
TMP_29(bool) = INTERNAL_CALL, AssetMin.__transferWithReference(address,uint256,string)(_to,_value,_reference)
RETURN TMP_29"];
}
// Function: 40028.sol-EtherTreasuryInterface-withdraw(address,uint256)
digraph{
}
// Function: 40028.sol-EtherTreasuryInterface-withdrawWithReference(address,uint256,string)
digraph{
}
// Function: 40028.sol-GMT-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 40028.sol-GMT-__transferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_isHuman()

IRs:
TMP_72(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_72"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
multiAsset.proxyTransferToICAPWithReference(_icap,_value,_reference)

IRs:
TMP_73(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxyTransferToICAPWithReference, arguments:['_icap', '_value', '_reference']  
RETURN TMP_73"];
4[label="Node Type: RETURN 4

EXPRESSION:
multiAsset.transferFromToICAPWithReference(msg.sender,_icap,_value,_reference)

IRs:
TMP_74(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transferFromToICAPWithReference, arguments:['msg.sender', '_icap', '_value', '_reference']  
RETURN TMP_74"];
}
// Function: 40028.sol-GMT-__transferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
2[label="Node Type: IF 2

EXPRESSION:
_isHuman()

IRs:
TMP_67(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_67"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
multiAsset.proxyTransferWithReference(_to,_value,symbol,_reference)

IRs:
TMP_68(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:proxyTransferWithReference, arguments:['_to', '_value', 'symbol', '_reference']  
RETURN TMP_68"];
4[label="Node Type: RETURN 4

EXPRESSION:
multiAsset.transferFromWithReference(msg.sender,_to,_value,symbol,_reference)

IRs:
TMP_69(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transferFromWithReference, arguments:['msg.sender', '_to', '_value', 'symbol', '_reference']  
RETURN TMP_69"];
}
// Function: 40028.sol-GMT-_applyRefund(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
tx.gasprice > txGasPriceLimit

IRs:
TMP_114(bool) = tx.gasprice > txGasPriceLimit
CONDITION TMP_114"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
refund = (_startGas - msg.gas + refundGas) * tx.gasprice

IRs:
TMP_115(uint256) = _startGas - msg.gas
TMP_116(uint256) = TMP_115 + refundGas
TMP_117(uint256) = TMP_116 * tx.gasprice
refund(uint256) := TMP_117(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
_refund(refund)

IRs:
TMP_118(bool) = INTERNAL_CALL, GMT._refund(uint256)(refund)
RETURN TMP_118"];
}
// Function: 40028.sol-GMT-_approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + approveCallGas

IRs:
TMP_143(uint256) = msg.gas + approveCallGas
startGas(uint256) := TMP_143(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.approve(_spender,_value)

IRs:
TMP_144(bool) = INTERNAL_CALL, AssetMin.approve(address,uint256)(_spender,_value)
TMP_145 = UnaryType.BANG TMP_144 
CONDITION TMP_145"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_146(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_146"];
}
// Function: 40028.sol-GMT-_forward(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + forwardCallGas + (_data.length * 50)

IRs:
TMP_152(uint256) = msg.gas + forwardCallGas
REF_42 -> LENGTH _data
TMP_153(uint256) = REF_42 * 50
TMP_154(uint256) = TMP_152 + TMP_153
startGas(uint256) := TMP_154(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_to == 0x0

IRs:
TMP_155(bool) = _to == 0
CONDITION TMP_155"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,_safeFalse())

IRs:
TMP_156(bool) = INTERNAL_CALL, SafeMin._safeFalse()()
RETURN False,TMP_156"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
! _to.call.value(msg.value)(_data)

IRs:
TMP_158(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['_data'] value:msg.value 
TMP_159 = UnaryType.BANG TMP_158 
CONDITION TMP_159"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
(false,_safeFalse())

IRs:
TMP_160(bool) = INTERNAL_CALL, SafeMin._safeFalse()()
RETURN False,TMP_160"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_161(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_161"];
}
// Function: 40028.sol-GMT-_isContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender != tx.origin

IRs:
TMP_92(bool) = msg.sender != tx.origin
RETURN TMP_92"];
}
// Function: 40028.sol-GMT-_isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! _isContract()

IRs:
TMP_93(bool) = INTERNAL_CALL, SafeMin._isContract()()
TMP_94 = UnaryType.BANG TMP_93 
RETURN TMP_94"];
}
// Function: 40028.sol-GMT-_refund(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(treasury) != 0 && treasury.withdraw(tx.origin,_value)

IRs:
TMP_119 = CONVERT treasury to address
TMP_120(bool) = TMP_119 != 0
TMP_121(bool) = HIGH_LEVEL_CALL, dest:treasury(EtherTreasuryInterface), function:withdraw, arguments:['tx.origin', '_value']  
TMP_122(bool) = TMP_120 && TMP_121
RETURN TMP_122"];
}
// Function: 40028.sol-GMT-_safeFalse()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeSend(msg.sender,msg.value)

IRs:
INTERNAL_CALL, SafeMin._safeSend(address,uint256)(msg.sender,msg.value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 40028.sol-GMT-_safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _unsafeSend(_to,_value)

IRs:
TMP_88(bool) = INTERNAL_CALL, SafeMin._unsafeSend(address,uint256)(_to,_value)
TMP_89 = UnaryType.BANG TMP_88 
CONDITION TMP_89"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-GMT-_setCosignerAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + setCosignerCallGas

IRs:
TMP_147(uint256) = msg.gas + setCosignerCallGas
startGas(uint256) := TMP_147(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.setCosignerAddress(_cosigner)

IRs:
TMP_148(bool) = INTERNAL_CALL, AssetMin.setCosignerAddress(address)(_cosigner)
TMP_149 = UnaryType.BANG TMP_148 
CONDITION TMP_149"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_150(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_150"];
}
// Function: 40028.sol-GMT-_stringGas(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
bytes(_string).length * 75

IRs:
TMP_112 = CONVERT _string to bytes
REF_35 -> LENGTH TMP_112
TMP_113(uint256) = REF_35 * 75
RETURN TMP_113"];
}
// Function: 40028.sol-GMT-_transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + transferCallGas

IRs:
TMP_123(uint256) = msg.gas + transferCallGas
startGas(uint256) := TMP_123(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.transfer(_to,_value)

IRs:
TMP_124(bool) = INTERNAL_CALL, AssetMin.transfer(address,uint256)(_to,_value)
TMP_125 = UnaryType.BANG TMP_124 
CONDITION TMP_125"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_126(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_126"];
}
// Function: 40028.sol-GMT-_transferToICAP(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + transferToICAPCallGas

IRs:
TMP_127(uint256) = msg.gas + transferToICAPCallGas
startGas(uint256) := TMP_127(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.transferToICAP(_icap,_value)

IRs:
TMP_128(bool) = INTERNAL_CALL, AssetMin.transferToICAP(bytes32,uint256)(_icap,_value)
TMP_129 = UnaryType.BANG TMP_128 
CONDITION TMP_129"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_130(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_130"];
}
// Function: 40028.sol-GMT-_transferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + transferToICAPWithReferenceCallGas + _stringGas(_reference)

IRs:
TMP_137(uint256) = msg.gas + transferToICAPWithReferenceCallGas
TMP_138(uint256) = INTERNAL_CALL, GMT._stringGas(string)(_reference)
TMP_139(uint256) = TMP_137 + TMP_138
startGas(uint256) := TMP_139(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.transferToICAPWithReference(_icap,_value,_reference)

IRs:
TMP_140(bool) = INTERNAL_CALL, AssetMin.transferToICAPWithReference(bytes32,uint256,string)(_icap,_value,_reference)
TMP_141 = UnaryType.BANG TMP_140 
CONDITION TMP_141"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_142(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_142"];
}
// Function: 40028.sol-GMT-_transferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas + transferWithReferenceCallGas + _stringGas(_reference)

IRs:
TMP_131(uint256) = msg.gas + transferWithReferenceCallGas
TMP_132(uint256) = INTERNAL_CALL, GMT._stringGas(string)(_reference)
TMP_133(uint256) = TMP_131 + TMP_132
startGas(uint256) := TMP_133(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! super.transferWithReference(_to,_value,_reference)

IRs:
TMP_134(bool) = INTERNAL_CALL, AssetMin.transferWithReference(address,uint256,string)(_to,_value,_reference)
TMP_135 = UnaryType.BANG TMP_134 
CONDITION TMP_135"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false,false)

IRs:
RETURN False,False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(true,_applyRefund(startGas))

IRs:
TMP_136(bool) = INTERNAL_CALL, GMT._applyRefund(uint256)(startGas)
RETURN True,TMP_136"];
}
// Function: 40028.sol-GMT-_unsafeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value)()

IRs:
TMP_91(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:[] value:_value 
RETURN TMP_91"];
}
// Function: 40028.sol-GMT-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.allowance(_from,_spender,symbol)

IRs:
TMP_64(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:allowance, arguments:['_from', '_spender', 'symbol']  
RETURN TMP_64"];
}
// Function: 40028.sol-GMT-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _approve(_spender,_value)

IRs:
TUPLE_4(bool,bool) = INTERNAL_CALL, GMT._approve(address,uint256)(_spender,_value)
success(bool) := TUPLE_4([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67d150>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67d2a0>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.balanceOf(_owner,symbol)

IRs:
TMP_63(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:balanceOf, arguments:['_owner', 'symbol']  
RETURN TMP_63"];
}
// Function: 40028.sol-GMT-checkApprove(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_approve(_spender,_value)

IRs:
TUPLE_10(bool,bool) = INTERNAL_CALL, GMT._approve(address,uint256)(_spender,_value)
RETURN TUPLE_10"];
}
// Function: 40028.sol-GMT-checkForward(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_forward(allowedForwards[sha3()(_data[0],_data[1],_data[2],_data[3])],_data)

IRs:
REF_37(None) -> _data[0]
REF_38(None) -> _data[1]
REF_39(None) -> _data[2]
REF_40(None) -> _data[3]
TMP_151(bytes32) = SOLIDITY_CALL sha3()(REF_37,REF_38,REF_39,REF_40)
REF_41(address) -> allowedForwards[TMP_151]
TUPLE_12(bool,bool) = INTERNAL_CALL, GMT._forward(address,bytes)(REF_41,_data)
RETURN TUPLE_12"];
}
// Function: 40028.sol-GMT-checkSetCosignerAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_setCosignerAddress(_cosigner)

IRs:
TUPLE_11(bool,bool) = INTERNAL_CALL, GMT._setCosignerAddress(address)(_cosigner)
RETURN TUPLE_11"];
}
// Function: 40028.sol-GMT-checkTransfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_transfer(_to,_value)

IRs:
TUPLE_6(bool,bool) = INTERNAL_CALL, GMT._transfer(address,uint256)(_to,_value)
RETURN TUPLE_6"];
}
// Function: 40028.sol-GMT-checkTransferToICAP(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_transferToICAP(_icap,_value)

IRs:
TUPLE_7(bool,bool) = INTERNAL_CALL, GMT._transferToICAP(bytes32,uint256)(_icap,_value)
RETURN TUPLE_7"];
}
// Function: 40028.sol-GMT-checkTransferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_transferToICAPWithReference(_icap,_value,_reference)

IRs:
TUPLE_9(bool,bool) = INTERNAL_CALL, GMT._transferToICAPWithReference(bytes32,uint256,string)(_icap,_value,_reference)
RETURN TUPLE_9"];
}
// Function: 40028.sol-GMT-checkTransferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_transferWithReference(_to,_value,_reference)

IRs:
TUPLE_8(bool,bool) = INTERNAL_CALL, GMT._transferWithReference(address,uint256,string)(_to,_value,_reference)
RETURN TUPLE_8"];
}
// Function: 40028.sol-GMT-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.baseUnit(symbol)

IRs:
TMP_86(uint8) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:baseUnit, arguments:['symbol']  
RETURN TMP_86"];
}
// Function: 40028.sol-GMT-emitApprove(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Approve(_from,_spender,_value)

IRs:
Emit Approve(_from,_spender,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMultiAsset()

IRs:
MODIFIER_CALL, AssetMin.onlyMultiAsset()()"];
2->1;
}
// Function: 40028.sol-GMT-emitTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyMultiAsset()

IRs:
MODIFIER_CALL, AssetMin.onlyMultiAsset()()"];
2->1;
}
// Function: 40028.sol-GMT-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_forward(allowedForwards[sha3()(msg.sig)],msg.data)

IRs:
TMP_162(bytes32) = SOLIDITY_CALL sha3()(msg.sig)
REF_45(address) -> allowedForwards[TMP_162]
TUPLE_13(bool,bool) = INTERNAL_CALL, GMT._forward(address,bytes)(REF_45,msg.data)"];
}
// Function: 40028.sol-GMT-immutable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_address == 0

IRs:
TMP_167(bool) = _address == 0
CONDITION TMP_167"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-GMT-init(address,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
ma = MultiAsset(_multiAsset)

IRs:
TMP_55 = CONVERT _multiAsset to MultiAsset
ma(MultiAsset) := TMP_55(MultiAsset)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! ma.isCreated(_symbol)

IRs:
TMP_56(bool) = HIGH_LEVEL_CALL, dest:ma(MultiAsset), function:isCreated, arguments:['_symbol']  
TMP_57 = UnaryType.BANG TMP_56 
CONDITION TMP_57"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
false

IRs:
RETURN False"];
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
multiAsset = ma

IRs:
multiAsset(MultiAsset) := ma(MultiAsset)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
symbol = _symbol

IRs:
symbol(bytes32) := _symbol(bytes32)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
immutable(address(multiAsset))

IRs:
TMP_58 = CONVERT multiAsset to address
MODIFIER_CALL, SafeMin.immutable(address)(TMP_58)"];
8->1;
}
// Function: 40028.sol-GMT-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_163(bool) = contractOwner == msg.sender
CONDITION TMP_163"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-GMT-onlyHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_isHuman()

IRs:
TMP_166(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_166"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-GMT-onlyMultiAsset()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == address(multiAsset)

IRs:
TMP_164 = CONVERT multiAsset to address
TMP_165(bool) = msg.sender == TMP_164
CONDITION TMP_165"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-GMT-sendToOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
owner = multiAsset.owner(symbol)

IRs:
TMP_83(address) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:owner, arguments:['symbol']  
owner(address) := TMP_83(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
multiAsset.transfer(owner,balanceOf(owner),symbol)

IRs:
TMP_84(uint256) = INTERNAL_CALL, AssetMin.balanceOf(address)(owner)
TMP_85(bool) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:transfer, arguments:['owner', 'TMP_84', 'symbol']  
RETURN TMP_85"];
}
// Function: 40028.sol-GMT-setCosignerAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _setCosignerAddress(_cosigner)

IRs:
TUPLE_5(bool,bool) = INTERNAL_CALL, GMT._setCosignerAddress(address)(_cosigner)
success(bool) := TUPLE_5([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67d660>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67d7b0>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-setForward(bytes4,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowedForwards[sha3()(_msgSig)] = _forward

IRs:
TMP_110(bytes32) = SOLIDITY_CALL sha3()(_msgSig)
REF_34(address) -> allowedForwards[TMP_110]
REF_34(address) (->allowedForwards) := _forward(address)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
3->1;
}
// Function: 40028.sol-GMT-setName(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
bytes(name).length != 0

IRs:
TMP_60 = CONVERT name to bytes
REF_19 -> LENGTH TMP_60
TMP_61(bool) = REF_19 != 0
CONDITION TMP_61"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
name = _name

IRs:
name(string) := _name(string)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 40028.sol-GMT-setOperationsCallGas(uint256,uint256,uint256,uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transferCallGas = _transfer

IRs:
transferCallGas(uint256) := _transfer(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transferToICAPCallGas = _transferToICAP

IRs:
transferToICAPCallGas(uint256) := _transferToICAP(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transferWithReferenceCallGas = _transferWithReference

IRs:
transferWithReferenceCallGas(uint256) := _transferWithReference(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transferToICAPWithReferenceCallGas = _transferToICAPWithReference

IRs:
transferToICAPWithReferenceCallGas(uint256) := _transferToICAPWithReference(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
approveCallGas = _approve

IRs:
approveCallGas(uint256) := _approve(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
forwardCallGas = _forward

IRs:
forwardCallGas(uint256) := _forward(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
setCosignerCallGas = _setCosigner

IRs:
setCosignerCallGas(uint256) := _setCosigner(uint256)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
9->1;
}
// Function: 40028.sol-GMT-setupTreasury(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: IF 1

EXPRESSION:
_txGasPriceLimit == 0

IRs:
TMP_104(bool) = _txGasPriceLimit == 0
CONDITION TMP_104"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
_safeFalse()

IRs:
TMP_105(bool) = INTERNAL_CALL, SafeMin._safeFalse()()
RETURN TMP_105"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
treasury = EtherTreasuryInterface(_treasury)

IRs:
TMP_106 = CONVERT _treasury to EtherTreasuryInterface
treasury(EtherTreasuryInterface) := TMP_106(EtherTreasuryInterface)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
txGasPriceLimit = _txGasPriceLimit

IRs:
txGasPriceLimit(uint256) := _txGasPriceLimit(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
msg.value > 0

IRs:
TMP_107(bool) = msg.value > 0
CONDITION TMP_107"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_safeSend(_treasury,msg.value)

IRs:
INTERNAL_CALL, SafeMin._safeSend(address,uint256)(_treasury,msg.value)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
10->1;
}
// Function: 40028.sol-GMT-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
txGasPriceLimit = 21000000000

IRs:
txGasPriceLimit(uint256) := 21000000000(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
refundGas = 40000

IRs:
refundGas(uint256) := 40000(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
transferCallGas = 21000

IRs:
transferCallGas(uint256) := 21000(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
transferWithReferenceCallGas = 21000

IRs:
transferWithReferenceCallGas(uint256) := 21000(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
transferToICAPCallGas = 21000

IRs:
transferToICAPCallGas(uint256) := 21000(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
transferToICAPWithReferenceCallGas = 21000

IRs:
transferToICAPWithReferenceCallGas(uint256) := 21000(uint256)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
approveCallGas = 21000

IRs:
approveCallGas(uint256) := 21000(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
forwardCallGas = 21000

IRs:
forwardCallGas(uint256) := 21000(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
setCosignerCallGas = 21000

IRs:
setCosignerCallGas(uint256) := 21000(uint256)"];
}
// Function: 40028.sol-GMT-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
multiAsset.totalSupply(symbol)

IRs:
TMP_62(uint256) = HIGH_LEVEL_CALL, dest:multiAsset(MultiAsset), function:totalSupply, arguments:['symbol']  
RETURN TMP_62"];
}
// Function: 40028.sol-GMT-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _transfer(_to,_value)

IRs:
TUPLE_0(bool,bool) = INTERNAL_CALL, GMT._transfer(address,uint256)(_to,_value)
success(bool) := TUPLE_0([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd6674f0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd667640>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-transferToICAP(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _transferToICAP(_icap,_value)

IRs:
TUPLE_1(bool,bool) = INTERNAL_CALL, GMT._transferToICAP(bytes32,uint256)(_icap,_value)
success(bool) := TUPLE_1([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd667b50>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd667ca0>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-transferToICAPWithReference(bytes32,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _transferToICAPWithReference(_icap,_value,_reference)

IRs:
TUPLE_3(bool,bool) = INTERNAL_CALL, GMT._transferToICAPWithReference(bytes32,uint256,string)(_icap,_value,_reference)
success(bool) := TUPLE_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67caf0>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67cc40>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-transferWithReference(address,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
(success) = _transferWithReference(_to,_value,_reference)

IRs:
TUPLE_2(bool,bool) = INTERNAL_CALL, GMT._transferWithReference(address,uint256,string)(_to,_value,_reference)
success(bool) := TUPLE_2([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67c340>, <slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fc9bd67c490>])"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 40028.sol-GMT-updateRefundGas()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
startGas = msg.gas

IRs:
startGas(uint256) := msg.gas(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
refund = (startGas - msg.gas + refundGas) * tx.gasprice

IRs:
TMP_95(uint256) = startGas - msg.gas
TMP_96(uint256) = TMP_95 + refundGas
TMP_97(uint256) = TMP_96 * tx.gasprice
refund(uint256) := TMP_97(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
tx.gasprice > txGasPriceLimit

IRs:
TMP_98(bool) = tx.gasprice > txGasPriceLimit
CONDITION TMP_98"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
0

IRs:
RETURN 0"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! _refund(1)

IRs:
TMP_99(bool) = INTERNAL_CALL, GMT._refund(uint256)(1)
TMP_100 = UnaryType.BANG TMP_99 
CONDITION TMP_100"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
0

IRs:
RETURN 0"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
refundGas = startGas - msg.gas

IRs:
TMP_101(uint256) = startGas - msg.gas
refundGas(uint256) := TMP_101(uint256)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
refundGas

IRs:
RETURN refundGas"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
onlyContractOwner()

IRs:
MODIFIER_CALL, Owned.onlyContractOwner()()"];
11->1;
}
// Function: 40028.sol-MultiAsset-allowance(address,address,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-approve(address,uint256,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-balanceOf(address,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-baseUnit(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-description(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-isCreated(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-isOwner(address,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-isReissuable(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-name(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-owner(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-proxyApprove(address,uint256,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-proxySetCosignerAddress(address,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-proxyTransferFromToICAPWithReference(address,bytes32,uint256,string)
digraph{
}
// Function: 40028.sol-MultiAsset-proxyTransferFromWithReference(address,address,uint256,bytes32,string)
digraph{
}
// Function: 40028.sol-MultiAsset-proxyTransferToICAPWithReference(bytes32,uint256,string)
digraph{
}
// Function: 40028.sol-MultiAsset-proxyTransferWithReference(address,uint256,bytes32,string)
digraph{
}
// Function: 40028.sol-MultiAsset-setCosignerAddress(address,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-setCosignerAddressForUser(address)
digraph{
}
// Function: 40028.sol-MultiAsset-totalSupply(bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-transfer(address,uint256,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-transferFrom(address,address,uint256,bytes32)
digraph{
}
// Function: 40028.sol-MultiAsset-transferFromToICAP(address,bytes32,uint256)
digraph{
}
// Function: 40028.sol-MultiAsset-transferFromToICAPWithReference(address,bytes32,uint256,string)
digraph{
}
// Function: 40028.sol-MultiAsset-transferFromWithReference(address,address,uint256,bytes32,string)
digraph{
}
// Function: 40028.sol-MultiAsset-transferToICAP(bytes32,uint256)
digraph{
}
// Function: 40028.sol-MultiAsset-transferToICAPWithReference(bytes32,uint256,string)
digraph{
}
// Function: 40028.sol-MultiAsset-transferWithReference(address,uint256,bytes32,string)
digraph{
}
// Function: 40028.sol-Owned-Owned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
contractOwner = msg.sender

IRs:
contractOwner(address) := msg.sender(address)"];
}
// Function: 40028.sol-Owned-onlyContractOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
contractOwner == msg.sender

IRs:
TMP_54(bool) = contractOwner == msg.sender
CONDITION TMP_54"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-SafeMin-_isContract()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender != tx.origin

IRs:
TMP_5(bool) = msg.sender != tx.origin
RETURN TMP_5"];
}
// Function: 40028.sol-SafeMin-_isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
! _isContract()

IRs:
TMP_6(bool) = INTERNAL_CALL, SafeMin._isContract()()
TMP_7 = UnaryType.BANG TMP_6 
RETURN TMP_7"];
}
// Function: 40028.sol-SafeMin-_safeFalse()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_safeSend(msg.sender,msg.value)

IRs:
INTERNAL_CALL, SafeMin._safeSend(address,uint256)(msg.sender,msg.value)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
false

IRs:
RETURN False"];
}
// Function: 40028.sol-SafeMin-_safeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! _unsafeSend(_to,_value)

IRs:
TMP_1(bool) = INTERNAL_CALL, SafeMin._unsafeSend(address,uint256)(_to,_value)
TMP_2 = UnaryType.BANG TMP_1 
CONDITION TMP_2"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-SafeMin-_unsafeSend(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_to.call.value(_value)()

IRs:
TMP_4(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:[] value:_value 
RETURN TMP_4"];
}
// Function: 40028.sol-SafeMin-immutable(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_address == 0

IRs:
TMP_9(bool) = _address == 0
CONDITION TMP_9"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 40028.sol-SafeMin-onlyHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_isHuman()

IRs:
TMP_8(bool) = INTERNAL_CALL, SafeMin._isHuman()()
CONDITION TMP_8"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: _ 2
"];
2->3;
3[label="Node Type: END_IF 3
"];
}
}
