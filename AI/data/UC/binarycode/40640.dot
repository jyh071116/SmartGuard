digraph G {
// Function: 40640.sol-Claimable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 40640.sol-Claimable-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_14 = CONVERT 0 to address
pendingOwner(address) := TMP_14(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 40640.sol-Claimable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_16(bool) = msg.sender == owner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Claimable-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_18(bool) = msg.sender == pendingOwner
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Claimable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
pendingOwner = newOwner

IRs:
pendingOwner(address) := newOwner(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 40640.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 40640.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 40640.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 40640.sol-ERC20-totalSupply()
digraph{
}
// Function: 40640.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 40640.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 40640.sol-ERC20Basic-balanceOf(address)
digraph{
}
// Function: 40640.sol-ERC20Basic-totalSupply()
digraph{
}
// Function: 40640.sol-ERC20Basic-transfer(address,uint256)
digraph{
}
// Function: 40640.sol-Ownable-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 40640.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_5(bool) = msg.sender == owner
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_0 = CONVERT 0 to address
TMP_1(bool) = newOwner != TMP_0
TMP_2(None) = SOLIDITY_CALL require(bool)(TMP_1)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 40640.sol-Withdrawals-Ownable()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 40640.sol-Withdrawals-claimOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(owner,pendingOwner)

IRs:
Emit OwnershipTransferred(owner,pendingOwner)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = pendingOwner

IRs:
owner(address) := pendingOwner(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pendingOwner = address(0)

IRs:
TMP_22 = CONVERT 0 to address
pendingOwner(address) := TMP_22(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyPendingOwner()

IRs:
MODIFIER_CALL, Claimable.onlyPendingOwner()()"];
4->1;
}
// Function: 40640.sol-Withdrawals-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 40640.sol-Withdrawals-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_52(bool) = msg.sender == owner
TMP_53(None) = SOLIDITY_CALL require(bool)(TMP_52)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Withdrawals-onlyOwnerOrWithdrawCreator()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == withdrawCreator || msg.sender == owner)

IRs:
TMP_54(bool) = msg.sender == withdrawCreator
TMP_55(bool) = msg.sender == owner
TMP_56(bool) = TMP_54 || TMP_55
TMP_57(None) = SOLIDITY_CALL require(bool)(TMP_56)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Withdrawals-onlyPendingOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == pendingOwner)

IRs:
TMP_50(bool) = msg.sender == pendingOwner
TMP_51(None) = SOLIDITY_CALL require(bool)(TMP_50)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 40640.sol-Withdrawals-setWithdrawCreator(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
withdrawCreator = _withdrawCreator

IRs:
withdrawCreator(address) := _withdrawCreator(address)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 40640.sol-Withdrawals-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_24 = CONVERT 0 to address
TMP_25(bool) = newOwner != TMP_24
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 40640.sol-Withdrawals-withdraw(address[],uint256[],address[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->23;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_destinations.length == _amounts.length && _amounts.length == _tokenAddresses.length)

IRs:
REF_0 -> LENGTH _destinations
REF_1 -> LENGTH _amounts
TMP_30(bool) = REF_0 == REF_1
REF_2 -> LENGTH _amounts
REF_3 -> LENGTH _tokenAddresses
TMP_31(bool) = REF_2 == REF_3
TMP_32(bool) = TMP_30 && TMP_31
TMP_33(None) = SOLIDITY_CALL require(bool)(TMP_32)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < _destinations.length

IRs:
REF_4 -> LENGTH _destinations
TMP_34(bool) = i < REF_4
CONDITION TMP_34"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
tokenAddress = _tokenAddresses[i]

IRs:
REF_5(address) -> _tokenAddresses[i]
tokenAddress(address) := REF_5(address)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
amount = _amounts[i]

IRs:
REF_6(uint256) -> _amounts[i]
amount(uint256) := REF_6(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
destination = _destinations[i]

IRs:
REF_7(address) -> _destinations[i]
destination(address) := REF_7(address)"];
8->9;
9[label="Node Type: IF 9

EXPRESSION:
tokenAddress == address(0)

IRs:
TMP_35 = CONVERT 0 to address
TMP_36(bool) = tokenAddress == TMP_35
CONDITION TMP_36"];
9->10[label="True"];
9->16[label="False"];
10[label="Node Type: IF 10

EXPRESSION:
this.balance < amount

IRs:
REF_8(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_37(bool) = REF_8 < amount
CONDITION TMP_37"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: CONTINUE 11
"];
11->22;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
! destination.call.gas(70000).value(amount)()

IRs:
TMP_40(bool) = LOW_LEVEL_CALL, dest:destination, function:call, arguments:[] value:amount gas:70000
TMP_41 = UnaryType.BANG TMP_40 
CONDITION TMP_41"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: CONTINUE 14
"];
14->22;
15[label="Node Type: END_IF 15
"];
15->20;
16[label="Node Type: IF 16

EXPRESSION:
ERC20(tokenAddress).balanceOf(this) < amount

IRs:
TMP_42 = CONVERT tokenAddress to ERC20
TMP_43(uint256) = HIGH_LEVEL_CALL, dest:TMP_42(ERC20), function:balanceOf, arguments:['this']  
TMP_44(bool) = TMP_43 < amount
CONDITION TMP_44"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: CONTINUE 17
"];
17->22;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
ERC20(tokenAddress).transfer(destination,amount)

IRs:
TMP_45 = CONVERT tokenAddress to ERC20
TMP_46(bool) = HIGH_LEVEL_CALL, dest:TMP_45(ERC20), function:transfer, arguments:['destination', 'amount']  "];
19->20;
20[label="Node Type: END_IF 20
"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
AmountWithdrawEvent(destination,amount,tokenAddress)

IRs:
Emit AmountWithdrawEvent(destination,amount,tokenAddress)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
i ++

IRs:
TMP_48(uint256) := i(uint256)
i(uint256) = i + 1"];
22->5;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
onlyOwnerOrWithdrawCreator()

IRs:
MODIFIER_CALL, Withdrawals.onlyOwnerOrWithdrawCreator()()"];
23->1;
}
}
