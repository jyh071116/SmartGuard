digraph G {
// Function: 43887.sol-ERC20-allowance(address,address)
digraph{
}
// Function: 43887.sol-ERC20-approve(address,uint256)
digraph{
}
// Function: 43887.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 43887.sol-ERC20-decimals()
digraph{
}
// Function: 43887.sol-ERC20-name()
digraph{
}
// Function: 43887.sol-ERC20-symbol()
digraph{
}
// Function: 43887.sol-ERC20-totalSupply()
digraph{
}
// Function: 43887.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 43887.sol-ERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 43887.sol-ERC223-allowance(address,address)
digraph{
}
// Function: 43887.sol-ERC223-approve(address,uint256)
digraph{
}
// Function: 43887.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 43887.sol-ERC223-decimals()
digraph{
}
// Function: 43887.sol-ERC223-name()
digraph{
}
// Function: 43887.sol-ERC223-symbol()
digraph{
}
// Function: 43887.sol-ERC223-totalSupply()
digraph{
}
// Function: 43887.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 43887.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 43887.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 43887.sol-ERC223-transferFrom(address,address,uint256)
digraph{
}
// Function: 43887.sol-ERC223Receiver-tokenFallback(address,uint256,bytes)
digraph{
}
// Function: 43887.sol-NGToken-NGToken()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = INITIAL_SUPPLY

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := INITIAL_SUPPLY(uint256)"];
}
// Function: 43887.sol-NGToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
allowed[_owner][_spender]

IRs:
REF_48(mapping(address => uint256)) -> allowed[_owner]
REF_49(uint256) -> REF_48[_spender]
RETURN REF_49"];
}
// Function: 43887.sol-NGToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)((_value == 0) || (allowed[msg.sender][_spender] == 0))

IRs:
TMP_37(bool) = _value == 0
REF_31(mapping(address => uint256)) -> allowed[msg.sender]
REF_32(uint256) -> REF_31[_spender]
TMP_38(bool) = REF_32 == 0
TMP_39(bool) = TMP_37 || TMP_38
TMP_40(None) = SOLIDITY_CALL require(bool)(TMP_39)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = _value

IRs:
REF_33(mapping(address => uint256)) -> allowed[msg.sender]
REF_34(uint256) -> REF_33[_spender]
REF_34(uint256) (->allowed) := _value(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Approval(msg.sender,_spender,_value)

IRs:
Emit Approval(msg.sender,_spender,_value)"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-approveAndCall(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
spender = TokenRecipient(_spender)

IRs:
TMP_42 = CONVERT _spender to TokenRecipient
spender(TokenRecipient) := TMP_42(TokenRecipient)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
approve(_spender,_value)

IRs:
TMP_43(bool) = INTERNAL_CALL, NGToken.approve(address,uint256)(_spender,_value)
CONDITION TMP_43"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
spender.receiveApproval(msg.sender,_value,this,_extraData)

IRs:
HIGH_LEVEL_CALL, dest:spender(TokenRecipient), function:receiveApproval, arguments:['msg.sender', '_value', 'this', '_extraData']  "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
true

IRs:
RETURN True"];
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
false

IRs:
RETURN False"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_1(uint256) -> balances[_owner]
RETURN REF_1"];
}
// Function: 43887.sol-NGToken-batchTransfer(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to.length > 0)

IRs:
REF_14 -> LENGTH _to
TMP_18(bool) = REF_14 > 0
TMP_19(None) = SOLIDITY_CALL require(bool)(TMP_18)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_value.length > 0)

IRs:
REF_15 -> LENGTH _value
TMP_20(bool) = REF_15 > 0
TMP_21(None) = SOLIDITY_CALL require(bool)(TMP_20)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(_to.length == _value.length)

IRs:
REF_16 -> LENGTH _to
REF_17 -> LENGTH _value
TMP_22(bool) = REF_16 == REF_17
TMP_23(None) = SOLIDITY_CALL require(bool)(TMP_22)"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->15;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _to.length

IRs:
REF_18 -> LENGTH _to
TMP_24(bool) = i < REF_18
CONDITION TMP_24"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
to = _to[i]

IRs:
REF_19(address) -> _to[i]
to(address) := REF_19(address)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
value = _value[i]

IRs:
REF_20(uint256) -> _value[i]
value(uint256) := REF_20(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
require(bool)(balances[msg.sender] >= value)

IRs:
REF_21(uint256) -> balances[msg.sender]
TMP_25(bool) = REF_21 >= value
TMP_26(None) = SOLIDITY_CALL require(bool)(TMP_25)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
balances[msg.sender] -= value

IRs:
REF_22(uint256) -> balances[msg.sender]
REF_22(-> balances) = REF_22 - value"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
balances[to] += value

IRs:
REF_23(uint256) -> balances[to]
REF_23(-> balances) = REF_23 + value"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(msg.sender,to,value)

IRs:
Emit Transfer(msg.sender,to,value)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
14->7;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: RETURN 16

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-burn(uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_62(uint256) -> balances[msg.sender]
TMP_82(bool) = REF_62 >= _value
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_63(uint256) -> balances[msg.sender]
REF_63(-> balances) = REF_63 - _value"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalBurned += _value

IRs:
totalBurned(uint256) = totalBurned + _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(msg.sender,_value,totalSupply(),_data)

IRs:
TMP_84(uint256) = INTERNAL_CALL, NGToken.totalSupply()()
Emit Burn(msg.sender,_value,TMP_84,_data)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
true

IRs:
RETURN True"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-burnFrom(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
transferFrom(_from,msg.sender,_value)

IRs:
TMP_86(bool) = INTERNAL_CALL, NGToken.transferFrom(address,address,uint256)(_from,msg.sender,_value)
CONDITION TMP_86"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
burn(_value,_data)

IRs:
TMP_87(bool) = INTERNAL_CALL, NGToken.burn(uint256,bytes)(_value,_data)
RETURN TMP_87"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
false

IRs:
RETURN False"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-currentBurned()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalBurned

IRs:
RETURN totalBurned"];
}
// Function: 43887.sol-NGToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
DECIMALS

IRs:
RETURN DECIMALS"];
}
// Function: 43887.sol-NGToken-decreaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_subValue > allowed[msg.sender][_spender]

IRs:
REF_40(mapping(address => uint256)) -> allowed[msg.sender]
REF_41(uint256) -> REF_40[_spender]
TMP_46(bool) = _subValue > REF_41
CONDITION TMP_46"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
allowed[msg.sender][_spender] = 0

IRs:
REF_42(mapping(address => uint256)) -> allowed[msg.sender]
REF_43(uint256) -> REF_42[_spender]
REF_43(uint256) (->allowed) := 0(uint256)"];
2->4;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
allowed[msg.sender][_spender] -= _subValue

IRs:
REF_44(mapping(address => uint256)) -> allowed[msg.sender]
REF_45(uint256) -> REF_44[_spender]
REF_45(-> allowed) = REF_45 - _subValue"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_46(mapping(address => uint256)) -> allowed[msg.sender]
REF_47(uint256) -> REF_46[_spender]
Emit Approval(msg.sender,_spender,REF_47)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 43887.sol-NGToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(false)

IRs:
TMP_88(None) = SOLIDITY_CALL require(bool)(False)"];
}
// Function: 43887.sol-NGToken-increaseApproval(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allowed[msg.sender][_spender] += _addValue

IRs:
REF_36(mapping(address => uint256)) -> allowed[msg.sender]
REF_37(uint256) -> REF_36[_spender]
REF_37(-> allowed) = REF_37 + _addValue"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,_spender,allowed[msg.sender][_spender])

IRs:
REF_38(mapping(address => uint256)) -> allowed[msg.sender]
REF_39(uint256) -> REF_38[_spender]
Emit Approval(msg.sender,_spender,REF_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 43887.sol-NGToken-initialSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
INITIAL_SUPPLY

IRs:
RETURN INITIAL_SUPPLY"];
}
// Function: 43887.sol-NGToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_81(bool) = length > 0
RETURN TMP_81"];
}
// Function: 43887.sol-NGToken-multipleTransfer(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value * _to.length > 0)

IRs:
REF_5 -> LENGTH _to
TMP_9(uint256) = _value * REF_5
TMP_10(bool) = TMP_9 > 0
TMP_11(None) = SOLIDITY_CALL require(bool)(TMP_10)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value * _to.length)

IRs:
REF_6(uint256) -> balances[msg.sender]
REF_7 -> LENGTH _to
TMP_12(uint256) = _value * REF_7
TMP_13(bool) = REF_6 >= TMP_12
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] -= _value * _to.length

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_9 -> LENGTH _to
TMP_15(uint256) = _value * REF_9
REF_8(-> balances) = REF_8 - TMP_15"];
3->6;
4[label="Node Type: BEGIN_LOOP 4
"];
4->7;
5[label="Node Type: END_LOOP 5
"];
5->11;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
6->4;
7[label="Node Type: IF_LOOP 7

EXPRESSION:
i < _to.length

IRs:
REF_10 -> LENGTH _to
TMP_16(bool) = i < REF_10
CONDITION TMP_16"];
7->8[label="True"];
7->5[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
balances[_to[i]] += _value

IRs:
REF_11(address) -> _to[i]
REF_12(uint256) -> balances[REF_11]
REF_12(-> balances) = REF_12 + _value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to[i],_value)

IRs:
REF_13(address) -> _to[i]
Emit Transfer(msg.sender,REF_13,_value)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
10->7;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
NAME

IRs:
RETURN NAME"];
}
// Function: 43887.sol-NGToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
NAME = NEO Genesis Token

IRs:
NAME(string) := NEO Genesis Token(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
SYMBOL = NGT

IRs:
SYMBOL(string) := NGT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
DECIMALS = 18

IRs:
DECIMALS(uint8) := 18(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
INITIAL_SUPPLY = 20000000000 * (10 ** uint256(DECIMALS))

IRs:
TMP_89 = CONVERT DECIMALS to uint256
TMP_90(uint256) = 10 ** TMP_89
TMP_91(uint256) = 20000000000 * TMP_90
INITIAL_SUPPLY(uint256) := TMP_91(uint256)"];
}
// Function: 43887.sol-NGToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
totalBurned = 0

IRs:
totalBurned(uint256) := 0(uint256)"];
}
// Function: 43887.sol-NGToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
SYMBOL

IRs:
RETURN SYMBOL"];
}
// Function: 43887.sol-NGToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
INITIAL_SUPPLY - totalBurned

IRs:
TMP_0(uint256) = INITIAL_SUPPLY - totalBurned
RETURN TMP_0"];
}
// Function: 43887.sol-NGToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_1(bool) = INTERNAL_CALL, NGToken.isContract(address)(_to)
CONDITION TMP_1"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_2(bool) = INTERNAL_CALL, NGToken.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_2"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_3 = CONVERT 0 to address
TMP_4(bool) = _to != TMP_3
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_2(uint256) -> balances[msg.sender]
TMP_6(bool) = REF_2 >= _value
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_3(uint256) -> balances[msg.sender]
REF_3(-> balances) = REF_3 - _value"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] += _value

IRs:
REF_4(uint256) -> balances[_to]
REF_4(-> balances) = REF_4 + _value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_48(bool) = INTERNAL_CALL, NGToken.isContract(address)(_to)
CONDITION TMP_48"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_49(bool) = INTERNAL_CALL, NGToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_49"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_50(bool) = INTERNAL_CALL, NGToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_50"];
5[label="Node Type: RETURN 5

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
isContract(_to)

IRs:
TMP_51(bool) = INTERNAL_CALL, NGToken.isContract(address)(_to)
CONDITION TMP_51"];
1->2[label="True"];
1->10[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_52 = CONVERT 0 to address
TMP_53(bool) = _to != TMP_52
TMP_54(None) = SOLIDITY_CALL require(bool)(TMP_53)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_50(uint256) -> balances[msg.sender]
TMP_55(bool) = REF_50 >= _value
TMP_56(None) = SOLIDITY_CALL require(bool)(TMP_55)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_51(uint256) -> balances[msg.sender]
REF_51(-> balances) = REF_51 - _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] += _value

IRs:
REF_52(uint256) -> balances[_to]
REF_52(-> balances) = REF_52 + _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(_customFallback)),msg.sender,_value,_data))

IRs:
TMP_58(bytes32) = SOLIDITY_CALL keccak256()(_customFallback)
TMP_59 = CONVERT TMP_58 to bytes4
TMP_60(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_59', 'msg.sender', '_value', '_data'] value:0 
TMP_61(None) = SOLIDITY_CALL assert(bool)(TMP_60)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_64(bool) = INTERNAL_CALL, NGToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_64"];
12[label="Node Type: RETURN 12

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_28 = CONVERT 0 to address
TMP_29(bool) = _to != TMP_28
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[_from] >= _value && allowed[_from][msg.sender] >= _value)

IRs:
REF_24(uint256) -> balances[_from]
TMP_31(bool) = REF_24 >= _value
REF_25(mapping(address => uint256)) -> allowed[_from]
REF_26(uint256) -> REF_25[msg.sender]
TMP_32(bool) = REF_26 >= _value
TMP_33(bool) = TMP_31 && TMP_32
TMP_34(None) = SOLIDITY_CALL require(bool)(TMP_33)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_from] -= _value

IRs:
REF_27(uint256) -> balances[_from]
REF_27(-> balances) = REF_27 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_28(uint256) -> balances[_to]
REF_28(-> balances) = REF_28 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
allowed[_from][msg.sender] -= _value

IRs:
REF_29(mapping(address => uint256)) -> allowed[_from]
REF_30(uint256) -> REF_29[msg.sender]
REF_30(-> allowed) = REF_30 - _value"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(_from,_to,_value)

IRs:
Emit Transfer(_from,_to,_value)"];
6->7;
7[label="Node Type: NEW VARIABLE 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(_from,_to,_value,empty)

IRs:
Emit Transfer(_from,_to,_value,empty)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_65 = CONVERT 0 to address
TMP_66(bool) = _to != TMP_65
TMP_67(None) = SOLIDITY_CALL require(bool)(TMP_66)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_55(uint256) -> balances[msg.sender]
TMP_68(bool) = REF_55 >= _value
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_56(uint256) -> balances[msg.sender]
REF_56(-> balances) = REF_56 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_57(uint256) -> balances[_to]
REF_57(-> balances) = REF_57 + _value"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: RETURN 8

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-NGToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_to != address(0x0))

IRs:
TMP_72 = CONVERT 0 to address
TMP_73(bool) = _to != TMP_72
TMP_74(None) = SOLIDITY_CALL require(bool)(TMP_73)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(balances[msg.sender] >= _value)

IRs:
REF_58(uint256) -> balances[msg.sender]
TMP_75(bool) = REF_58 >= _value
TMP_76(None) = SOLIDITY_CALL require(bool)(TMP_75)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[msg.sender] -= _value

IRs:
REF_59(uint256) -> balances[msg.sender]
REF_59(-> balances) = REF_59 - _value"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[_to] += _value

IRs:
REF_60(uint256) -> balances[_to]
REF_60(-> balances) = REF_60 + _value"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
receiver = ERC223Receiver(_to)

IRs:
TMP_77 = CONVERT _to to ERC223Receiver
receiver(ERC223Receiver) := TMP_77(ERC223Receiver)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ERC223Receiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
true

IRs:
RETURN True"];
10[label="Node Type: RETURN 10

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 43887.sol-TokenRecipient-receiveApproval(address,uint256,address,bytes)
digraph{
}
}
