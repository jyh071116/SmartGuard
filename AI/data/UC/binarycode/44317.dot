digraph G {
// Function: 44317.sol-HoneyPot-HoneyPot()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
put()

IRs:
INTERNAL_CALL, HoneyPot.put()()"];
}
// Function: 44317.sol-HoneyPot-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: THROW 1
"];
}
// Function: 44317.sol-HoneyPot-get()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
! msg.sender.call.value(balances[msg.sender])()

IRs:
REF_3(uint256) -> balances[msg.sender]
TMP_2(bool) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[] value:REF_3 
TMP_3 = UnaryType.BANG TMP_2 
CONDITION TMP_3"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: THROW 2
"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = 0

IRs:
REF_4(uint256) -> balances[msg.sender]
REF_4(uint256) (->balances) := 0(uint256)"];
}
// Function: 44317.sol-HoneyPot-put()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
balances[msg.sender] = msg.value

IRs:
REF_0(uint256) -> balances[msg.sender]
REF_0(uint256) (->balances) := msg.value(uint256)"];
}
}
