digraph G {
// Function: 44583.sol-Address-_functionCallWithValue(address,bytes,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(isContract(target),Address: call to non-contract)

IRs:
TMP_34(bool) = INTERNAL_CALL, Address.isContract(address)(target)
TMP_35(None) = SOLIDITY_CALL require(bool,string)(TMP_34,Address: call to non-contract)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(success,returndata) = target.call{value: weiValue}(data)

IRs:
TUPLE_1(bool,bytes) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['data'] value:weiValue 
success(bool)= UNPACK TUPLE_1 index: 0 
returndata(bytes)= UNPACK TUPLE_1 index: 1 "];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
success

IRs:
CONDITION success"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: RETURN 6

EXPRESSION:
returndata

IRs:
RETURN returndata"];
7[label="Node Type: IF 7

EXPRESSION:
returndata.length > 0

IRs:
REF_2 -> LENGTH returndata
TMP_36(bool) = REF_2 > 0
CONDITION TMP_36"];
7->8[label="True"];
7->13[label="False"];
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
returndata_size__functionCallWithValue_asm_0 = mload(uint256)(returndata)

IRs:
TMP_37(uint256) = SOLIDITY_CALL mload(uint256)(returndata)
returndata_size__functionCallWithValue_asm_0(uint256) := TMP_37(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
revert(uint256,uint256)(32 + returndata,returndata_size__functionCallWithValue_asm_0)

IRs:
TMP_38(uint256) = 32 + returndata
TMP_39(None) = SOLIDITY_CALL revert(uint256,uint256)(TMP_38,returndata_size__functionCallWithValue_asm_0)"];
11->12;
12[label="Node Type: END INLINE ASM 12
"];
12->14;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert(string)(errorMessage)

IRs:
TMP_40(None) = SOLIDITY_CALL revert(string)(errorMessage)"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: END_IF 15
"];
}
// Function: 44583.sol-Address-functionCall(address,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
functionCall(target,data,Address: low-level call failed)

IRs:
TMP_26(bytes) = INTERNAL_CALL, Address.functionCall(address,bytes,string)(target,data,Address: low-level call failed)
RETURN TMP_26"];
}
// Function: 44583.sol-Address-functionCall(address,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_functionCallWithValue(target,data,0,errorMessage)

IRs:
TMP_27(bytes) = INTERNAL_CALL, Address._functionCallWithValue(address,bytes,uint256,string)(target,data,0,errorMessage)
RETURN TMP_27"];
}
// Function: 44583.sol-Address-functionCallWithValue(address,bytes,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
functionCallWithValue(target,data,value,Address: low-level call with value failed)

IRs:
TMP_28(bytes) = INTERNAL_CALL, Address.functionCallWithValue(address,bytes,uint256,string)(target,data,value,Address: low-level call with value failed)
RETURN TMP_28"];
}
// Function: 44583.sol-Address-functionCallWithValue(address,bytes,uint256,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

IRs:
TMP_29 = CONVERT this to address
TMP_30(uint256) = SOLIDITY_CALL balance(address)(TMP_29)
TMP_31(bool) = TMP_30 >= value
TMP_32(None) = SOLIDITY_CALL require(bool,string)(TMP_31,Address: insufficient balance for call)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
_functionCallWithValue(target,data,value,errorMessage)

IRs:
TMP_33(bytes) = INTERNAL_CALL, Address._functionCallWithValue(address,bytes,uint256,string)(target,data,value,errorMessage)
RETURN TMP_33"];
}
// Function: 44583.sol-Address-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470

IRs:
accountHash(bytes32) := 89477152217924674838424037953991966239322087453347756267410168184682657981552(uint256)"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
codehash = extcodehash(uint256)(account)

IRs:
TMP_17(uint256) = SOLIDITY_CALL extcodehash(uint256)(account)
codehash(bytes32) := TMP_17(uint256)"];
4->5;
5[label="Node Type: END INLINE ASM 5
"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(codehash != accountHash && codehash != 0x0)

IRs:
TMP_18(bool) = codehash != accountHash
TMP_19(bool) = codehash != 0
TMP_20(bool) = TMP_18 && TMP_19
RETURN TMP_20"];
}
// Function: 44583.sol-Address-sendValue(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(this).balance >= amount,Address: insufficient balance)

IRs:
TMP_21 = CONVERT this to address
TMP_22(uint256) = SOLIDITY_CALL balance(address)(TMP_21)
TMP_23(bool) = TMP_22 >= amount
TMP_24(None) = SOLIDITY_CALL require(bool,string)(TMP_23,Address: insufficient balance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(success,None) = recipient.call{value: amount}()

IRs:
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:recipient, function:call, arguments:[''] value:amount 
success(bool)= UNPACK TUPLE_0 index: 0 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(success,Address: unable to send value, recipient may have reverted)

IRs:
TMP_25(None) = SOLIDITY_CALL require(bool,string)(success,Address: unable to send value, recipient may have reverted)"];
}
// Function: 44583.sol-Context-_msgData()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
this
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
msg.data

IRs:
RETURN msg.data"];
}
// Function: 44583.sol-Context-_msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 44583.sol-GoBrrrToken-_beforeTokenTransfer(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 44583.sol-GoBrrrToken-_msgData()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
this
"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
msg.data

IRs:
RETURN msg.data"];
}
// Function: 44583.sol-GoBrrrToken-_msgSender()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
msg.sender

IRs:
RETURN msg.sender"];
}
// Function: 44583.sol-GoBrrrToken-allowance(address,address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_allowance[owner][spender]

IRs:
REF_31(mapping(address => uint256)) -> _allowance[owner]
REF_32(uint256) -> REF_31[spender]
RETURN REF_32"];
}
// Function: 44583.sol-GoBrrrToken-approve(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_allowance[msg.sender][spender] = value

IRs:
REF_29(mapping(address => uint256)) -> _allowance[msg.sender]
REF_30(uint256) -> REF_29[spender]
REF_30(uint256) (->_allowance) := value(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,value)

IRs:
Emit Approval(msg.sender,spender,value)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 44583.sol-GoBrrrToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_balanceOf[account]

IRs:
REF_4(uint256) -> _balanceOf[account]
RETURN REF_4"];
}
// Function: 44583.sol-GoBrrrToken-changetransBurnrate(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
transBurnrate = _transBurnrate

IRs:
transBurnrate(uint256) := _transBurnrate(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
true

IRs:
RETURN True"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 44583.sol-GoBrrrToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_balanceOf[msg.sender] = _totalSupply

IRs:
REF_3(uint256) -> _balanceOf[msg.sender]
REF_3(uint256) (->_balanceOf) := _totalSupply(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
Transfer(address(0x0),msg.sender,_totalSupply)

IRs:
TMP_65 = CONVERT 0 to address
Emit Transfer(TMP_65,msg.sender,_totalSupply)"];
}
// Function: 44583.sol-GoBrrrToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 44583.sol-GoBrrrToken-decreaseAllowance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldValue = _allowance[msg.sender][spender]

IRs:
REF_40(mapping(address => uint256)) -> _allowance[msg.sender]
REF_41(uint256) -> REF_40[spender]
oldValue(uint256) := REF_41(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
subtractedValue >= oldValue

IRs:
TMP_98(bool) = subtractedValue >= oldValue
CONDITION TMP_98"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_allowance[msg.sender][spender] = 0

IRs:
REF_42(mapping(address => uint256)) -> _allowance[msg.sender]
REF_43(uint256) -> REF_42[spender]
REF_43(uint256) (->_allowance) := 0(uint256)"];
3->5;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_allowance[msg.sender][spender] = oldValue.sub(subtractedValue)

IRs:
REF_44(mapping(address => uint256)) -> _allowance[msg.sender]
REF_45(uint256) -> REF_44[spender]
TMP_99(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['oldValue', 'subtractedValue'] 
REF_45(uint256) (->_allowance) := TMP_99(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Approval(msg.sender,spender,_allowance[msg.sender][spender])

IRs:
REF_47(mapping(address => uint256)) -> _allowance[msg.sender]
REF_48(uint256) -> REF_47[spender]
Emit Approval(msg.sender,spender,REF_48)"];
6->7;
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 44583.sol-GoBrrrToken-increaseAllowance(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue)

IRs:
REF_33(mapping(address => uint256)) -> _allowance[msg.sender]
REF_34(uint256) -> REF_33[spender]
REF_35(mapping(address => uint256)) -> _allowance[msg.sender]
REF_36(uint256) -> REF_35[spender]
TMP_96(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_36', 'addedValue'] 
REF_34(uint256) (->_allowance) := TMP_96(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
Approval(msg.sender,spender,_allowance[msg.sender][spender])

IRs:
REF_38(mapping(address => uint256)) -> _allowance[msg.sender]
REF_39(uint256) -> REF_38[spender]
Emit Approval(msg.sender,spender,REF_39)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 44583.sol-GoBrrrToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->6;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(account != address(0))

IRs:
TMP_102 = CONVERT 0 to address
TMP_103(bool) = account != TMP_102
TMP_104(None) = SOLIDITY_CALL require(bool)(TMP_103)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_beforeTokenTransfer(address(0),account,amount)

IRs:
TMP_105 = CONVERT 0 to address
INTERNAL_CALL, GoBrrrToken._beforeTokenTransfer(address,address,uint256)(TMP_105,account,amount)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_totalSupply = _totalSupply.add(amount)

IRs:
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_totalSupply', 'amount'] 
_totalSupply(uint256) := TMP_107(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_balanceOf[account] = _balanceOf[account].add(amount)

IRs:
REF_50(uint256) -> _balanceOf[account]
REF_51(uint256) -> _balanceOf[account]
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_51', 'amount'] 
REF_50(uint256) (->_balanceOf) := TMP_108(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),account,amount)

IRs:
TMP_109 = CONVERT 0 to address
Emit Transfer(TMP_109,account,amount)"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
6->1;
}
// Function: 44583.sol-GoBrrrToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 44583.sol-GoBrrrToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_owner == msg.sender,Ownable: caller is not the owner)

IRs:
TMP_115(bool) = _owner == msg.sender
TMP_116(None) = SOLIDITY_CALL require(bool,string)(TMP_115,Ownable: caller is not the owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 44583.sol-GoBrrrToken-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 44583.sol-GoBrrrToken-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(_owner,address(0))

IRs:
TMP_56 = CONVERT 0 to address
Emit OwnershipTransferred(_owner,TMP_56)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = address(0)

IRs:
TMP_58 = CONVERT 0 to address
_owner(address) := TMP_58(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 44583.sol-GoBrrrToken-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_name = Go BRRR

IRs:
_name(string) := Go BRRR(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
_symbol = BRRR

IRs:
_symbol(string) := BRRR(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
_decimals = 18

IRs:
_decimals(uint256) := 18(uint256)"];
}
// Function: 44583.sol-GoBrrrToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
_totalSupply = 111 * (uint256(10) ** _decimals)

IRs:
TMP_112 = CONVERT 10 to uint256
TMP_113(uint256) = TMP_112 ** _decimals
TMP_114(uint256) = 111 * TMP_113
_totalSupply(uint256) := TMP_114(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
transBurnrate = 3

IRs:
transBurnrate(uint256) := 3(uint256)"];
}
// Function: 44583.sol-GoBrrrToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 44583.sol-GoBrrrToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 44583.sol-GoBrrrToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_balanceOf[msg.sender] >= value)

IRs:
REF_5(uint256) -> _balanceOf[msg.sender]
TMP_67(bool) = REF_5 >= value
TMP_68(None) = SOLIDITY_CALL require(bool)(TMP_67)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
remainrate = 10000

IRs:
remainrate(uint256) := 10000(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
remainrate = remainrate.sub(transBurnrate)

IRs:
TMP_69(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['remainrate', 'transBurnrate'] 
remainrate(uint256) := TMP_69(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
leftvalue = value.mul(remainrate)

IRs:
TMP_70(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'remainrate'] 
leftvalue(uint256) := TMP_70(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
leftvalue = leftvalue.sub(leftvalue.mod(10000))

IRs:
TMP_71(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mod(uint256,uint256), arguments:['leftvalue', '10000'] 
TMP_72(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['leftvalue', 'TMP_71'] 
leftvalue(uint256) := TMP_72(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
leftvalue = leftvalue.div(10000)

IRs:
TMP_73(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['leftvalue', '10000'] 
leftvalue(uint256) := TMP_73(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_balanceOf[msg.sender] -= value

IRs:
REF_11(uint256) -> _balanceOf[msg.sender]
REF_11(-> _balanceOf) = REF_11 - value"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_balanceOf[to] += leftvalue

IRs:
REF_12(uint256) -> _balanceOf[to]
REF_12(-> _balanceOf) = REF_12 + leftvalue"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
decayvalue = value.sub(leftvalue)

IRs:
TMP_74(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'leftvalue'] 
decayvalue(uint256) := TMP_74(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_totalSupply = _totalSupply.sub(decayvalue)

IRs:
TMP_75(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'decayvalue'] 
_totalSupply(uint256) := TMP_75(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,address(0x0),decayvalue)

IRs:
TMP_76 = CONVERT 0 to address
Emit Transfer(msg.sender,TMP_76,decayvalue)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(msg.sender,to,leftvalue)

IRs:
Emit Transfer(msg.sender,to,leftvalue)"];
12->13;
13[label="Node Type: RETURN 13

EXPRESSION:
true

IRs:
RETURN True"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
validRecipient(to)

IRs:
MODIFIER_CALL, GoBrrrToken.validRecipient(address)(to)"];
14->1;
}
// Function: 44583.sol-GoBrrrToken-transferFrom(address,address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(value <= _balanceOf[from])

IRs:
REF_15(uint256) -> _balanceOf[from]
TMP_80(bool) = value <= REF_15
TMP_81(None) = SOLIDITY_CALL require(bool)(TMP_80)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(value <= _allowance[from][msg.sender])

IRs:
REF_16(mapping(address => uint256)) -> _allowance[from]
REF_17(uint256) -> REF_16[msg.sender]
TMP_82(bool) = value <= REF_17
TMP_83(None) = SOLIDITY_CALL require(bool)(TMP_82)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
remainrate = 10000

IRs:
remainrate(uint256) := 10000(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
remainrate = remainrate.sub(transBurnrate)

IRs:
TMP_84(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['remainrate', 'transBurnrate'] 
remainrate(uint256) := TMP_84(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
leftvalue = value.mul(remainrate)

IRs:
TMP_85(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['value', 'remainrate'] 
leftvalue(uint256) := TMP_85(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
leftvalue = leftvalue.sub(leftvalue.mod(10000))

IRs:
TMP_86(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mod(uint256,uint256), arguments:['leftvalue', '10000'] 
TMP_87(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['leftvalue', 'TMP_86'] 
leftvalue(uint256) := TMP_87(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
leftvalue = leftvalue.div(10000)

IRs:
TMP_88(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['leftvalue', '10000'] 
leftvalue(uint256) := TMP_88(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_balanceOf[from] -= value

IRs:
REF_23(uint256) -> _balanceOf[from]
REF_23(-> _balanceOf) = REF_23 - value"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_balanceOf[to] += leftvalue

IRs:
REF_24(uint256) -> _balanceOf[to]
REF_24(-> _balanceOf) = REF_24 + leftvalue"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_allowance[from][msg.sender] -= value

IRs:
REF_25(mapping(address => uint256)) -> _allowance[from]
REF_26(uint256) -> REF_25[msg.sender]
REF_26(-> _allowance) = REF_26 - value"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
decayvalue = value.sub(leftvalue)

IRs:
TMP_89(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['value', 'leftvalue'] 
decayvalue(uint256) := TMP_89(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
_totalSupply = _totalSupply.sub(decayvalue)

IRs:
TMP_90(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_totalSupply', 'decayvalue'] 
_totalSupply(uint256) := TMP_90(uint256)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
Transfer(from,address(0x0),decayvalue)

IRs:
TMP_91 = CONVERT 0 to address
Emit Transfer(from,TMP_91,decayvalue)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
Transfer(from,to,leftvalue)

IRs:
Emit Transfer(from,to,leftvalue)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
validRecipient(to)

IRs:
MODIFIER_CALL, GoBrrrToken.validRecipient(address)(to)"];
16->1;
}
// Function: 44583.sol-GoBrrrToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

IRs:
TMP_60 = CONVERT 0 to address
TMP_61(bool) = newOwner != TMP_60
TMP_62(None) = SOLIDITY_CALL require(bool,string)(TMP_61,Ownable: new owner is the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(_owner,newOwner)

IRs:
Emit OwnershipTransferred(_owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_owner = newOwner

IRs:
_owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 44583.sol-GoBrrrToken-validRecipient(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(to != address(0x0))

IRs:
TMP_117 = CONVERT 0 to address
TMP_118(bool) = to != TMP_117
TMP_119(None) = SOLIDITY_CALL require(bool)(TMP_118)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(to != address(this))

IRs:
TMP_120 = CONVERT this to address
TMP_121(bool) = to != TMP_120
TMP_122(None) = SOLIDITY_CALL require(bool)(TMP_121)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 44583.sol-IERC20-allowance(address,address)
digraph{
}
// Function: 44583.sol-IERC20-approve(address,uint256)
digraph{
}
// Function: 44583.sol-IERC20-balanceOf(address)
digraph{
}
// Function: 44583.sol-IERC20-totalSupply()
digraph{
}
// Function: 44583.sol-IERC20-transfer(address,uint256)
digraph{
}
// Function: 44583.sol-IERC20-transferFrom(address,address,uint256)
digraph{
}
// Function: 44583.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_owner = msg.sender

IRs:
_owner(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(address(0),msg.sender)

IRs:
TMP_41 = CONVERT 0 to address
Emit OwnershipTransferred(TMP_41,msg.sender)"];
}
// Function: 44583.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_owner == msg.sender,Ownable: caller is not the owner)

IRs:
TMP_52(bool) = _owner == msg.sender
TMP_53(None) = SOLIDITY_CALL require(bool,string)(TMP_52,Ownable: caller is not the owner)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 44583.sol-Ownable-owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
_owner

IRs:
RETURN _owner"];
}
// Function: 44583.sol-Ownable-renounceOwnership()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
OwnershipTransferred(_owner,address(0))

IRs:
TMP_43 = CONVERT 0 to address
Emit OwnershipTransferred(_owner,TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_owner = address(0)

IRs:
TMP_45 = CONVERT 0 to address
_owner(address) := TMP_45(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
3->1;
}
// Function: 44583.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(newOwner != address(0),Ownable: new owner is the zero address)

IRs:
TMP_47 = CONVERT 0 to address
TMP_48(bool) = newOwner != TMP_47
TMP_49(None) = SOLIDITY_CALL require(bool,string)(TMP_48,Ownable: new owner is the zero address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(_owner,newOwner)

IRs:
Emit OwnershipTransferred(_owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_owner = newOwner

IRs:
_owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 44583.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_11(uint256) = a + b
c(uint256) := TMP_11(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(c >= a)

IRs:
TMP_12(bool) = c >= a
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 44583.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b > 0)

IRs:
TMP_5(bool) = b > 0
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a / b

IRs:
TMP_7(uint256) = a / b
c(uint256) := TMP_7(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 44583.sol-SafeMath-mod(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b != 0)

IRs:
TMP_14(bool) = b != 0
TMP_15(None) = SOLIDITY_CALL require(bool)(TMP_14)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a % b

IRs:
TMP_16(uint256) = a % b
RETURN TMP_16"];
}
// Function: 44583.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 44583.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(b <= a)

IRs:
TMP_8(bool) = b <= a
TMP_9(None) = SOLIDITY_CALL require(bool)(TMP_8)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
c = a - b

IRs:
TMP_10(uint256) = a - b
c(uint256) := TMP_10(uint256)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
}
