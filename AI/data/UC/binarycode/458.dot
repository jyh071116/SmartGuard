digraph G {
// Function: 458.sol-BintechToken-autoDistribute()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(distributeAmount > 0 && balanceOf(owner) >= distributeAmount && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender])

IRs:
TMP_221(bool) = distributeAmount > 0
TMP_222(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(owner)
TMP_223(bool) = TMP_222 >= distributeAmount
TMP_224(bool) = TMP_221 && TMP_223
REF_145(bool) -> frozenAccount[msg.sender]
TMP_225(bool) = REF_145 == False
TMP_226(bool) = TMP_224 && TMP_225
REF_146(uint256) -> unlockUnixTime[msg.sender]
TMP_227(bool) = now > REF_146
TMP_228(bool) = TMP_226 && TMP_227
TMP_229(None) = SOLIDITY_CALL require(bool)(TMP_228)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
msg.value > 0

IRs:
TMP_230(bool) = msg.value > 0
CONDITION TMP_230"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner.transfer(msg.value)

IRs:
Transfer dest:owner value:msg.value"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[owner] = SafeMath.sub(balances[owner],distributeAmount)

IRs:
REF_148(uint256) -> balances[owner]
REF_150(uint256) -> balances[owner]
TMP_232(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_150', 'distributeAmount'] 
REF_148(uint256) (->balances) := TMP_232(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = SafeMath.add(balances[msg.sender],distributeAmount)

IRs:
REF_151(uint256) -> balances[msg.sender]
REF_153(uint256) -> balances[msg.sender]
TMP_233(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_153', 'distributeAmount'] 
REF_151(uint256) (->balances) := TMP_233(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(owner,msg.sender,distributeAmount)

IRs:
Emit Transfer(owner,msg.sender,distributeAmount)"];
}
// Function: 458.sol-BintechToken-balanceOf(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
balances[_owner]

IRs:
REF_9(uint256) -> balances[_owner]
RETURN REF_9"];
2[label="Node Type: RETURN 2

EXPRESSION:
balance

IRs:
RETURN balance"];
}
// Function: 458.sol-BintechToken-burn(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->5;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0 && balanceOf(_from) >= _unitAmount)

IRs:
TMP_127(bool) = _unitAmount > 0
TMP_128(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(_from)
TMP_129(bool) = TMP_128 >= _unitAmount
TMP_130(bool) = TMP_127 && TMP_129
TMP_131(None) = SOLIDITY_CALL require(bool)(TMP_130)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[_from] = SafeMath.sub(balances[_from],_unitAmount)

IRs:
REF_56(uint256) -> balances[_from]
REF_58(uint256) -> balances[_from]
TMP_132(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_58', '_unitAmount'] 
REF_56(uint256) (->balances) := TMP_132(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
totalSupply = SafeMath.sub(totalSupply,_unitAmount)

IRs:
TMP_133(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_133(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Burn(_from,_unitAmount)

IRs:
Emit Burn(_from,_unitAmount)"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
5->1;
}
// Function: 458.sol-BintechToken-canMint()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! mintingFinished)

IRs:
TMP_242 = UnaryType.BANG mintingFinished 
TMP_243(None) = SOLIDITY_CALL require(bool)(TMP_242)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 458.sol-BintechToken-collectTokens(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length > 0 && addresses.length == amounts.length)

IRs:
REF_116 -> LENGTH addresses
TMP_198(bool) = REF_116 > 0
REF_117 -> LENGTH addresses
REF_118 -> LENGTH amounts
TMP_199(bool) = REF_117 == REF_118
TMP_200(bool) = TMP_198 && TMP_199
TMP_201(None) = SOLIDITY_CALL require(bool)(TMP_200)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->14;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_119 -> LENGTH addresses
TMP_202(bool) = i < REF_119
CONDITION TMP_202"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amounts[i] > 0 && addresses[i] != 0x0 && frozenAccount[addresses[i]] == false && now > unlockUnixTime[addresses[i]])

IRs:
REF_120(uint256) -> amounts[i]
TMP_203(bool) = REF_120 > 0
REF_121(address) -> addresses[i]
TMP_204(bool) = REF_121 != 0
TMP_205(bool) = TMP_203 && TMP_204
REF_122(address) -> addresses[i]
REF_123(bool) -> frozenAccount[REF_122]
TMP_206(bool) = REF_123 == False
TMP_207(bool) = TMP_205 && TMP_206
REF_124(address) -> addresses[i]
REF_125(uint256) -> unlockUnixTime[REF_124]
TMP_208(bool) = now > REF_125
TMP_209(bool) = TMP_207 && TMP_208
TMP_210(None) = SOLIDITY_CALL require(bool)(TMP_209)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amounts[i] = SafeMath.mul(amounts[i],1e8)

IRs:
REF_126(uint256) -> amounts[i]
REF_128(uint256) -> amounts[i]
TMP_211(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_128', '100000000'] 
REF_126(uint256) (->amounts) := TMP_211(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(balances[addresses[i]] >= amounts[i])

IRs:
REF_129(address) -> addresses[i]
REF_130(uint256) -> balances[REF_129]
REF_131(uint256) -> amounts[i]
TMP_212(bool) = REF_130 >= REF_131
TMP_213(None) = SOLIDITY_CALL require(bool)(TMP_212)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[addresses[i]] = SafeMath.sub(balances[addresses[i]],amounts[i])

IRs:
REF_132(address) -> addresses[i]
REF_133(uint256) -> balances[REF_132]
REF_135(address) -> addresses[i]
REF_136(uint256) -> balances[REF_135]
REF_137(uint256) -> amounts[i]
TMP_214(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_136', 'REF_137'] 
REF_133(uint256) (->balances) := TMP_214(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalAmount = SafeMath.add(totalAmount,amounts[i])

IRs:
REF_139(uint256) -> amounts[i]
TMP_215(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'REF_139'] 
totalAmount(uint256) := TMP_215(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
Transfer(addresses[i],msg.sender,amounts[i])

IRs:
REF_140(address) -> addresses[i]
REF_141(uint256) -> amounts[i]
Emit Transfer(REF_140,msg.sender,REF_141)"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
i ++

IRs:
TMP_217(uint256) := i(uint256)
i(uint256) = i + 1"];
13->6;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
balances[msg.sender] = SafeMath.add(balances[msg.sender],totalAmount)

IRs:
REF_142(uint256) -> balances[msg.sender]
REF_144(uint256) -> balances[msg.sender]
TMP_218(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_144', 'totalAmount'] 
REF_142(uint256) (->balances) := TMP_218(uint256)"];
14->15;
15[label="Node Type: RETURN 15

EXPRESSION:
true

IRs:
RETURN True"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
16->1;
}
// Function: 458.sol-BintechToken-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
totalSupply = initialSupply

IRs:
totalSupply(uint256) := initialSupply(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balances[msg.sender] = totalSupply

IRs:
REF_8(uint256) -> balances[msg.sender]
REF_8(uint256) (->balances) := totalSupply(uint256)"];
}
// Function: 458.sol-BintechToken-decimals()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
decimals

IRs:
RETURN decimals"];
2[label="Node Type: RETURN 2

EXPRESSION:
_decimals

IRs:
RETURN _decimals"];
}
// Function: 458.sol-BintechToken-distributeTokens(address[],uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(amount > 0 && addresses.length > 0 && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender])

IRs:
TMP_148(bool) = amount > 0
REF_64 -> LENGTH addresses
TMP_149(bool) = REF_64 > 0
TMP_150(bool) = TMP_148 && TMP_149
REF_65(bool) -> frozenAccount[msg.sender]
TMP_151(bool) = REF_65 == False
TMP_152(bool) = TMP_150 && TMP_151
REF_66(uint256) -> unlockUnixTime[msg.sender]
TMP_153(bool) = now > REF_66
TMP_154(bool) = TMP_152 && TMP_153
TMP_155(None) = SOLIDITY_CALL require(bool)(TMP_154)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
amount = SafeMath.mul(amount,1e8)

IRs:
TMP_156(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', '100000000'] 
amount(uint256) := TMP_156(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
totalAmount = SafeMath.mul(amount,addresses.length)

IRs:
REF_69 -> LENGTH addresses
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['amount', 'REF_69'] 
totalAmount(uint256) := TMP_157(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(balances[msg.sender] >= totalAmount)

IRs:
REF_70(uint256) -> balances[msg.sender]
TMP_158(bool) = REF_70 >= totalAmount
TMP_159(None) = SOLIDITY_CALL require(bool)(TMP_158)"];
4->7;
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->13;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < addresses.length

IRs:
REF_71 -> LENGTH addresses
TMP_160(bool) = i < REF_71
CONDITION TMP_160"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
require(bool)(addresses[i] != 0x0 && frozenAccount[addresses[i]] == false && now > unlockUnixTime[addresses[i]])

IRs:
REF_72(address) -> addresses[i]
TMP_161(bool) = REF_72 != 0
REF_73(address) -> addresses[i]
REF_74(bool) -> frozenAccount[REF_73]
TMP_162(bool) = REF_74 == False
TMP_163(bool) = TMP_161 && TMP_162
REF_75(address) -> addresses[i]
REF_76(uint256) -> unlockUnixTime[REF_75]
TMP_164(bool) = now > REF_76
TMP_165(bool) = TMP_163 && TMP_164
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
balances[addresses[i]] = SafeMath.add(balances[addresses[i]],amount)

IRs:
REF_77(address) -> addresses[i]
REF_78(uint256) -> balances[REF_77]
REF_80(address) -> addresses[i]
REF_81(uint256) -> balances[REF_80]
TMP_167(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_81', 'amount'] 
REF_78(uint256) (->balances) := TMP_167(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
Transfer(msg.sender,addresses[i],amount)

IRs:
REF_82(address) -> addresses[i]
Emit Transfer(msg.sender,REF_82,amount)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
i ++

IRs:
TMP_169(uint256) := i(uint256)
i(uint256) = i + 1"];
12->8;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balances[msg.sender],totalAmount)

IRs:
REF_83(uint256) -> balances[msg.sender]
REF_85(uint256) -> balances[msg.sender]
TMP_170(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_85', 'totalAmount'] 
REF_83(uint256) (->balances) := TMP_170(uint256)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 458.sol-BintechToken-distributeTokens(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(addresses.length > 0 && addresses.length == amounts.length && frozenAccount[msg.sender] == false && now > unlockUnixTime[msg.sender])

IRs:
REF_86 -> LENGTH addresses
TMP_171(bool) = REF_86 > 0
REF_87 -> LENGTH addresses
REF_88 -> LENGTH amounts
TMP_172(bool) = REF_87 == REF_88
TMP_173(bool) = TMP_171 && TMP_172
REF_89(bool) -> frozenAccount[msg.sender]
TMP_174(bool) = REF_89 == False
TMP_175(bool) = TMP_173 && TMP_174
REF_90(uint256) -> unlockUnixTime[msg.sender]
TMP_176(bool) = now > REF_90
TMP_177(bool) = TMP_175 && TMP_176
TMP_178(None) = SOLIDITY_CALL require(bool)(TMP_177)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
totalAmount = 0

IRs:
totalAmount(uint256) := 0(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->11;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < addresses.length

IRs:
REF_91 -> LENGTH addresses
TMP_179(bool) = i < REF_91
CONDITION TMP_179"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(amounts[i] > 0 && addresses[i] != 0x0 && frozenAccount[addresses[i]] == false && now > unlockUnixTime[addresses[i]])

IRs:
REF_92(uint256) -> amounts[i]
TMP_180(bool) = REF_92 > 0
REF_93(address) -> addresses[i]
TMP_181(bool) = REF_93 != 0
TMP_182(bool) = TMP_180 && TMP_181
REF_94(address) -> addresses[i]
REF_95(bool) -> frozenAccount[REF_94]
TMP_183(bool) = REF_95 == False
TMP_184(bool) = TMP_182 && TMP_183
REF_96(address) -> addresses[i]
REF_97(uint256) -> unlockUnixTime[REF_96]
TMP_185(bool) = now > REF_97
TMP_186(bool) = TMP_184 && TMP_185
TMP_187(None) = SOLIDITY_CALL require(bool)(TMP_186)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
amounts[i] = amounts[i].mul(1e8)

IRs:
REF_98(uint256) -> amounts[i]
REF_99(uint256) -> amounts[i]
TMP_188(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_99', '100000000'] 
REF_98(uint256) (->amounts) := TMP_188(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
totalAmount = SafeMath.add(totalAmount,amounts[i])

IRs:
REF_102(uint256) -> amounts[i]
TMP_189(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalAmount', 'REF_102'] 
totalAmount(uint256) := TMP_189(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
i ++

IRs:
TMP_190(uint256) := i(uint256)
i(uint256) = i + 1"];
10->6;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(balances[msg.sender] >= totalAmount)

IRs:
REF_103(uint256) -> balances[msg.sender]
TMP_191(bool) = REF_103 >= totalAmount
TMP_192(None) = SOLIDITY_CALL require(bool)(TMP_191)"];
11->14;
12[label="Node Type: BEGIN_LOOP 12
"];
12->15;
13[label="Node Type: END_LOOP 13
"];
13->19;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
14->12;
15[label="Node Type: IF_LOOP 15

EXPRESSION:
i < addresses.length

IRs:
REF_104 -> LENGTH addresses
TMP_193(bool) = i < REF_104
CONDITION TMP_193"];
15->16[label="True"];
15->13[label="False"];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
balances[addresses[i]] = SafeMath.add(balances[addresses[i]],amounts[i])

IRs:
REF_105(address) -> addresses[i]
REF_106(uint256) -> balances[REF_105]
REF_108(address) -> addresses[i]
REF_109(uint256) -> balances[REF_108]
REF_110(uint256) -> amounts[i]
TMP_194(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_109', 'REF_110'] 
REF_106(uint256) (->balances) := TMP_194(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
Transfer(msg.sender,addresses[i],amounts[i])

IRs:
REF_111(address) -> addresses[i]
REF_112(uint256) -> amounts[i]
Emit Transfer(msg.sender,REF_111,REF_112)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
i ++

IRs:
TMP_196(uint256) := i(uint256)
i(uint256) = i + 1"];
18->15;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
balances[msg.sender] = balances[msg.sender].sub(totalAmount)

IRs:
REF_113(uint256) -> balances[msg.sender]
REF_114(uint256) -> balances[msg.sender]
TMP_197(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_114', 'totalAmount'] 
REF_113(uint256) (->balances) := TMP_197(uint256)"];
19->20;
20[label="Node Type: RETURN 20

EXPRESSION:
true

IRs:
RETURN True"];
}
// Function: 458.sol-BintechToken-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
autoDistribute()

IRs:
INTERNAL_CALL, BintechToken.autoDistribute()()"];
}
// Function: 458.sol-BintechToken-finishMinting()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
mintingFinished = true

IRs:
mintingFinished(bool) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
MintFinished()

IRs:
Emit MintFinished()"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
true

IRs:
RETURN True"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, BintechToken.canMint()()"];
5->1;
}
// Function: 458.sol-BintechToken-freezeAccounts(address[],bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(targets.length > 0)

IRs:
REF_38 -> LENGTH targets
TMP_109(bool) = REF_38 > 0
TMP_110(None) = SOLIDITY_CALL require(bool)(TMP_109)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < targets.length

IRs:
REF_39 -> LENGTH targets
TMP_111(bool) = i < REF_39
CONDITION TMP_111"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(targets[i] != 0x0)

IRs:
REF_40(address) -> targets[i]
TMP_112(bool) = REF_40 != 0
TMP_113(None) = SOLIDITY_CALL require(bool)(TMP_112)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
frozenAccount[targets[i]] = isFrozen

IRs:
REF_41(address) -> targets[i]
REF_42(bool) -> frozenAccount[REF_41]
REF_42(bool) (->frozenAccount) := isFrozen(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
FrozenFunds(targets[i],isFrozen)

IRs:
REF_43(address) -> targets[i]
Emit FrozenFunds(REF_43,isFrozen)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_115(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 458.sol-BintechToken-isContract(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: INLINE ASM 2
"];
2->3;
3[label="Node Type: END INLINE ASM 3
"];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
(length > 0)

IRs:
TMP_88(bool) = length > 0
RETURN TMP_88"];
5[label="Node Type: RETURN 5

EXPRESSION:
is_contract

IRs:
RETURN is_contract"];
}
// Function: 458.sol-BintechToken-lockupAccounts(address[],uint256[])
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->10;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(targets.length > 0 && targets.length == unixTimes.length)

IRs:
REF_44 -> LENGTH targets
TMP_117(bool) = REF_44 > 0
REF_45 -> LENGTH targets
REF_46 -> LENGTH unixTimes
TMP_118(bool) = REF_45 == REF_46
TMP_119(bool) = TMP_117 && TMP_118
TMP_120(None) = SOLIDITY_CALL require(bool)(TMP_119)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < targets.length

IRs:
REF_47 -> LENGTH targets
TMP_121(bool) = i < REF_47
CONDITION TMP_121"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool)(unlockUnixTime[targets[i]] < unixTimes[i])

IRs:
REF_48(address) -> targets[i]
REF_49(uint256) -> unlockUnixTime[REF_48]
REF_50(uint256) -> unixTimes[i]
TMP_122(bool) = REF_49 < REF_50
TMP_123(None) = SOLIDITY_CALL require(bool)(TMP_122)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
unlockUnixTime[targets[i]] = unixTimes[i]

IRs:
REF_51(address) -> targets[i]
REF_52(uint256) -> unlockUnixTime[REF_51]
REF_53(uint256) -> unixTimes[i]
REF_52(uint256) (->unlockUnixTime) := REF_53(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
LockedFunds(targets[i],unixTimes[i])

IRs:
REF_54(address) -> targets[i]
REF_55(uint256) -> unixTimes[i]
Emit LockedFunds(REF_54,REF_55)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_125(uint256) := i(uint256)
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
10->1;
}
// Function: 458.sol-BintechToken-mint(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_unitAmount > 0)

IRs:
TMP_136(bool) = _unitAmount > 0
TMP_137(None) = SOLIDITY_CALL require(bool)(TMP_136)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
totalSupply = SafeMath.add(totalSupply,_unitAmount)

IRs:
TMP_138(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['totalSupply', '_unitAmount'] 
totalSupply(uint256) := TMP_138(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balances[_to] = SafeMath.add(balances[_to],_unitAmount)

IRs:
REF_61(uint256) -> balances[_to]
REF_63(uint256) -> balances[_to]
TMP_139(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_63', '_unitAmount'] 
REF_61(uint256) (->balances) := TMP_139(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
Mint(_to,_unitAmount)

IRs:
Emit Mint(_to,_unitAmount)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
Transfer(address(0),_to,_unitAmount)

IRs:
TMP_141 = CONVERT 0 to address
Emit Transfer(TMP_141,_to,_unitAmount)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
canMint()

IRs:
MODIFIER_CALL, BintechToken.canMint()()"];
8->1;
}
// Function: 458.sol-BintechToken-name()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
name

IRs:
RETURN name"];
2[label="Node Type: RETURN 2

EXPRESSION:
_name

IRs:
RETURN _name"];
}
// Function: 458.sol-BintechToken-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_237(bool) = msg.sender == owner
TMP_238(None) = SOLIDITY_CALL require(bool)(TMP_237)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 458.sol-BintechToken-onlyPayloadSize(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(msg.data.length >= size + 4)

IRs:
REF_154 -> LENGTH msg.data
TMP_239(uint256) = size + 4
TMP_240(bool) = REF_154 >= TMP_239
TMP_241(None) = SOLIDITY_CALL assert(bool)(TMP_240)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 458.sol-BintechToken-setDistributeAmount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
distributeAmount = _unitAmount

IRs:
distributeAmount(uint256) := _unitAmount(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
2->1;
}
// Function: 458.sol-BintechToken-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = BintechToken

IRs:
name(string) := BintechToken(string)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
symbol = BTT

IRs:
symbol(string) := BTT(string)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
decimals = 8

IRs:
decimals(uint8) := 8(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
initialSupply = 2e8 * 1e8

IRs:
TMP_236(uint256) = 200000000 * 100000000
initialSupply(uint256) := TMP_236(uint256)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
distributeAmount = 0

IRs:
distributeAmount(uint256) := 0(uint256)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
mintingFinished = false

IRs:
mintingFinished(bool) := False(bool)"];
}
// Function: 458.sol-BintechToken-symbol()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
symbol

IRs:
RETURN symbol"];
2[label="Node Type: RETURN 2

EXPRESSION:
_symbol

IRs:
RETURN _symbol"];
}
// Function: 458.sol-BintechToken-totalSupply()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
totalSupply

IRs:
RETURN totalSupply"];
2[label="Node Type: RETURN 2

EXPRESSION:
_totalSupply

IRs:
RETURN _totalSupply"];
}
// Function: 458.sol-BintechToken-transfer(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_75(bool) = _value > 0
REF_25(bool) -> frozenAccount[msg.sender]
TMP_76(bool) = REF_25 == False
TMP_77(bool) = TMP_75 && TMP_76
REF_26(bool) -> frozenAccount[_to]
TMP_78(bool) = REF_26 == False
TMP_79(bool) = TMP_77 && TMP_78
REF_27(uint256) -> unlockUnixTime[msg.sender]
TMP_80(bool) = now > REF_27
TMP_81(bool) = TMP_79 && TMP_80
REF_28(uint256) -> unlockUnixTime[_to]
TMP_82(bool) = now > REF_28
TMP_83(bool) = TMP_81 && TMP_82
TMP_84(None) = SOLIDITY_CALL require(bool)(TMP_83)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
isContract(_to)

IRs:
TMP_85(bool) = INTERNAL_CALL, BintechToken.isContract(address)(_to)
CONDITION TMP_85"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToContract(_to,_value,empty)

IRs:
TMP_86(bool) = INTERNAL_CALL, BintechToken.transferToContract(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_86"];
5[label="Node Type: RETURN 5

EXPRESSION:
transferToAddress(_to,_value,empty)

IRs:
TMP_87(bool) = INTERNAL_CALL, BintechToken.transferToAddress(address,uint256,bytes)(_to,_value,empty)
RETURN TMP_87"];
7[label="Node Type: RETURN 7

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 458.sol-BintechToken-transfer(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_62(bool) = _value > 0
REF_21(bool) -> frozenAccount[msg.sender]
TMP_63(bool) = REF_21 == False
TMP_64(bool) = TMP_62 && TMP_63
REF_22(bool) -> frozenAccount[_to]
TMP_65(bool) = REF_22 == False
TMP_66(bool) = TMP_64 && TMP_65
REF_23(uint256) -> unlockUnixTime[msg.sender]
TMP_67(bool) = now > REF_23
TMP_68(bool) = TMP_66 && TMP_67
REF_24(uint256) -> unlockUnixTime[_to]
TMP_69(bool) = now > REF_24
TMP_70(bool) = TMP_68 && TMP_69
TMP_71(None) = SOLIDITY_CALL require(bool)(TMP_70)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_72(bool) = INTERNAL_CALL, BintechToken.isContract(address)(_to)
CONDITION TMP_72"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
transferToContract(_to,_value,_data)

IRs:
TMP_73(bool) = INTERNAL_CALL, BintechToken.transferToContract(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_73"];
4[label="Node Type: RETURN 4

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_74(bool) = INTERNAL_CALL, BintechToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_74"];
6[label="Node Type: RETURN 6

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 458.sol-BintechToken-transfer(address,uint256,bytes,string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false && now > unlockUnixTime[msg.sender] && now > unlockUnixTime[_to])

IRs:
TMP_35(bool) = _value > 0
REF_10(bool) -> frozenAccount[msg.sender]
TMP_36(bool) = REF_10 == False
TMP_37(bool) = TMP_35 && TMP_36
REF_11(bool) -> frozenAccount[_to]
TMP_38(bool) = REF_11 == False
TMP_39(bool) = TMP_37 && TMP_38
REF_12(uint256) -> unlockUnixTime[msg.sender]
TMP_40(bool) = now > REF_12
TMP_41(bool) = TMP_39 && TMP_40
REF_13(uint256) -> unlockUnixTime[_to]
TMP_42(bool) = now > REF_13
TMP_43(bool) = TMP_41 && TMP_42
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
isContract(_to)

IRs:
TMP_45(bool) = INTERNAL_CALL, BintechToken.isContract(address)(_to)
CONDITION TMP_45"];
2->3[label="True"];
2->12[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_46(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_47(bool) = TMP_46 < _value
CONDITION TMP_47"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
revert()()

IRs:
TMP_48(None) = SOLIDITY_CALL revert()()"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_14(uint256) -> balances[msg.sender]
TMP_49(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_50(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_49', '_value'] 
REF_14(uint256) (->balances) := TMP_50(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_16(uint256) -> balances[_to]
TMP_51(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(_to)
TMP_52(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_51', '_value'] 
REF_16(uint256) (->balances) := TMP_52(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
assert(bool)(_to.call.value(0)(bytes4(keccak256()(abi.encodePacked(_custom_fallback))),msg.sender,_value,_data))

IRs:
TMP_54(bytes) = SOLIDITY_CALL abi.encodePacked()(_custom_fallback)
TMP_55(bytes32) = SOLIDITY_CALL keccak256()(TMP_54)
TMP_56 = CONVERT TMP_55 to bytes4
TMP_57(bool) = LOW_LEVEL_CALL, dest:_to, function:call, arguments:['TMP_56', 'msg.sender', '_value', '_data'] value:0 
TMP_58(None) = SOLIDITY_CALL assert(bool)(TMP_57)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
true

IRs:
RETURN True"];
12[label="Node Type: RETURN 12

EXPRESSION:
transferToAddress(_to,_value,_data)

IRs:
TMP_61(bool) = INTERNAL_CALL, BintechToken.transferToAddress(address,uint256,bytes)(_to,_value,_data)
RETURN TMP_61"];
14[label="Node Type: RETURN 14

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 458.sol-BintechToken-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_30 = CONVERT 0 to address
TMP_31(bool) = newOwner != TMP_30
TMP_32(None) = SOLIDITY_CALL require(bool)(TMP_31)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 458.sol-BintechToken-transferToAddress(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_89(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_90(bool) = TMP_89 < _value
CONDITION TMP_90"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_91(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_29(uint256) -> balances[msg.sender]
TMP_92(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_93(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_92', '_value'] 
REF_29(uint256) (->balances) := TMP_93(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_31(uint256) -> balances[_to]
TMP_94(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(_to)
TMP_95(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_94', '_value'] 
REF_31(uint256) (->balances) := TMP_95(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
9[label="Node Type: RETURN 9

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 458.sol-BintechToken-transferToContract(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
balanceOf(msg.sender) < _value

IRs:
TMP_98(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_99(bool) = TMP_98 < _value
CONDITION TMP_99"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
revert()()

IRs:
TMP_100(None) = SOLIDITY_CALL revert()()"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender),_value)

IRs:
REF_33(uint256) -> balances[msg.sender]
TMP_101(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(msg.sender)
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_101', '_value'] 
REF_33(uint256) (->balances) := TMP_102(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
balances[_to] = SafeMath.add(balanceOf(_to),_value)

IRs:
REF_35(uint256) -> balances[_to]
TMP_103(uint256) = INTERNAL_CALL, BintechToken.balanceOf(address)(_to)
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_103', '_value'] 
REF_35(uint256) (->balances) := TMP_104(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
receiver = ContractReceiver(_to)

IRs:
TMP_105 = CONVERT _to to ContractReceiver
receiver(ContractReceiver) := TMP_105(ContractReceiver)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
receiver.tokenFallback(msg.sender,_value,_data)

IRs:
HIGH_LEVEL_CALL, dest:receiver(ContractReceiver), function:tokenFallback, arguments:['msg.sender', '_value', '_data']  "];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
Transfer(msg.sender,_to,_value,_data)

IRs:
Emit Transfer(msg.sender,_to,_value,_data)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
Transfer(msg.sender,_to,_value)

IRs:
Emit Transfer(msg.sender,_to,_value)"];
9->10;
10[label="Node Type: RETURN 10

EXPRESSION:
true

IRs:
RETURN True"];
11[label="Node Type: RETURN 11

EXPRESSION:
success

IRs:
RETURN success"];
}
// Function: 458.sol-ContractReceiver-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tkn.sender = _from

IRs:
REF_0(address) -> tkn.sender
REF_0(address) (->tkn) := _from(address)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
tkn.value = _value

IRs:
REF_1(uint256) -> tkn.value
REF_1(uint256) (->tkn) := _value(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
tkn.data = _data

IRs:
REF_2(bytes) -> tkn.data
REF_2(bytes) (->tkn) := _data(bytes)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24)

IRs:
REF_3(None) -> _data[3]
TMP_0 = CONVERT REF_3 to uint32
REF_4(None) -> _data[2]
TMP_1 = CONVERT REF_4 to uint32
TMP_2(uint32) = TMP_1 << 8
TMP_3(uint32) = TMP_0 + TMP_2
REF_5(None) -> _data[1]
TMP_4 = CONVERT REF_5 to uint32
TMP_5(uint32) = TMP_4 << 16
TMP_6(uint32) = TMP_3 + TMP_5
REF_6(None) -> _data[0]
TMP_7 = CONVERT REF_6 to uint32
TMP_8(uint32) = TMP_7 << 24
TMP_9(uint32) = TMP_6 + TMP_8
u(uint32) := TMP_9(uint32)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
tkn.sig = bytes4(u)

IRs:
REF_7(bytes4) -> tkn.sig
TMP_10 = CONVERT u to bytes4
REF_7(bytes4) (->tkn) := TMP_10(bytes4)"];
}
// Function: 458.sol-ERC223-balanceOf(address)
digraph{
}
// Function: 458.sol-ERC223-decimals()
digraph{
}
// Function: 458.sol-ERC223-name()
digraph{
}
// Function: 458.sol-ERC223-symbol()
digraph{
}
// Function: 458.sol-ERC223-totalSupply()
digraph{
}
// Function: 458.sol-ERC223-transfer(address,uint256)
digraph{
}
// Function: 458.sol-ERC223-transfer(address,uint256,bytes)
digraph{
}
// Function: 458.sol-ERC223-transfer(address,uint256,bytes,string)
digraph{
}
// Function: 458.sol-Ownable-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 458.sol-Ownable-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_16(bool) = msg.sender == owner
TMP_17(None) = SOLIDITY_CALL require(bool)(TMP_16)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 458.sol-Ownable-transferOwnership(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(newOwner != address(0))

IRs:
TMP_11 = CONVERT 0 to address
TMP_12(bool) = newOwner != TMP_11
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
OwnershipTransferred(owner,newOwner)

IRs:
Emit OwnershipTransferred(owner,newOwner)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
owner = newOwner

IRs:
owner(address) := newOwner(address)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Ownable.onlyOwner()()"];
4->1;
}
// Function: 458.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_27(uint256) = a + b
c(uint256) := TMP_27(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_28(bool) = c >= a
TMP_29(None) = SOLIDITY_CALL assert(bool)(TMP_28)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 458.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_23(uint256) = a / b
c(uint256) := TMP_23(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 458.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_18(bool) = a == 0
CONDITION TMP_18"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_19(uint256) = a * b
c(uint256) := TMP_19(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_20(uint256) = c / a
TMP_21(bool) = TMP_20 == b
TMP_22(None) = SOLIDITY_CALL assert(bool)(TMP_21)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 458.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_24(bool) = b <= a
TMP_25(None) = SOLIDITY_CALL assert(bool)(TMP_24)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_26(uint256) = a - b
RETURN TMP_26"];
}
}
