digraph G {
// Function: 969.sol-DiviesInterface-deposit()
digraph{
}
// Function: 969.sol-F3DKeysCalcLong-eth(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((78125000).mul(_keys.sq()).add(((149999843750000).mul(_keys.mul(1000000000000000000))) / (2))) / ((1000000000000000000).sq())

IRs:
TMP_38(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['_keys'] 
TMP_39(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['78125000', 'TMP_38'] 
TMP_40(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_keys', '1000000000000000000'] 
TMP_41(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['149999843750000', 'TMP_40'] 
TMP_42(uint256) = TMP_41 / 2
TMP_43(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_39', 'TMP_42'] 
TMP_44(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sq(uint256), arguments:['1000000000000000000'] 
TMP_45(uint256) = TMP_43 / TMP_44
RETURN TMP_45"];
}
// Function: 969.sol-F3DKeysCalcLong-ethRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((eth(_curKeys)).sub(eth(_curKeys.sub(_sellKeys))))

IRs:
TMP_28(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(_curKeys)
TMP_29(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_curKeys', '_sellKeys'] 
TMP_30(uint256) = INTERNAL_CALL, F3DKeysCalcLong.eth(uint256)(TMP_29)
TMP_31(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_28', 'TMP_30'] 
RETURN TMP_31"];
}
// Function: 969.sol-F3DKeysCalcLong-keys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((((_eth).mul(1000000000000000000)).mul(312500000000000000000000000)).add(5624988281256103515625000000000000000000000000000000000000000000)).sqrt()).sub(74999921875000000000000000000000)) / (156250000)

IRs:
TMP_32(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '1000000000000000000'] 
TMP_33(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_32', '312500000000000000000000000'] 
TMP_34(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_33', '5624988281256103515625000000000000000000000000000000000000000000'] 
TMP_35(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sqrt(uint256), arguments:['TMP_34'] 
TMP_36(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_35', '74999921875000000000000000000000'] 
TMP_37(uint256) = TMP_36 / 156250000
RETURN TMP_37"];
}
// Function: 969.sol-F3DKeysCalcLong-keysRec(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(keys((_curEth).add(_newEth)).sub(keys(_curEth)))

IRs:
TMP_24(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_curEth', '_newEth'] 
TMP_25(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(TMP_24)
TMP_26(uint256) = INTERNAL_CALL, F3DKeysCalcLong.keys(uint256)(_curEth)
TMP_27(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_25', 'TMP_26'] 
RETURN TMP_27"];
}
// Function: 969.sol-F3DexternalSettingsInterface-getFastExtra()
digraph{
}
// Function: 969.sol-F3DexternalSettingsInterface-getFastGap()
digraph{
}
// Function: 969.sol-F3DexternalSettingsInterface-getLongExtra()
digraph{
}
// Function: 969.sol-F3DexternalSettingsInterface-getLongGap()
digraph{
}
// Function: 969.sol-FoMo3Dlong-activate()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(otherF3D_) != address(0),must link to other FoMo3D first)

IRs:
TMP_530 = CONVERT otherF3D_ to address
TMP_531 = CONVERT 0 to address
TMP_532(bool) = TMP_530 != TMP_531
TMP_533(None) = SOLIDITY_CALL require(bool,string)(TMP_532,must link to other FoMo3D first)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(activated_ == false,fomo3d already activated)

IRs:
TMP_534(bool) = activated_ == False
TMP_535(None) = SOLIDITY_CALL require(bool,string)(TMP_534,fomo3d already activated)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
activated_ = true

IRs:
activated_(bool) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
rID_ = 1

IRs:
rID_(uint256) := 1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
round_[1].strt = now + rndExtra_ - rndGap_

IRs:
REF_755(F3Ddatasets.Round) -> round_[1]
REF_756(uint256) -> REF_755.strt
TMP_536(uint256) = now + rndExtra_
TMP_537(uint256) = TMP_536 - rndGap_
REF_756(uint256) (->round_) := TMP_537(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[1].end = now + rndInit_ + rndExtra_

IRs:
REF_757(F3Ddatasets.Round) -> round_[1]
REF_758(uint256) -> REF_757.end
TMP_538(uint256) = now + rndInit_
TMP_539(uint256) = TMP_538 + rndExtra_
REF_758(uint256) (->round_) := TMP_539(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, FoMo3Dlong.onlyDevs()()"];
7->1;
}
// Function: 969.sol-FoMo3Dlong-airdrop()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
airDropTracker_ == 10000 || airDropTracker_ == 100000 || airDropTracker_ == 1000000 || airDropTracker_ == 10000000 || airDropTracker_ == 100000000 || airDropTracker_ == 1000000000

IRs:
TMP_468(bool) = airDropTracker_ == 10000
TMP_469(bool) = airDropTracker_ == 100000
TMP_470(bool) = TMP_468 || TMP_469
TMP_471(bool) = airDropTracker_ == 1000000
TMP_472(bool) = TMP_470 || TMP_471
TMP_473(bool) = airDropTracker_ == 10000000
TMP_474(bool) = TMP_472 || TMP_473
TMP_475(bool) = airDropTracker_ == 100000000
TMP_476(bool) = TMP_474 || TMP_475
TMP_477(bool) = airDropTracker_ == 1000000000
TMP_478(bool) = TMP_476 || TMP_477
CONDITION TMP_478"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(true)

IRs:
RETURN True"];
3[label="Node Type: RETURN 3

EXPRESSION:
(false)

IRs:
RETURN False"];
}
// Function: 969.sol-FoMo3Dlong-buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_309(F3Ddatasets.Round) -> round_[_rID]
REF_310(uint256) -> REF_309.strt
TMP_280(uint256) = REF_310 + rndGap_
TMP_281(bool) = _now > TMP_280
REF_311(F3Ddatasets.Round) -> round_[_rID]
REF_312(uint256) -> REF_311.end
TMP_282(bool) = _now <= REF_312
REF_313(F3Ddatasets.Round) -> round_[_rID]
REF_314(uint256) -> REF_313.end
TMP_283(bool) = _now > REF_314
REF_315(F3Ddatasets.Round) -> round_[_rID]
REF_316(uint256) -> REF_315.plyr
TMP_284(bool) = REF_316 == 0
TMP_285(bool) = TMP_283 && TMP_284
TMP_286(bool) = TMP_282 || TMP_285
TMP_287(bool) = TMP_281 && TMP_286
CONDITION TMP_287"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
core(_rID,_pID,msg.value,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,msg.value,_affID,_team,_eventData_)"];
4->13;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_317(F3Ddatasets.Round) -> round_[_rID]
REF_318(uint256) -> REF_317.end
TMP_289(bool) = _now > REF_318
REF_319(F3Ddatasets.Round) -> round_[_rID]
REF_320(bool) -> REF_319.ended
TMP_290(bool) = REF_320 == False
TMP_291(bool) = TMP_289 && TMP_290
CONDITION TMP_291"];
5->6[label="True"];
5->11[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_321(F3Ddatasets.Round) -> round_[_rID]
REF_322(bool) -> REF_321.ended
REF_322(bool) (->round_) := True(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_292(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_292(F3Ddatasets.EventReturns)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_323(uint256) -> _eventData_.compressedData
REF_324(uint256) -> _eventData_.compressedData
TMP_293(uint256) = _now * 1000000000000000000
TMP_294(uint256) = REF_324 + TMP_293
REF_323(uint256) (->_eventData_) := TMP_294(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_325(uint256) -> _eventData_.compressedIDs
REF_326(uint256) -> _eventData_.compressedIDs
TMP_295(uint256) = REF_326 + _pID
REF_325(uint256) (->_eventData_) := TMP_295(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
F3Devents.onBuyAndDistribute(msg.sender,plyr_[_pID].name,msg.value,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_328(F3Ddatasets.Player) -> plyr_[_pID]
REF_329(bytes32) -> REF_328.name
REF_330(uint256) -> _eventData_.compressedData
REF_331(uint256) -> _eventData_.compressedIDs
REF_332(address) -> _eventData_.winnerAddr
REF_333(bytes32) -> _eventData_.winnerName
REF_334(uint256) -> _eventData_.amountWon
REF_335(uint256) -> _eventData_.newPot
REF_336(uint256) -> _eventData_.P3DAmount
REF_337(uint256) -> _eventData_.genAmount
Emit onBuyAndDistribute(msg.sender,REF_329,msg.value,REF_330,REF_331,REF_332,REF_333,REF_334,REF_335,REF_336,REF_337)"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(msg.value)

IRs:
REF_338(F3Ddatasets.Player) -> plyr_[_pID]
REF_339(uint256) -> REF_338.gen
REF_340(F3Ddatasets.Player) -> plyr_[_pID]
REF_341(uint256) -> REF_340.gen
TMP_297(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_341', 'msg.value'] 
REF_339(uint256) (->plyr_) := TMP_297(uint256)"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 969.sol-FoMo3Dlong-buyXaddr(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_151(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_151(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_76(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_76(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_152 = CONVERT 0 to address
TMP_153(bool) = _affCode == TMP_152
TMP_154(bool) = _affCode == msg.sender
TMP_155(bool) = TMP_153 || TMP_154
CONDITION TMP_155"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_77(F3Ddatasets.Player) -> plyr_[_pID]
REF_78(uint256) -> REF_77.laff
_affID(uint256) := REF_78(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_79(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_79(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_80(F3Ddatasets.Player) -> plyr_[_pID]
REF_81(uint256) -> REF_80.laff
TMP_156(bool) = _affID != REF_81
CONDITION TMP_156"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_82(F3Ddatasets.Player) -> plyr_[_pID]
REF_83(uint256) -> REF_82.laff
REF_83(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_157(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_157(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 969.sol-FoMo3Dlong-buyXid(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_141(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_141(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_69(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_69(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_142(bool) = _affCode == 0
TMP_143(bool) = _affCode == _pID
TMP_144(bool) = TMP_142 || TMP_143
CONDITION TMP_144"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_70(F3Ddatasets.Player) -> plyr_[_pID]
REF_71(uint256) -> REF_70.laff
_affCode(uint256) := REF_71(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_72(F3Ddatasets.Player) -> plyr_[_pID]
REF_73(uint256) -> REF_72.laff
TMP_145(bool) = _affCode != REF_73
CONDITION TMP_145"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_74(F3Ddatasets.Player) -> plyr_[_pID]
REF_75(uint256) -> REF_74.laff
REF_75(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_146(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_146(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
buyCore(_pID,_affCode,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
13->1;
}
// Function: 969.sol-FoMo3Dlong-buyXname(bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_162(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_162(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_84(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_84(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_163(bool) = _affCode == 
REF_85(F3Ddatasets.Player) -> plyr_[_pID]
REF_86(bytes32) -> REF_85.name
TMP_164(bool) = _affCode == REF_86
TMP_165(bool) = TMP_163 || TMP_164
CONDITION TMP_165"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_87(F3Ddatasets.Player) -> plyr_[_pID]
REF_88(uint256) -> REF_87.laff
_affID(uint256) := REF_88(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_89(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_89(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_90(F3Ddatasets.Player) -> plyr_[_pID]
REF_91(uint256) -> REF_90.laff
TMP_166(bool) = _affID != REF_91
CONDITION TMP_166"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_92(F3Ddatasets.Player) -> plyr_[_pID]
REF_93(uint256) -> REF_92.laff
REF_93(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_167(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_167(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
buyCore(_pID,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
15->1;
}
// Function: 969.sol-FoMo3Dlong-calcKeysReceived(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_498(F3Ddatasets.Round) -> round_[_rID]
REF_499(uint256) -> REF_498.strt
TMP_373(uint256) = REF_499 + rndGap_
TMP_374(bool) = _now > TMP_373
REF_500(F3Ddatasets.Round) -> round_[_rID]
REF_501(uint256) -> REF_500.end
TMP_375(bool) = _now <= REF_501
REF_502(F3Ddatasets.Round) -> round_[_rID]
REF_503(uint256) -> REF_502.end
TMP_376(bool) = _now > REF_503
REF_504(F3Ddatasets.Round) -> round_[_rID]
REF_505(uint256) -> REF_504.plyr
TMP_377(bool) = REF_505 == 0
TMP_378(bool) = TMP_376 && TMP_377
TMP_379(bool) = TMP_375 || TMP_378
TMP_380(bool) = TMP_374 && TMP_379
CONDITION TMP_380"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: RETURN 3

EXPRESSION:
((round_[_rID].eth).keysRec(_eth))

IRs:
REF_506(F3Ddatasets.Round) -> round_[_rID]
REF_507(uint256) -> REF_506.eth
TMP_381(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_507', '_eth'] 
RETURN TMP_381"];
4[label="Node Type: RETURN 4

EXPRESSION:
((_eth).keys())

IRs:
TMP_382(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keys(uint256), arguments:['_eth'] 
RETURN TMP_382"];
}
// Function: 969.sol-FoMo3Dlong-calcUnMaskedEarnings(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((((round_[_rIDlast].mask).mul(plyrRnds_[_pID][_rIDlast].keys)) / (1000000000000000000)).sub(plyrRnds_[_pID][_rIDlast].mask))

IRs:
REF_488(F3Ddatasets.Round) -> round_[_rIDlast]
REF_489(uint256) -> REF_488.mask
REF_491(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_492(F3Ddatasets.PlayerRounds) -> REF_491[_rIDlast]
REF_493(uint256) -> REF_492.keys
TMP_370(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_489', 'REF_493'] 
TMP_371(uint256) = TMP_370 / 1000000000000000000
REF_495(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_496(F3Ddatasets.PlayerRounds) -> REF_495[_rIDlast]
REF_497(uint256) -> REF_496.mask
TMP_372(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_371', 'REF_497'] 
RETURN TMP_372"];
}
// Function: 969.sol-FoMo3Dlong-constructor()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
fees_[0] = F3Ddatasets.TeamFee(70,0)

IRs:
REF_46(F3Ddatasets.TeamFee) -> fees_[0]
TMP_128(F3Ddatasets.TeamFee) = new TeamFee(70,0)
REF_46(F3Ddatasets.TeamFee) (->fees_) := TMP_128(F3Ddatasets.TeamFee)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
fees_[1] = F3Ddatasets.TeamFee(60,0)

IRs:
REF_48(F3Ddatasets.TeamFee) -> fees_[1]
TMP_129(F3Ddatasets.TeamFee) = new TeamFee(60,0)
REF_48(F3Ddatasets.TeamFee) (->fees_) := TMP_129(F3Ddatasets.TeamFee)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
fees_[2] = F3Ddatasets.TeamFee(50,0)

IRs:
REF_50(F3Ddatasets.TeamFee) -> fees_[2]
TMP_130(F3Ddatasets.TeamFee) = new TeamFee(50,0)
REF_50(F3Ddatasets.TeamFee) (->fees_) := TMP_130(F3Ddatasets.TeamFee)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
fees_[3] = F3Ddatasets.TeamFee(40,0)

IRs:
REF_52(F3Ddatasets.TeamFee) -> fees_[3]
TMP_131(F3Ddatasets.TeamFee) = new TeamFee(40,0)
REF_52(F3Ddatasets.TeamFee) (->fees_) := TMP_131(F3Ddatasets.TeamFee)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
potSplit_[0] = F3Ddatasets.PotSplit(20,0)

IRs:
REF_54(F3Ddatasets.PotSplit) -> potSplit_[0]
TMP_132(F3Ddatasets.PotSplit) = new PotSplit(20,0)
REF_54(F3Ddatasets.PotSplit) (->potSplit_) := TMP_132(F3Ddatasets.PotSplit)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
potSplit_[1] = F3Ddatasets.PotSplit(30,0)

IRs:
REF_56(F3Ddatasets.PotSplit) -> potSplit_[1]
TMP_133(F3Ddatasets.PotSplit) = new PotSplit(30,0)
REF_56(F3Ddatasets.PotSplit) (->potSplit_) := TMP_133(F3Ddatasets.PotSplit)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
potSplit_[2] = F3Ddatasets.PotSplit(40,0)

IRs:
REF_58(F3Ddatasets.PotSplit) -> potSplit_[2]
TMP_134(F3Ddatasets.PotSplit) = new PotSplit(40,0)
REF_58(F3Ddatasets.PotSplit) (->potSplit_) := TMP_134(F3Ddatasets.PotSplit)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
potSplit_[3] = F3Ddatasets.PotSplit(50,0)

IRs:
REF_60(F3Ddatasets.PotSplit) -> potSplit_[3]
TMP_135(F3Ddatasets.PotSplit) = new PotSplit(50,0)
REF_60(F3Ddatasets.PotSplit) (->potSplit_) := TMP_135(F3Ddatasets.PotSplit)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
myFounder_[0xa78cd12e5f2daf88023f0bfe119eac8b3f3dbc93] = true

IRs:
REF_62(bool) -> myFounder_[956541785302637977197075496991133499377441422483]
REF_62(bool) (->myFounder_) := True(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
myFounder_[0xfB31eb7B96e413BEbEe61F5E3880938b937c2Ef0] = true

IRs:
REF_63(bool) -> myFounder_[1434069933434005259579544347796944161847818071792]
REF_63(bool) (->myFounder_) := True(bool)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
myFounder_[0xEa8A4f09C45967DFCFda180fA80ad44eefAb52bE] = true

IRs:
REF_64(bool) -> myFounder_[1338988228404298494426668435023171328770606584510]
REF_64(bool) (->myFounder_) := True(bool)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
myFounder_[0xf1E32a3EaA5D6c360AF6AA2c45a97e377Be183BD] = true

IRs:
REF_65(bool) -> myFounder_[1380932724968581497495090632512806968020632175549]
REF_65(bool) (->myFounder_) := True(bool)"];
}
// Function: 969.sol-FoMo3Dlong-core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyrRnds_[_pID][_rID].keys == 0

IRs:
REF_375(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_376(F3Ddatasets.PlayerRounds) -> REF_375[_rID]
REF_377(uint256) -> REF_376.keys
TMP_317(bool) = REF_377 == 0
CONDITION TMP_317"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_ = managePlayer(_pID,_eventData_)

IRs:
TMP_318(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.managePlayer(uint256,F3Ddatasets.EventReturns)(_pID,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_318(F3Ddatasets.EventReturns)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
round_[_rID].eth < 100000000000000000000 && plyrRnds_[_pID][_rID].eth.add(_eth) > 1000000000000000000

IRs:
REF_378(F3Ddatasets.Round) -> round_[_rID]
REF_379(uint256) -> REF_378.eth
TMP_319(bool) = REF_379 < 100000000000000000000
REF_380(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_381(F3Ddatasets.PlayerRounds) -> REF_380[_rID]
REF_382(uint256) -> REF_381.eth
TMP_320(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_382', '_eth'] 
TMP_321(bool) = TMP_320 > 1000000000000000000
TMP_322(bool) = TMP_319 && TMP_321
CONDITION TMP_322"];
4->5[label="True"];
4->9[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_availableLimit = (1000000000000000000).sub(plyrRnds_[_pID][_rID].eth)

IRs:
REF_385(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_386(F3Ddatasets.PlayerRounds) -> REF_385[_rID]
REF_387(uint256) -> REF_386.eth
TMP_323(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['1000000000000000000', 'REF_387'] 
_availableLimit(uint256) := TMP_323(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_refund = _eth.sub(_availableLimit)

IRs:
TMP_324(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_availableLimit'] 
_refund(uint256) := TMP_324(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].gen = plyr_[_pID].gen.add(_refund)

IRs:
REF_389(F3Ddatasets.Player) -> plyr_[_pID]
REF_390(uint256) -> REF_389.gen
REF_391(F3Ddatasets.Player) -> plyr_[_pID]
REF_392(uint256) -> REF_391.gen
TMP_325(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_392', '_refund'] 
REF_390(uint256) (->plyr_) := TMP_325(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eth = _availableLimit

IRs:
_eth(uint256) := _availableLimit(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 1000000000

IRs:
TMP_326(bool) = _eth > 1000000000
CONDITION TMP_326"];
10->11[label="True"];
10->62[label="False"];
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_keys = (round_[_rID].eth).keysRec(_eth)

IRs:
REF_394(F3Ddatasets.Round) -> round_[_rID]
REF_395(uint256) -> REF_394.eth
TMP_327(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.keysRec(uint256,uint256), arguments:['REF_395', '_eth'] 
_keys(uint256) := TMP_327(uint256)"];
11->12;
12[label="Node Type: IF 12

EXPRESSION:
_keys >= 1000000000000000000

IRs:
TMP_328(bool) = _keys >= 1000000000000000000
CONDITION TMP_328"];
12->13[label="True"];
12->21[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
updateTimer(_keys,_rID)

IRs:
INTERNAL_CALL, FoMo3Dlong.updateTimer(uint256,uint256)(_keys,_rID)"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
round_[_rID].plyr != _pID

IRs:
REF_397(F3Ddatasets.Round) -> round_[_rID]
REF_398(uint256) -> REF_397.plyr
TMP_330(bool) = REF_398 != _pID
CONDITION TMP_330"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
round_[_rID].plyr = _pID

IRs:
REF_399(F3Ddatasets.Round) -> round_[_rID]
REF_400(uint256) -> REF_399.plyr
REF_400(uint256) (->round_) := _pID(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
round_[_rID].team != _team

IRs:
REF_401(F3Ddatasets.Round) -> round_[_rID]
REF_402(uint256) -> REF_401.team
TMP_331(bool) = REF_402 != _team
CONDITION TMP_331"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].team = _team

IRs:
REF_403(F3Ddatasets.Round) -> round_[_rID]
REF_404(uint256) -> REF_403.team
REF_404(uint256) (->round_) := _team(uint256)"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 100

IRs:
REF_405(uint256) -> _eventData_.compressedData
REF_406(uint256) -> _eventData_.compressedData
TMP_332(uint256) = REF_406 + 100
REF_405(uint256) (->_eventData_) := TMP_332(uint256)"];
20->21;
21[label="Node Type: END_IF 21
"];
21->22;
22[label="Node Type: IF 22

EXPRESSION:
_eth >= 100000000000000000

IRs:
TMP_333(bool) = _eth >= 100000000000000000
CONDITION TMP_333"];
22->23[label="True"];
22->47[label="False"];
23[label="Node Type: EXPRESSION 23

EXPRESSION:
airDropTracker_ ++

IRs:
TMP_334(uint256) := airDropTracker_(uint256)
airDropTracker_(uint256) = airDropTracker_ + 1"];
23->24;
24[label="Node Type: IF 24

EXPRESSION:
airdrop() == true

IRs:
TMP_335(bool) = INTERNAL_CALL, FoMo3Dlong.airdrop()()
TMP_336(bool) = TMP_335 == True
CONDITION TMP_336"];
24->25[label="True"];
24->46[label="False"];
25[label="Node Type: NEW VARIABLE 25
"];
25->26;
26[label="Node Type: IF 26

EXPRESSION:
_eth >= 10000000000000000000

IRs:
TMP_337(bool) = _eth >= 10000000000000000000
CONDITION TMP_337"];
26->27[label="True"];
26->31[label="False"];
27[label="Node Type: EXPRESSION 27

EXPRESSION:
_prize = ((airDropPot_).mul(75)) / 100

IRs:
TMP_338(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '75'] 
TMP_339(uint256) = TMP_338 / 100
_prize(uint256) := TMP_339(uint256)"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_408(F3Ddatasets.Player) -> plyr_[_pID]
REF_409(uint256) -> REF_408.win
REF_410(F3Ddatasets.Player) -> plyr_[_pID]
REF_411(uint256) -> REF_410.win
TMP_340(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_411', '_prize'] 
REF_409(uint256) (->plyr_) := TMP_340(uint256)"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_341(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_341(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_414(uint256) -> _eventData_.compressedData
REF_414(-> _eventData_) = REF_414 + 300000000000000000000000000000000"];
30->43;
31[label="Node Type: IF 31

EXPRESSION:
_eth >= 1000000000000000000 && _eth < 10000000000000000000

IRs:
TMP_342(bool) = _eth >= 1000000000000000000
TMP_343(bool) = _eth < 10000000000000000000
TMP_344(bool) = TMP_342 && TMP_343
CONDITION TMP_344"];
31->32[label="True"];
31->36[label="False"];
32[label="Node Type: EXPRESSION 32

EXPRESSION:
_prize = ((airDropPot_).mul(50)) / 100

IRs:
TMP_345(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '50'] 
TMP_346(uint256) = TMP_345 / 100
_prize(uint256) := TMP_346(uint256)"];
32->33;
33[label="Node Type: EXPRESSION 33

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_416(F3Ddatasets.Player) -> plyr_[_pID]
REF_417(uint256) -> REF_416.win
REF_418(F3Ddatasets.Player) -> plyr_[_pID]
REF_419(uint256) -> REF_418.win
TMP_347(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_419', '_prize'] 
REF_417(uint256) (->plyr_) := TMP_347(uint256)"];
33->34;
34[label="Node Type: EXPRESSION 34

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_348(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_348(uint256)"];
34->35;
35[label="Node Type: EXPRESSION 35

EXPRESSION:
_eventData_.compressedData += 200000000000000000000000000000000

IRs:
REF_422(uint256) -> _eventData_.compressedData
REF_422(-> _eventData_) = REF_422 + 200000000000000000000000000000000"];
35->42;
36[label="Node Type: IF 36

EXPRESSION:
_eth >= 100000000000000000 && _eth < 1000000000000000000

IRs:
TMP_349(bool) = _eth >= 100000000000000000
TMP_350(bool) = _eth < 1000000000000000000
TMP_351(bool) = TMP_349 && TMP_350
CONDITION TMP_351"];
36->37[label="True"];
36->41[label="False"];
37[label="Node Type: EXPRESSION 37

EXPRESSION:
_prize = ((airDropPot_).mul(25)) / 100

IRs:
TMP_352(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['airDropPot_', '25'] 
TMP_353(uint256) = TMP_352 / 100
_prize(uint256) := TMP_353(uint256)"];
37->38;
38[label="Node Type: EXPRESSION 38

EXPRESSION:
plyr_[_pID].win = (plyr_[_pID].win).add(_prize)

IRs:
REF_424(F3Ddatasets.Player) -> plyr_[_pID]
REF_425(uint256) -> REF_424.win
REF_426(F3Ddatasets.Player) -> plyr_[_pID]
REF_427(uint256) -> REF_426.win
TMP_354(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_427', '_prize'] 
REF_425(uint256) (->plyr_) := TMP_354(uint256)"];
38->39;
39[label="Node Type: EXPRESSION 39

EXPRESSION:
airDropPot_ = (airDropPot_).sub(_prize)

IRs:
TMP_355(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['airDropPot_', '_prize'] 
airDropPot_(uint256) := TMP_355(uint256)"];
39->40;
40[label="Node Type: EXPRESSION 40

EXPRESSION:
_eventData_.compressedData += 300000000000000000000000000000000

IRs:
REF_430(uint256) -> _eventData_.compressedData
REF_430(-> _eventData_) = REF_430 + 300000000000000000000000000000000"];
40->41;
41[label="Node Type: END_IF 41
"];
41->42;
42[label="Node Type: END_IF 42
"];
42->43;
43[label="Node Type: END_IF 43
"];
43->44;
44[label="Node Type: EXPRESSION 44

EXPRESSION:
_eventData_.compressedData += 10000000000000000000000000000000

IRs:
REF_431(uint256) -> _eventData_.compressedData
REF_431(-> _eventData_) = REF_431 + 10000000000000000000000000000000"];
44->45;
45[label="Node Type: EXPRESSION 45

EXPRESSION:
_eventData_.compressedData += _prize * 1000000000000000000000000000000000

IRs:
REF_432(uint256) -> _eventData_.compressedData
TMP_356(uint256) = _prize * 1000000000000000000000000000000000
REF_432(-> _eventData_) = REF_432 + TMP_356"];
45->46;
46[label="Node Type: END_IF 46
"];
46->47;
47[label="Node Type: END_IF 47
"];
47->48;
48[label="Node Type: EXPRESSION 48

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (airDropTracker_ * 1000)

IRs:
REF_433(uint256) -> _eventData_.compressedData
REF_434(uint256) -> _eventData_.compressedData
TMP_357(uint256) = airDropTracker_ * 1000
TMP_358(uint256) = REF_434 + TMP_357
REF_433(uint256) (->_eventData_) := TMP_358(uint256)"];
48->49;
49[label="Node Type: IF 49

EXPRESSION:
myFounder_PID[plyr_[_pID].addr] > 0

IRs:
REF_435(F3Ddatasets.Player) -> plyr_[_pID]
REF_436(address) -> REF_435.addr
REF_437(uint256) -> myFounder_PID[REF_436]
TMP_359(bool) = REF_437 > 0
CONDITION TMP_359"];
49->50[label="True"];
49->53[label="False"];
50[label="Node Type: EXPRESSION 50

EXPRESSION:
plyrRnds_[_pID][_rID].keys = myFounder_PID[plyr_[_pID].addr].add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_438(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_439(F3Ddatasets.PlayerRounds) -> REF_438[_rID]
REF_440(uint256) -> REF_439.keys
REF_441(F3Ddatasets.Player) -> plyr_[_pID]
REF_442(address) -> REF_441.addr
REF_443(uint256) -> myFounder_PID[REF_442]
REF_445(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_446(F3Ddatasets.PlayerRounds) -> REF_445[_rID]
REF_447(uint256) -> REF_446.keys
TMP_360(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_443', 'REF_447'] 
REF_440(uint256) (->plyrRnds_) := TMP_360(uint256)"];
50->51;
51[label="Node Type: EXPRESSION 51

EXPRESSION:
round_[_rID].keys = myFounder_PID[plyr_[_pID].addr].add(round_[_rID].keys)

IRs:
REF_448(F3Ddatasets.Round) -> round_[_rID]
REF_449(uint256) -> REF_448.keys
REF_450(F3Ddatasets.Player) -> plyr_[_pID]
REF_451(address) -> REF_450.addr
REF_452(uint256) -> myFounder_PID[REF_451]
REF_454(F3Ddatasets.Round) -> round_[_rID]
REF_455(uint256) -> REF_454.keys
TMP_361(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_452', 'REF_455'] 
REF_449(uint256) (->round_) := TMP_361(uint256)"];
51->52;
52[label="Node Type: EXPRESSION 52

EXPRESSION:
myFounder_PID[plyr_[_pID].addr] = 0

IRs:
REF_456(F3Ddatasets.Player) -> plyr_[_pID]
REF_457(address) -> REF_456.addr
REF_458(uint256) -> myFounder_PID[REF_457]
REF_458(uint256) (->myFounder_PID) := 0(uint256)"];
52->53;
53[label="Node Type: END_IF 53
"];
53->54;
54[label="Node Type: EXPRESSION 54

EXPRESSION:
plyrRnds_[_pID][_rID].keys = _keys.add(plyrRnds_[_pID][_rID].keys)

IRs:
REF_459(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_460(F3Ddatasets.PlayerRounds) -> REF_459[_rID]
REF_461(uint256) -> REF_460.keys
REF_463(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_464(F3Ddatasets.PlayerRounds) -> REF_463[_rID]
REF_465(uint256) -> REF_464.keys
TMP_362(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_465'] 
REF_461(uint256) (->plyrRnds_) := TMP_362(uint256)"];
54->55;
55[label="Node Type: EXPRESSION 55

EXPRESSION:
plyrRnds_[_pID][_rID].eth = _eth.add(plyrRnds_[_pID][_rID].eth)

IRs:
REF_466(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_467(F3Ddatasets.PlayerRounds) -> REF_466[_rID]
REF_468(uint256) -> REF_467.eth
REF_470(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_471(F3Ddatasets.PlayerRounds) -> REF_470[_rID]
REF_472(uint256) -> REF_471.eth
TMP_363(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_472'] 
REF_468(uint256) (->plyrRnds_) := TMP_363(uint256)"];
55->56;
56[label="Node Type: EXPRESSION 56

EXPRESSION:
round_[_rID].keys = _keys.add(round_[_rID].keys)

IRs:
REF_473(F3Ddatasets.Round) -> round_[_rID]
REF_474(uint256) -> REF_473.keys
REF_476(F3Ddatasets.Round) -> round_[_rID]
REF_477(uint256) -> REF_476.keys
TMP_364(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_keys', 'REF_477'] 
REF_474(uint256) (->round_) := TMP_364(uint256)"];
56->57;
57[label="Node Type: EXPRESSION 57

EXPRESSION:
round_[_rID].eth = _eth.add(round_[_rID].eth)

IRs:
REF_478(F3Ddatasets.Round) -> round_[_rID]
REF_479(uint256) -> REF_478.eth
REF_481(F3Ddatasets.Round) -> round_[_rID]
REF_482(uint256) -> REF_481.eth
TMP_365(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_482'] 
REF_479(uint256) (->round_) := TMP_365(uint256)"];
57->58;
58[label="Node Type: EXPRESSION 58

EXPRESSION:
rndTmEth_[_rID][_team] = _eth.add(rndTmEth_[_rID][_team])

IRs:
REF_483(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_484(uint256) -> REF_483[_team]
REF_486(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_487(uint256) -> REF_486[_team]
TMP_366(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_eth', 'REF_487'] 
REF_484(uint256) (->rndTmEth_) := TMP_366(uint256)"];
58->59;
59[label="Node Type: EXPRESSION 59

EXPRESSION:
_eth = distributeExternal(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
TMP_367(uint256) = INTERNAL_CALL, FoMo3Dlong.distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)
_eth(uint256) := TMP_367(uint256)"];
59->60;
60[label="Node Type: EXPRESSION 60

EXPRESSION:
_eventData_ = distributeInternal(_rID,_pID,_eth,_team,_keys,_eventData_)

IRs:
TMP_368(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_team,_keys,_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_368(F3Ddatasets.EventReturns)"];
60->61;
61[label="Node Type: EXPRESSION 61

EXPRESSION:
endTx(_pID,_team,_eth,_keys,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_team,_eth,_keys,_eventData_)"];
61->62;
62[label="Node Type: END_IF 62
"];
}
// Function: 969.sol-FoMo3Dlong-determinePID(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_547(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_547(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_pID == 0

IRs:
TMP_407(bool) = _pID == 0
CONDITION TMP_407"];
2->3[label="True"];
2->17[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_pID = PlayerBook.getPlayerID(msg.sender)

IRs:
TMP_408(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerID, arguments:['msg.sender']  
_pID(uint256) := TMP_408(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_name = PlayerBook.getPlayerName(_pID)

IRs:
TMP_409(bytes32) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerName, arguments:['_pID']  
_name(bytes32) := TMP_409(bytes32)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_laff = PlayerBook.getPlayerLAff(_pID)

IRs:
TMP_410(uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:getPlayerLAff, arguments:['_pID']  
_laff(uint256) := TMP_410(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxAddr_[msg.sender] = _pID

IRs:
REF_551(uint256) -> pIDxAddr_[msg.sender]
REF_551(uint256) (->pIDxAddr_) := _pID(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
plyr_[_pID].addr = msg.sender

IRs:
REF_552(F3Ddatasets.Player) -> plyr_[_pID]
REF_553(address) -> REF_552.addr
REF_553(address) (->plyr_) := msg.sender(address)"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
_name != 

IRs:
TMP_411(bool) = _name != 
CONDITION TMP_411"];
8->9[label="True"];
8->12[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_554(uint256) -> pIDxName_[_name]
REF_554(uint256) (->pIDxName_) := _pID(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_555(F3Ddatasets.Player) -> plyr_[_pID]
REF_556(bytes32) -> REF_555.name
REF_556(bytes32) (->plyr_) := _name(bytes32)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_557(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_558(bool) -> REF_557[_name]
REF_558(bool) (->plyrNames_) := True(bool)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_laff != 0 && _laff != _pID

IRs:
TMP_412(bool) = _laff != 0
TMP_413(bool) = _laff != _pID
TMP_414(bool) = TMP_412 && TMP_413
CONDITION TMP_414"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_559(F3Ddatasets.Player) -> plyr_[_pID]
REF_560(uint256) -> REF_559.laff
REF_560(uint256) (->plyr_) := _laff(uint256)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 1

IRs:
REF_561(uint256) -> _eventData_.compressedData
REF_562(uint256) -> _eventData_.compressedData
TMP_415(uint256) = REF_562 + 1
REF_561(uint256) (->_eventData_) := TMP_415(uint256)"];
16->17;
17[label="Node Type: END_IF 17
"];
17->18;
18[label="Node Type: RETURN 18

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 969.sol-FoMo3Dlong-distributeExternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_com = (_eth.mul(3) / 100)

IRs:
TMP_479(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', '3'] 
TMP_480(uint256) = TMP_479 / 100
_com(uint256) := TMP_480(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
ourTEAM.transfer(_com)

IRs:
Transfer dest:ourTEAM value:_com"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_aff = _eth / 10

IRs:
TMP_482(uint256) = _eth / 10
_aff(uint256) := TMP_482(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affID != _pID && plyr_[_affID].name != 

IRs:
TMP_483(bool) = _affID != _pID
REF_659(F3Ddatasets.Player) -> plyr_[_affID]
REF_660(bytes32) -> REF_659.name
TMP_484(bool) = REF_660 != 
TMP_485(bool) = TMP_483 && TMP_484
CONDITION TMP_485"];
4->5[label="True"];
4->10[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
myFounder_[plyr_[_affID].addr]

IRs:
REF_661(F3Ddatasets.Player) -> plyr_[_affID]
REF_662(address) -> REF_661.addr
REF_663(bool) -> myFounder_[REF_662]
CONDITION REF_663"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_aff = _eth / 5

IRs:
TMP_486(uint256) = _eth / 5
_aff(uint256) := TMP_486(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_affID].aff = _aff.add(plyr_[_affID].aff)

IRs:
REF_664(F3Ddatasets.Player) -> plyr_[_affID]
REF_665(uint256) -> REF_664.aff
REF_667(F3Ddatasets.Player) -> plyr_[_affID]
REF_668(uint256) -> REF_667.aff
TMP_487(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_aff', 'REF_668'] 
REF_665(uint256) (->plyr_) := TMP_487(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
F3Devents.onAffiliatePayout(_affID,plyr_[_affID].addr,plyr_[_affID].name,_rID,_pID,_aff,now)

IRs:
REF_670(F3Ddatasets.Player) -> plyr_[_affID]
REF_671(address) -> REF_670.addr
REF_672(F3Ddatasets.Player) -> plyr_[_affID]
REF_673(bytes32) -> REF_672.name
Emit onAffiliatePayout(_affID,REF_671,REF_673,_rID,_pID,_aff,now)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: RETURN 11

EXPRESSION:
(_eth.sub(_com)).sub(_aff)

IRs:
TMP_489(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_com'] 
TMP_490(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_489', '_aff'] 
RETURN TMP_490"];
}
// Function: 969.sol-FoMo3Dlong-distributeInternal(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_gen = (_eth.mul(fees_[_team].gen)) / 100

IRs:
REF_683(F3Ddatasets.TeamFee) -> fees_[_team]
REF_684(uint256) -> REF_683.gen
TMP_494(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_eth', 'REF_684'] 
TMP_495(uint256) = TMP_494 / 100
_gen(uint256) := TMP_495(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_air = (_eth / 100)

IRs:
TMP_496(uint256) = _eth / 100
_air(uint256) := TMP_496(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
airDropPot_ = airDropPot_.add(_air)

IRs:
TMP_497(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['airDropPot_', '_air'] 
airDropPot_(uint256) := TMP_497(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = _eth.sub(_gen).sub(_air)

IRs:
TMP_498(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_eth', '_gen'] 
TMP_499(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_498', '_air'] 
_pot(uint256) := TMP_499(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_dust = updateMasks(_rID,_pID,_gen,_keys)

IRs:
TMP_500(uint256) = INTERNAL_CALL, FoMo3Dlong.updateMasks(uint256,uint256,uint256,uint256)(_rID,_pID,_gen,_keys)
_dust(uint256) := TMP_500(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_dust > 0

IRs:
TMP_501(bool) = _dust > 0
CONDITION TMP_501"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_502(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_502(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].pot = _pot.add(_dust).add(round_[_rID].pot)

IRs:
REF_689(F3Ddatasets.Round) -> round_[_rID]
REF_690(uint256) -> REF_689.pot
TMP_503(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_pot', '_dust'] 
REF_693(F3Ddatasets.Round) -> round_[_rID]
REF_694(uint256) -> REF_693.pot
TMP_504(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_503', 'REF_694'] 
REF_690(uint256) (->round_) := TMP_504(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.genAmount = _gen.add(_eventData_.genAmount)

IRs:
REF_695(uint256) -> _eventData_.genAmount
REF_697(uint256) -> _eventData_.genAmount
TMP_505(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_gen', 'REF_697'] 
REF_695(uint256) (->_eventData_) := TMP_505(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_eventData_.potAmount = _pot

IRs:
REF_698(uint256) -> _eventData_.potAmount
REF_698(uint256) (->_eventData_) := _pot(uint256)"];
11->12;
12[label="Node Type: RETURN 12

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 969.sol-FoMo3Dlong-endRound(F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_winPID = round_[_rID].plyr

IRs:
REF_571(F3Ddatasets.Round) -> round_[_rID]
REF_572(uint256) -> REF_571.plyr
_winPID(uint256) := REF_572(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_winTID = round_[_rID].team

IRs:
REF_573(F3Ddatasets.Round) -> round_[_rID]
REF_574(uint256) -> REF_573.team
_winTID(uint256) := REF_574(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
_pot = round_[_rID].pot

IRs:
REF_575(F3Ddatasets.Round) -> round_[_rID]
REF_576(uint256) -> REF_575.pot
_pot(uint256) := REF_576(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_win = (_pot.mul(40)) / 100

IRs:
TMP_422(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', '40'] 
TMP_423(uint256) = TMP_422 / 100
_win(uint256) := TMP_423(uint256)"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
_com = (_pot / 10)

IRs:
TMP_424(uint256) = _pot / 10
_com(uint256) := TMP_424(uint256)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_gen = (_pot.mul(potSplit_[_winTID].gen)) / 100

IRs:
REF_579(F3Ddatasets.PotSplit) -> potSplit_[_winTID]
REF_580(uint256) -> REF_579.gen
TMP_425(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_pot', 'REF_580'] 
TMP_426(uint256) = TMP_425 / 100
_gen(uint256) := TMP_426(uint256)"];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
_p3d = 0

IRs:
_p3d(uint256) := 0(uint256)"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
_res = (((_pot.sub(_win)).sub(_com)).sub(_gen)).sub(_p3d)

IRs:
TMP_427(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_pot', '_win'] 
TMP_428(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_427', '_com'] 
TMP_429(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_428', '_gen'] 
TMP_430(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_429', '_p3d'] 
_res(uint256) := TMP_430(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
ourTEAM.transfer(_com)

IRs:
Transfer dest:ourTEAM value:_com"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_432(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_587(F3Ddatasets.Round) -> round_[_rID]
REF_588(uint256) -> REF_587.keys
TMP_433(uint256) = TMP_432 / REF_588
_ppt(uint256) := TMP_433(uint256)"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
_dust = _gen.sub((_ppt.mul(round_[_rID].keys)) / 1000000000000000000)

IRs:
REF_591(F3Ddatasets.Round) -> round_[_rID]
REF_592(uint256) -> REF_591.keys
TMP_434(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_592'] 
TMP_435(uint256) = TMP_434 / 1000000000000000000
TMP_436(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_435'] 
_dust(uint256) := TMP_436(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
_dust > 0

IRs:
TMP_437(bool) = _dust > 0
CONDITION TMP_437"];
13->14[label="True"];
13->16[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_gen = _gen.sub(_dust)

IRs:
TMP_438(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', '_dust'] 
_gen(uint256) := TMP_438(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_res = _res.add(_dust)

IRs:
TMP_439(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_res', '_dust'] 
_res(uint256) := TMP_439(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
plyr_[_winPID].win = _win.add(plyr_[_winPID].win)

IRs:
REF_595(F3Ddatasets.Player) -> plyr_[_winPID]
REF_596(uint256) -> REF_595.win
REF_598(F3Ddatasets.Player) -> plyr_[_winPID]
REF_599(uint256) -> REF_598.win
TMP_440(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_win', 'REF_599'] 
REF_596(uint256) (->plyr_) := TMP_440(uint256)"];
17->18;
18[label="Node Type: EXPRESSION 18

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_600(F3Ddatasets.Round) -> round_[_rID]
REF_601(uint256) -> REF_600.mask
REF_603(F3Ddatasets.Round) -> round_[_rID]
REF_604(uint256) -> REF_603.mask
TMP_441(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_604'] 
REF_601(uint256) (->round_) := TMP_441(uint256)"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (round_[_rID].end * 1000000)

IRs:
REF_605(uint256) -> _eventData_.compressedData
REF_606(uint256) -> _eventData_.compressedData
REF_607(F3Ddatasets.Round) -> round_[_rID]
REF_608(uint256) -> REF_607.end
TMP_442(uint256) = REF_608 * 1000000
TMP_443(uint256) = REF_606 + TMP_442
REF_605(uint256) (->_eventData_) := TMP_443(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + (_winPID * 100000000000000000000000000) + (_winTID * 100000000000000000)

IRs:
REF_609(uint256) -> _eventData_.compressedIDs
REF_610(uint256) -> _eventData_.compressedIDs
TMP_444(uint256) = _winPID * 100000000000000000000000000
TMP_445(uint256) = REF_610 + TMP_444
TMP_446(uint256) = _winTID * 100000000000000000
TMP_447(uint256) = TMP_445 + TMP_446
REF_609(uint256) (->_eventData_) := TMP_447(uint256)"];
20->21;
21[label="Node Type: EXPRESSION 21

EXPRESSION:
_eventData_.winnerAddr = plyr_[_winPID].addr

IRs:
REF_611(address) -> _eventData_.winnerAddr
REF_612(F3Ddatasets.Player) -> plyr_[_winPID]
REF_613(address) -> REF_612.addr
REF_611(address) (->_eventData_) := REF_613(address)"];
21->22;
22[label="Node Type: EXPRESSION 22

EXPRESSION:
_eventData_.winnerName = plyr_[_winPID].name

IRs:
REF_614(bytes32) -> _eventData_.winnerName
REF_615(F3Ddatasets.Player) -> plyr_[_winPID]
REF_616(bytes32) -> REF_615.name
REF_614(bytes32) (->_eventData_) := REF_616(bytes32)"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
_eventData_.amountWon = _win

IRs:
REF_617(uint256) -> _eventData_.amountWon
REF_617(uint256) (->_eventData_) := _win(uint256)"];
23->24;
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_eventData_.genAmount = _gen

IRs:
REF_618(uint256) -> _eventData_.genAmount
REF_618(uint256) (->_eventData_) := _gen(uint256)"];
24->25;
25[label="Node Type: EXPRESSION 25

EXPRESSION:
_eventData_.P3DAmount = _p3d

IRs:
REF_619(uint256) -> _eventData_.P3DAmount
REF_619(uint256) (->_eventData_) := _p3d(uint256)"];
25->26;
26[label="Node Type: EXPRESSION 26

EXPRESSION:
_eventData_.newPot = _res

IRs:
REF_620(uint256) -> _eventData_.newPot
REF_620(uint256) (->_eventData_) := _res(uint256)"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
rID_ ++

IRs:
TMP_448(uint256) := rID_(uint256)
rID_(uint256) = rID_ + 1"];
27->28;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
_rID ++

IRs:
TMP_449(uint256) := _rID(uint256)
_rID(uint256) = _rID + 1"];
28->29;
29[label="Node Type: EXPRESSION 29

EXPRESSION:
round_[_rID].strt = now

IRs:
REF_621(F3Ddatasets.Round) -> round_[_rID]
REF_622(uint256) -> REF_621.strt
REF_622(uint256) (->round_) := now(uint256)"];
29->30;
30[label="Node Type: EXPRESSION 30

EXPRESSION:
round_[_rID].end = now.add(rndInit_).add(rndGap_)

IRs:
REF_623(F3Ddatasets.Round) -> round_[_rID]
REF_624(uint256) -> REF_623.end
TMP_450(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['now', 'rndInit_'] 
TMP_451(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_450', 'rndGap_'] 
REF_624(uint256) (->round_) := TMP_451(uint256)"];
30->31;
31[label="Node Type: EXPRESSION 31

EXPRESSION:
round_[_rID].pot = _res

IRs:
REF_627(F3Ddatasets.Round) -> round_[_rID]
REF_628(uint256) -> REF_627.pot
REF_628(uint256) (->round_) := _res(uint256)"];
31->32;
32[label="Node Type: EXPRESSION 32

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
32->33;
33[label="Node Type: RETURN 33

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 969.sol-FoMo3Dlong-endTx(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (now * 1000000000000000000) + (_team * 100000000000000000000000000000)

IRs:
REF_739(uint256) -> _eventData_.compressedData
REF_740(uint256) -> _eventData_.compressedData
TMP_522(uint256) = now * 1000000000000000000
TMP_523(uint256) = REF_740 + TMP_522
TMP_524(uint256) = _team * 100000000000000000000000000000
TMP_525(uint256) = TMP_523 + TMP_524
REF_739(uint256) (->_eventData_) := TMP_525(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID + (rID_ * 10000000000000000000000000000000000000000000000000000)

IRs:
REF_741(uint256) -> _eventData_.compressedIDs
REF_742(uint256) -> _eventData_.compressedIDs
TMP_526(uint256) = REF_742 + _pID
TMP_527(uint256) = rID_ * 10000000000000000000000000000000000000000000000000000
TMP_528(uint256) = TMP_526 + TMP_527
REF_741(uint256) (->_eventData_) := TMP_528(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onEndTx(_eventData_.compressedData,_eventData_.compressedIDs,plyr_[_pID].name,msg.sender,_eth,_keys,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount,_eventData_.potAmount,airDropPot_)

IRs:
REF_744(uint256) -> _eventData_.compressedData
REF_745(uint256) -> _eventData_.compressedIDs
REF_746(F3Ddatasets.Player) -> plyr_[_pID]
REF_747(bytes32) -> REF_746.name
REF_748(address) -> _eventData_.winnerAddr
REF_749(bytes32) -> _eventData_.winnerName
REF_750(uint256) -> _eventData_.amountWon
REF_751(uint256) -> _eventData_.newPot
REF_752(uint256) -> _eventData_.P3DAmount
REF_753(uint256) -> _eventData_.genAmount
REF_754(uint256) -> _eventData_.potAmount
Emit onEndTx(REF_744,REF_745,REF_747,msg.sender,_eth,_keys,REF_748,REF_749,REF_750,REF_751,REF_752,REF_753,REF_754,airDropPot_)"];
}
// Function: 969.sol-FoMo3Dlong-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_eventData_ = determinePID(_eventData_)

IRs:
TMP_136(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.determinePID(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_136(F3Ddatasets.EventReturns)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_66(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_66(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
buyCore(_pID,plyr_[_pID].laff,2,_eventData_)

IRs:
REF_67(F3Ddatasets.Player) -> plyr_[_pID]
REF_68(uint256) -> REF_67.laff
INTERNAL_CALL, FoMo3Dlong.buyCore(uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,REF_68,2,_eventData_)"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
isWithinLimits(msg.value)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(msg.value)"];
6->1;
}
// Function: 969.sol-FoMo3Dlong-getBuyPrice()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_179(F3Ddatasets.Round) -> round_[_rID]
REF_180(uint256) -> REF_179.strt
TMP_231(uint256) = REF_180 + rndGap_
TMP_232(bool) = _now > TMP_231
REF_181(F3Ddatasets.Round) -> round_[_rID]
REF_182(uint256) -> REF_181.end
TMP_233(bool) = _now <= REF_182
REF_183(F3Ddatasets.Round) -> round_[_rID]
REF_184(uint256) -> REF_183.end
TMP_234(bool) = _now > REF_184
REF_185(F3Ddatasets.Round) -> round_[_rID]
REF_186(uint256) -> REF_185.plyr
TMP_235(bool) = REF_186 == 0
TMP_236(bool) = TMP_234 && TMP_235
TMP_237(bool) = TMP_233 || TMP_236
TMP_238(bool) = TMP_232 && TMP_237
CONDITION TMP_238"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(1000000000000000000)).ethRec(1000000000000000000))

IRs:
REF_187(F3Ddatasets.Round) -> round_[_rID]
REF_188(uint256) -> REF_187.keys
TMP_239(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_188', '1000000000000000000'] 
TMP_240(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_239', '1000000000000000000'] 
RETURN TMP_240"];
5[label="Node Type: RETURN 5

EXPRESSION:
(75000000000000)

IRs:
RETURN 75000000000000"];
}
// Function: 969.sol-FoMo3Dlong-getCurrentRoundInfo()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
(round_[_rID].ico,_rID,round_[_rID].keys,round_[_rID].end,round_[_rID].strt,round_[_rID].pot,(round_[_rID].team + (round_[_rID].plyr * 10)),plyr_[round_[_rID].plyr].addr,plyr_[round_[_rID].plyr].name,rndTmEth_[_rID][0],rndTmEth_[_rID][1],rndTmEth_[_rID][2],rndTmEth_[_rID][3],airDropTracker_ + (airDropPot_ * 1000))

IRs:
REF_261(F3Ddatasets.Round) -> round_[_rID]
REF_262(uint256) -> REF_261.ico
REF_263(F3Ddatasets.Round) -> round_[_rID]
REF_264(uint256) -> REF_263.keys
REF_265(F3Ddatasets.Round) -> round_[_rID]
REF_266(uint256) -> REF_265.end
REF_267(F3Ddatasets.Round) -> round_[_rID]
REF_268(uint256) -> REF_267.strt
REF_269(F3Ddatasets.Round) -> round_[_rID]
REF_270(uint256) -> REF_269.pot
REF_271(F3Ddatasets.Round) -> round_[_rID]
REF_272(uint256) -> REF_271.team
REF_273(F3Ddatasets.Round) -> round_[_rID]
REF_274(uint256) -> REF_273.plyr
TMP_271(uint256) = REF_274 * 10
TMP_272(uint256) = REF_272 + TMP_271
REF_275(F3Ddatasets.Round) -> round_[_rID]
REF_276(uint256) -> REF_275.plyr
REF_277(F3Ddatasets.Player) -> plyr_[REF_276]
REF_278(address) -> REF_277.addr
REF_279(F3Ddatasets.Round) -> round_[_rID]
REF_280(uint256) -> REF_279.plyr
REF_281(F3Ddatasets.Player) -> plyr_[REF_280]
REF_282(bytes32) -> REF_281.name
REF_283(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_284(uint256) -> REF_283[0]
REF_285(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_286(uint256) -> REF_285[1]
REF_287(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_288(uint256) -> REF_287[2]
REF_289(mapping(uint256 => uint256)) -> rndTmEth_[_rID]
REF_290(uint256) -> REF_289[3]
TMP_273(uint256) = airDropPot_ * 1000
TMP_274(uint256) = airDropTracker_ + TMP_273
RETURN REF_262,_rID,REF_264,REF_266,REF_268,REF_270,TMP_272,REF_278,REF_282,REF_284,REF_286,REF_288,REF_290,TMP_274"];
}
// Function: 969.sol-FoMo3Dlong-getPlayerInfoByAddress(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_addr == address(0)

IRs:
TMP_275 = CONVERT 0 to address
TMP_276(bool) = _addr == TMP_275
CONDITION TMP_276"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_addr == msg.sender

IRs:
TMP_277(bool) = _addr == msg.sender"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_291(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_291(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_pID,plyr_[_pID].name,plyrRnds_[_pID][_rID].keys,plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff,plyrRnds_[_pID][_rID].eth)

IRs:
REF_292(F3Ddatasets.Player) -> plyr_[_pID]
REF_293(bytes32) -> REF_292.name
REF_294(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_295(F3Ddatasets.PlayerRounds) -> REF_294[_rID]
REF_296(uint256) -> REF_295.keys
REF_297(F3Ddatasets.Player) -> plyr_[_pID]
REF_298(uint256) -> REF_297.win
REF_299(F3Ddatasets.Player) -> plyr_[_pID]
REF_300(uint256) -> REF_299.gen
REF_302(F3Ddatasets.Player) -> plyr_[_pID]
REF_303(uint256) -> REF_302.lrnd
TMP_278(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_303)
TMP_279(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_300', 'TMP_278'] 
REF_304(F3Ddatasets.Player) -> plyr_[_pID]
REF_305(uint256) -> REF_304.aff
REF_306(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_307(F3Ddatasets.PlayerRounds) -> REF_306[_rID]
REF_308(uint256) -> REF_307.eth
RETURN _pID,REF_293,REF_296,REF_298,TMP_279,REF_305,REF_308"];
}
// Function: 969.sol-FoMo3Dlong-getPlayerVaults(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_201(F3Ddatasets.Round) -> round_[_rID]
REF_202(uint256) -> REF_201.end
TMP_247(bool) = now > REF_202
REF_203(F3Ddatasets.Round) -> round_[_rID]
REF_204(bool) -> REF_203.ended
TMP_248(bool) = REF_204 == False
TMP_249(bool) = TMP_247 && TMP_248
REF_205(F3Ddatasets.Round) -> round_[_rID]
REF_206(uint256) -> REF_205.plyr
TMP_250(bool) = REF_206 != 0
TMP_251(bool) = TMP_249 && TMP_250
CONDITION TMP_251"];
2->3[label="True"];
2->7[label="False"];
3[label="Node Type: IF 3

EXPRESSION:
round_[_rID].plyr == _pID

IRs:
REF_207(F3Ddatasets.Round) -> round_[_rID]
REF_208(uint256) -> REF_207.plyr
TMP_252(bool) = REF_208 == _pID
CONDITION TMP_252"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((plyr_[_pID].win).add(((round_[_rID].pot).mul(40)) / 100),(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_209(F3Ddatasets.Player) -> plyr_[_pID]
REF_210(uint256) -> REF_209.win
REF_212(F3Ddatasets.Round) -> round_[_rID]
REF_213(uint256) -> REF_212.pot
TMP_253(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_213', '40'] 
TMP_254(uint256) = TMP_253 / 100
TMP_255(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_210', 'TMP_254'] 
REF_215(F3Ddatasets.Player) -> plyr_[_pID]
REF_216(uint256) -> REF_215.gen
TMP_256(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_219(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_220(F3Ddatasets.PlayerRounds) -> REF_219[_rID]
REF_221(uint256) -> REF_220.mask
TMP_257(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_256', 'REF_221'] 
TMP_258(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_216', 'TMP_257'] 
REF_222(F3Ddatasets.Player) -> plyr_[_pID]
REF_223(uint256) -> REF_222.aff
RETURN TMP_255,TMP_258,REF_223"];
5[label="Node Type: RETURN 5

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(getPlayerVaultsHelper(_pID,_rID).sub(plyrRnds_[_pID][_rID].mask)),plyr_[_pID].aff)

IRs:
REF_224(F3Ddatasets.Player) -> plyr_[_pID]
REF_225(uint256) -> REF_224.win
REF_226(F3Ddatasets.Player) -> plyr_[_pID]
REF_227(uint256) -> REF_226.gen
TMP_259(uint256) = INTERNAL_CALL, FoMo3Dlong.getPlayerVaultsHelper(uint256,uint256)(_pID,_rID)
REF_230(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_231(F3Ddatasets.PlayerRounds) -> REF_230[_rID]
REF_232(uint256) -> REF_231.mask
TMP_260(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_259', 'REF_232'] 
TMP_261(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_227', 'TMP_260'] 
REF_233(F3Ddatasets.Player) -> plyr_[_pID]
REF_234(uint256) -> REF_233.aff
RETURN REF_225,TMP_261,REF_234"];
7[label="Node Type: RETURN 7

EXPRESSION:
(plyr_[_pID].win,(plyr_[_pID].gen).add(calcUnMaskedEarnings(_pID,plyr_[_pID].lrnd)),plyr_[_pID].aff)

IRs:
REF_235(F3Ddatasets.Player) -> plyr_[_pID]
REF_236(uint256) -> REF_235.win
REF_237(F3Ddatasets.Player) -> plyr_[_pID]
REF_238(uint256) -> REF_237.gen
REF_240(F3Ddatasets.Player) -> plyr_[_pID]
REF_241(uint256) -> REF_240.lrnd
TMP_262(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,REF_241)
TMP_263(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_238', 'TMP_262'] 
REF_242(F3Ddatasets.Player) -> plyr_[_pID]
REF_243(uint256) -> REF_242.aff
RETURN REF_236,TMP_263,REF_243"];
}
// Function: 969.sol-FoMo3Dlong-getPlayerVaultsHelper(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(((((round_[_rID].mask).add(((((round_[_rID].pot).mul(potSplit_[round_[_rID].team].gen)) / 100).mul(1000000000000000000)) / (round_[_rID].keys))).mul(plyrRnds_[_pID][_rID].keys)) / 1000000000000000000))

IRs:
REF_244(F3Ddatasets.Round) -> round_[_rID]
REF_245(uint256) -> REF_244.mask
REF_247(F3Ddatasets.Round) -> round_[_rID]
REF_248(uint256) -> REF_247.pot
REF_250(F3Ddatasets.Round) -> round_[_rID]
REF_251(uint256) -> REF_250.team
REF_252(F3Ddatasets.PotSplit) -> potSplit_[REF_251]
REF_253(uint256) -> REF_252.gen
TMP_264(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_248', 'REF_253'] 
TMP_265(uint256) = TMP_264 / 100
TMP_266(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_265', '1000000000000000000'] 
REF_255(F3Ddatasets.Round) -> round_[_rID]
REF_256(uint256) -> REF_255.keys
TMP_267(uint256) = TMP_266 / REF_256
TMP_268(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_245', 'TMP_267'] 
REF_258(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_259(F3Ddatasets.PlayerRounds) -> REF_258[_rID]
REF_260(uint256) -> REF_259.keys
TMP_269(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_268', 'REF_260'] 
TMP_270(uint256) = TMP_269 / 1000000000000000000
RETURN TMP_270"];
}
// Function: 969.sol-FoMo3Dlong-getTimeLeft()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now < round_[_rID].end

IRs:
REF_191(F3Ddatasets.Round) -> round_[_rID]
REF_192(uint256) -> REF_191.end
TMP_241(bool) = _now < REF_192
CONDITION TMP_241"];
3->4[label="True"];
3->8[label="False"];
4[label="Node Type: IF 4

EXPRESSION:
_now > round_[_rID].strt + rndGap_

IRs:
REF_193(F3Ddatasets.Round) -> round_[_rID]
REF_194(uint256) -> REF_193.strt
TMP_242(uint256) = REF_194 + rndGap_
TMP_243(bool) = _now > TMP_242
CONDITION TMP_243"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: RETURN 5

EXPRESSION:
((round_[_rID].end).sub(_now))

IRs:
REF_195(F3Ddatasets.Round) -> round_[_rID]
REF_196(uint256) -> REF_195.end
TMP_244(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_196', '_now'] 
RETURN TMP_244"];
6[label="Node Type: RETURN 6

EXPRESSION:
((round_[_rID].strt + rndGap_).sub(_now))

IRs:
REF_198(F3Ddatasets.Round) -> round_[_rID]
REF_199(uint256) -> REF_198.strt
TMP_245(uint256) = REF_199 + rndGap_
TMP_246(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_245', '_now'] 
RETURN TMP_246"];
8[label="Node Type: RETURN 8

EXPRESSION:
(0)

IRs:
RETURN 0"];
}
// Function: 969.sol-FoMo3Dlong-iWantXKeys(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_510(F3Ddatasets.Round) -> round_[_rID]
REF_511(uint256) -> REF_510.strt
TMP_383(uint256) = REF_511 + rndGap_
TMP_384(bool) = _now > TMP_383
REF_512(F3Ddatasets.Round) -> round_[_rID]
REF_513(uint256) -> REF_512.end
TMP_385(bool) = _now <= REF_513
REF_514(F3Ddatasets.Round) -> round_[_rID]
REF_515(uint256) -> REF_514.end
TMP_386(bool) = _now > REF_515
REF_516(F3Ddatasets.Round) -> round_[_rID]
REF_517(uint256) -> REF_516.plyr
TMP_387(bool) = REF_517 == 0
TMP_388(bool) = TMP_386 && TMP_387
TMP_389(bool) = TMP_385 || TMP_388
TMP_390(bool) = TMP_384 && TMP_389
CONDITION TMP_390"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
((round_[_rID].keys.add(_keys)).ethRec(_keys))

IRs:
REF_518(F3Ddatasets.Round) -> round_[_rID]
REF_519(uint256) -> REF_518.keys
TMP_391(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_519', '_keys'] 
TMP_392(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.ethRec(uint256,uint256), arguments:['TMP_391', '_keys'] 
RETURN TMP_392"];
5[label="Node Type: RETURN 5

EXPRESSION:
((_keys).eth())

IRs:
TMP_393(uint256) = LIBRARY_CALL, dest:F3DKeysCalcLong, function:F3DKeysCalcLong.eth(uint256), arguments:['_keys'] 
RETURN TMP_393"];
}
// Function: 969.sol-FoMo3Dlong-isActivated()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(activated_ == true,its not ready yet.  check ?eta in discord)

IRs:
TMP_553(bool) = activated_ == True
TMP_554(None) = SOLIDITY_CALL require(bool,string)(TMP_553,its not ready yet.  check ?eta in discord)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 969.sol-FoMo3Dlong-isHuman()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: INLINE ASM 3
"];
3->4;
4[label="Node Type: END INLINE ASM 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(_codeLength == 0,sorry humans only)

IRs:
TMP_555(bool) = _codeLength == 0
TMP_556(None) = SOLIDITY_CALL require(bool,string)(TMP_555,sorry humans only)"];
5->6;
6[label="Node Type: _ 6
"];
}
// Function: 969.sol-FoMo3Dlong-isWithinLimits(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_eth >= 1000000000,pocket lint: not a valid currency)

IRs:
TMP_557(bool) = _eth >= 1000000000
TMP_558(None) = SOLIDITY_CALL require(bool,string)(TMP_557,pocket lint: not a valid currency)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_eth <= 100000000000000000000000,no vitalik, no)

IRs:
TMP_559(bool) = _eth <= 100000000000000000000000
TMP_560(None) = SOLIDITY_CALL require(bool,string)(TMP_559,no vitalik, no)"];
2->3;
3[label="Node Type: _ 3
"];
}
// Function: 969.sol-FoMo3Dlong-managePlayer(uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
plyr_[_pID].lrnd != 0

IRs:
REF_563(F3Ddatasets.Player) -> plyr_[_pID]
REF_564(uint256) -> REF_563.lrnd
TMP_419(bool) = REF_564 != 0
CONDITION TMP_419"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_565(F3Ddatasets.Player) -> plyr_[_pID]
REF_566(uint256) -> REF_565.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_566)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].lrnd = rID_

IRs:
REF_567(F3Ddatasets.Player) -> plyr_[_pID]
REF_568(uint256) -> REF_567.lrnd
REF_568(uint256) (->plyr_) := rID_(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + 10

IRs:
REF_569(uint256) -> _eventData_.compressedData
REF_570(uint256) -> _eventData_.compressedData
TMP_421(uint256) = REF_570 + 10
REF_569(uint256) (->_eventData_) := TMP_421(uint256)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
(_eventData_)

IRs:
RETURN _eventData_"];
}
// Function: 969.sol-FoMo3Dlong-onlyDevs()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == 0xa78cd12e5f2daf88023f0bfe119eac8b3f3dbc93 || msg.sender == 0xfB31eb7B96e413BEbEe61F5E3880938b937c2Ef0 || msg.sender == 0xEa8A4f09C45967DFCFda180fA80ad44eefAb52bE || msg.sender == 0xf1E32a3EaA5D6c360AF6AA2c45a97e377Be183BD,only team just can activate)

IRs:
TMP_561(bool) = msg.sender == 956541785302637977197075496991133499377441422483
TMP_562(bool) = msg.sender == 1434069933434005259579544347796944161847818071792
TMP_563(bool) = TMP_561 || TMP_562
TMP_564(bool) = msg.sender == 1338988228404298494426668435023171328770606584510
TMP_565(bool) = TMP_563 || TMP_564
TMP_566(bool) = msg.sender == 1380932724968581497495090632512806968020632175549
TMP_567(bool) = TMP_565 || TMP_566
TMP_568(None) = SOLIDITY_CALL require(bool,string)(TMP_567,only team just can activate)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 969.sol-FoMo3Dlong-potSwap()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_ + 1

IRs:
TMP_491(uint256) = rID_ + 1
_rID(uint256) := TMP_491(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].pot = round_[_rID].pot.add(msg.value)

IRs:
REF_676(F3Ddatasets.Round) -> round_[_rID]
REF_677(uint256) -> REF_676.pot
REF_678(F3Ddatasets.Round) -> round_[_rID]
REF_679(uint256) -> REF_678.pot
TMP_492(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_679', 'msg.value'] 
REF_677(uint256) (->round_) := TMP_492(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
F3Devents.onPotSwapDeposit(_rID,msg.value)

IRs:
Emit onPotSwapDeposit(_rID,msg.value)"];
}
// Function: 969.sol-FoMo3Dlong-reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].strt + rndGap_ && (_now <= round_[_rID].end || (_now > round_[_rID].end && round_[_rID].plyr == 0))

IRs:
REF_343(F3Ddatasets.Round) -> round_[_rID]
REF_344(uint256) -> REF_343.strt
TMP_298(uint256) = REF_344 + rndGap_
TMP_299(bool) = _now > TMP_298
REF_345(F3Ddatasets.Round) -> round_[_rID]
REF_346(uint256) -> REF_345.end
TMP_300(bool) = _now <= REF_346
REF_347(F3Ddatasets.Round) -> round_[_rID]
REF_348(uint256) -> REF_347.end
TMP_301(bool) = _now > REF_348
REF_349(F3Ddatasets.Round) -> round_[_rID]
REF_350(uint256) -> REF_349.plyr
TMP_302(bool) = REF_350 == 0
TMP_303(bool) = TMP_301 && TMP_302
TMP_304(bool) = TMP_300 || TMP_303
TMP_305(bool) = TMP_299 && TMP_304
CONDITION TMP_305"];
3->4[label="True"];
3->6[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].gen = withdrawEarnings(_pID).sub(_eth)

IRs:
REF_351(F3Ddatasets.Player) -> plyr_[_pID]
REF_352(uint256) -> REF_351.gen
TMP_306(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
TMP_307(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_306', '_eth'] 
REF_352(uint256) (->plyr_) := TMP_307(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
core(_rID,_pID,_eth,_affID,_team,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.core(uint256,uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_rID,_pID,_eth,_affID,_team,_eventData_)"];
5->13;
6[label="Node Type: IF 6

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false

IRs:
REF_354(F3Ddatasets.Round) -> round_[_rID]
REF_355(uint256) -> REF_354.end
TMP_309(bool) = _now > REF_355
REF_356(F3Ddatasets.Round) -> round_[_rID]
REF_357(bool) -> REF_356.ended
TMP_310(bool) = REF_357 == False
TMP_311(bool) = TMP_309 && TMP_310
CONDITION TMP_311"];
6->7[label="True"];
6->12[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_358(F3Ddatasets.Round) -> round_[_rID]
REF_359(bool) -> REF_358.ended
REF_359(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_312(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_312(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_360(uint256) -> _eventData_.compressedData
REF_361(uint256) -> _eventData_.compressedData
TMP_313(uint256) = _now * 1000000000000000000
TMP_314(uint256) = REF_361 + TMP_313
REF_360(uint256) (->_eventData_) := TMP_314(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_362(uint256) -> _eventData_.compressedIDs
REF_363(uint256) -> _eventData_.compressedIDs
TMP_315(uint256) = REF_363 + _pID
REF_362(uint256) (->_eventData_) := TMP_315(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
F3Devents.onReLoadAndDistribute(msg.sender,plyr_[_pID].name,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_365(F3Ddatasets.Player) -> plyr_[_pID]
REF_366(bytes32) -> REF_365.name
REF_367(uint256) -> _eventData_.compressedData
REF_368(uint256) -> _eventData_.compressedIDs
REF_369(address) -> _eventData_.winnerAddr
REF_370(bytes32) -> _eventData_.winnerName
REF_371(uint256) -> _eventData_.amountWon
REF_372(uint256) -> _eventData_.newPot
REF_373(uint256) -> _eventData_.P3DAmount
REF_374(uint256) -> _eventData_.genAmount
Emit onReLoadAndDistribute(msg.sender,REF_366,REF_367,REF_368,REF_369,REF_370,REF_371,REF_372,REF_373,REF_374)"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: END_IF 13
"];
}
// Function: 969.sol-FoMo3Dlong-reLoadXaddr(address,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_101(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_101(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode == address(0) || _affCode == msg.sender

IRs:
TMP_181 = CONVERT 0 to address
TMP_182(bool) = _affCode == TMP_181
TMP_183(bool) = _affCode == msg.sender
TMP_184(bool) = TMP_182 || TMP_183
CONDITION TMP_184"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_102(F3Ddatasets.Player) -> plyr_[_pID]
REF_103(uint256) -> REF_102.laff
_affID(uint256) := REF_103(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxAddr_[_affCode]

IRs:
REF_104(uint256) -> pIDxAddr_[_affCode]
_affID(uint256) := REF_104(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_105(F3Ddatasets.Player) -> plyr_[_pID]
REF_106(uint256) -> REF_105.laff
TMP_185(bool) = _affID != REF_106
CONDITION TMP_185"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_107(F3Ddatasets.Player) -> plyr_[_pID]
REF_108(uint256) -> REF_107.laff
REF_108(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_186(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_186(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 969.sol-FoMo3Dlong-reLoadXid(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->11;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_94(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_94(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_affCode == 0 || _affCode == _pID

IRs:
TMP_172(bool) = _affCode == 0
TMP_173(bool) = _affCode == _pID
TMP_174(bool) = TMP_172 || TMP_173
CONDITION TMP_174"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_affCode = plyr_[_pID].laff

IRs:
REF_95(F3Ddatasets.Player) -> plyr_[_pID]
REF_96(uint256) -> REF_95.laff
_affCode(uint256) := REF_96(uint256)"];
4->8;
5[label="Node Type: IF 5

EXPRESSION:
_affCode != plyr_[_pID].laff

IRs:
REF_97(F3Ddatasets.Player) -> plyr_[_pID]
REF_98(uint256) -> REF_97.laff
TMP_175(bool) = _affCode != REF_98
CONDITION TMP_175"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].laff = _affCode

IRs:
REF_99(F3Ddatasets.Player) -> plyr_[_pID]
REF_100(uint256) -> REF_99.laff
REF_100(uint256) (->plyr_) := _affCode(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_176(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_176(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
reLoadCore(_pID,_affCode,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affCode,_team,_eth,_eventData_)"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
13->1;
}
// Function: 969.sol-FoMo3Dlong-reLoadXname(bytes32,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_109(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_109(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
_affCode ==  || _affCode == plyr_[_pID].name

IRs:
TMP_191(bool) = _affCode == 
REF_110(F3Ddatasets.Player) -> plyr_[_pID]
REF_111(bytes32) -> REF_110.name
TMP_192(bool) = _affCode == REF_111
TMP_193(bool) = TMP_191 || TMP_192
CONDITION TMP_193"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_affID = plyr_[_pID].laff

IRs:
REF_112(F3Ddatasets.Player) -> plyr_[_pID]
REF_113(uint256) -> REF_112.laff
_affID(uint256) := REF_113(uint256)"];
5->10;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_affID = pIDxName_[_affCode]

IRs:
REF_114(uint256) -> pIDxName_[_affCode]
_affID(uint256) := REF_114(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_affID != plyr_[_pID].laff

IRs:
REF_115(F3Ddatasets.Player) -> plyr_[_pID]
REF_116(uint256) -> REF_115.laff
TMP_194(bool) = _affID != REF_116
CONDITION TMP_194"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
plyr_[_pID].laff = _affID

IRs:
REF_117(F3Ddatasets.Player) -> plyr_[_pID]
REF_118(uint256) -> REF_117.laff
REF_118(uint256) (->plyr_) := _affID(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
_team = verifyTeam(_team)

IRs:
TMP_195(uint256) = INTERNAL_CALL, FoMo3Dlong.verifyTeam(uint256)(_team)
_team(uint256) := TMP_195(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
reLoadCore(_pID,_affID,_team,_eth,_eventData_)

IRs:
INTERNAL_CALL, FoMo3Dlong.reLoadCore(uint256,uint256,uint256,uint256,F3Ddatasets.EventReturns)(_pID,_affID,_team,_eth,_eventData_)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
isWithinLimits(_eth)

IRs:
MODIFIER_CALL, FoMo3Dlong.isWithinLimits(uint256)(_eth)"];
15->1;
}
// Function: 969.sol-FoMo3Dlong-receivePlayerInfo(uint256,address,bytes32,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_394 = CONVERT PlayerBook to address
TMP_395(bool) = msg.sender == TMP_394
TMP_396(None) = SOLIDITY_CALL require(bool,string)(TMP_395,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
pIDxAddr_[_addr] != _pID

IRs:
REF_523(uint256) -> pIDxAddr_[_addr]
TMP_397(bool) = REF_523 != _pID
CONDITION TMP_397"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
pIDxAddr_[_addr] = _pID

IRs:
REF_524(uint256) -> pIDxAddr_[_addr]
REF_524(uint256) (->pIDxAddr_) := _pID(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
pIDxName_[_name] != _pID

IRs:
REF_525(uint256) -> pIDxName_[_name]
TMP_398(bool) = REF_525 != _pID
CONDITION TMP_398"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
pIDxName_[_name] = _pID

IRs:
REF_526(uint256) -> pIDxName_[_name]
REF_526(uint256) (->pIDxName_) := _pID(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
plyr_[_pID].addr != _addr

IRs:
REF_527(F3Ddatasets.Player) -> plyr_[_pID]
REF_528(address) -> REF_527.addr
TMP_399(bool) = REF_528 != _addr
CONDITION TMP_399"];
8->9[label="True"];
8->10[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
plyr_[_pID].addr = _addr

IRs:
REF_529(F3Ddatasets.Player) -> plyr_[_pID]
REF_530(address) -> REF_529.addr
REF_530(address) (->plyr_) := _addr(address)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: IF 11

EXPRESSION:
plyr_[_pID].name != _name

IRs:
REF_531(F3Ddatasets.Player) -> plyr_[_pID]
REF_532(bytes32) -> REF_531.name
TMP_400(bool) = REF_532 != _name
CONDITION TMP_400"];
11->12[label="True"];
11->13[label="False"];
12[label="Node Type: EXPRESSION 12

EXPRESSION:
plyr_[_pID].name = _name

IRs:
REF_533(F3Ddatasets.Player) -> plyr_[_pID]
REF_534(bytes32) -> REF_533.name
REF_534(bytes32) (->plyr_) := _name(bytes32)"];
12->13;
13[label="Node Type: END_IF 13
"];
13->14;
14[label="Node Type: IF 14

EXPRESSION:
plyr_[_pID].laff != _laff

IRs:
REF_535(F3Ddatasets.Player) -> plyr_[_pID]
REF_536(uint256) -> REF_535.laff
TMP_401(bool) = REF_536 != _laff
CONDITION TMP_401"];
14->15[label="True"];
14->16[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
plyr_[_pID].laff = _laff

IRs:
REF_537(F3Ddatasets.Player) -> plyr_[_pID]
REF_538(uint256) -> REF_537.laff
REF_538(uint256) (->plyr_) := _laff(uint256)"];
15->16;
16[label="Node Type: END_IF 16
"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_539(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_540(bool) -> REF_539[_name]
TMP_402(bool) = REF_540 == False
CONDITION TMP_402"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_541(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_542(bool) -> REF_541[_name]
REF_542(bool) (->plyrNames_) := True(bool)"];
18->19;
19[label="Node Type: END_IF 19
"];
}
// Function: 969.sol-FoMo3Dlong-receivePlayerNameList(uint256,bytes32)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == address(PlayerBook),your not playerNames contract... hmmm..)

IRs:
TMP_403 = CONVERT PlayerBook to address
TMP_404(bool) = msg.sender == TMP_403
TMP_405(None) = SOLIDITY_CALL require(bool,string)(TMP_404,your not playerNames contract... hmmm..)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
plyrNames_[_pID][_name] == false

IRs:
REF_543(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_544(bool) -> REF_543[_name]
TMP_406(bool) = REF_544 == False
CONDITION TMP_406"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyrNames_[_pID][_name] = true

IRs:
REF_545(mapping(bytes32 => bool)) -> plyrNames_[_pID]
REF_546(bool) -> REF_545[_name]
REF_546(bool) (->plyrNames_) := True(bool)"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 969.sol-FoMo3Dlong-registerNameXID(string,uint256,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_219(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_219(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXIDFromDapp.value(_paid)(_addr,_name,_affCode,_all)

IRs:
TUPLE_0(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXIDFromDapp, arguments:['_addr', '_name', '_affCode', '_all'] value:_paid 
_isNewPlayer(bool)= UNPACK TUPLE_0 index: 0 
_affID(uint256)= UNPACK TUPLE_0 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_155(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_155(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_157(F3Ddatasets.Player) -> plyr_[_affID]
REF_158(address) -> REF_157.addr
REF_159(F3Ddatasets.Player) -> plyr_[_affID]
REF_160(bytes32) -> REF_159.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_158,REF_160,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 969.sol-FoMo3Dlong-registerNameXaddr(string,address,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_223(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_223(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXaddrFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_1(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXaddrFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_1 index: 0 
_affID(uint256)= UNPACK TUPLE_1 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_164(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_164(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_166(F3Ddatasets.Player) -> plyr_[_affID]
REF_167(address) -> REF_166.addr
REF_168(F3Ddatasets.Player) -> plyr_[_affID]
REF_169(bytes32) -> REF_168.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_167,REF_169,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 969.sol-FoMo3Dlong-registerNameXname(string,bytes32,bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->9;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_name = _nameString.nameFilter()

IRs:
TMP_227(bytes32) = LIBRARY_CALL, dest:NameFilter, function:NameFilter.nameFilter(string), arguments:['_nameString'] 
_name(bytes32) := TMP_227(bytes32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_addr = msg.sender

IRs:
_addr(address) := msg.sender(address)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_paid = msg.value

IRs:
_paid(uint256) := msg.value(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(_isNewPlayer,_affID) = PlayerBook.registerNameXnameFromDapp.value(msg.value)(msg.sender,_name,_affCode,_all)

IRs:
TUPLE_2(bool,uint256) = HIGH_LEVEL_CALL, dest:PlayerBook(PlayerBookInterface), function:registerNameXnameFromDapp, arguments:['msg.sender', '_name', '_affCode', '_all'] value:msg.value 
_isNewPlayer(bool)= UNPACK TUPLE_2 index: 0 
_affID(uint256)= UNPACK TUPLE_2 index: 1 "];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
_pID = pIDxAddr_[_addr]

IRs:
REF_173(uint256) -> pIDxAddr_[_addr]
_pID(uint256) := REF_173(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
F3Devents.onNewName(_pID,_addr,_name,_isNewPlayer,_affID,plyr_[_affID].addr,plyr_[_affID].name,_paid,now)

IRs:
REF_175(F3Ddatasets.Player) -> plyr_[_affID]
REF_176(address) -> REF_175.addr
REF_177(F3Ddatasets.Player) -> plyr_[_affID]
REF_178(bytes32) -> REF_177.name
Emit onNewName(_pID,_addr,_name,_isNewPlayer,_affID,REF_176,REF_178,_paid,now)"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
9->1;
}
// Function: 969.sol-FoMo3Dlong-setOtherFomo(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(otherF3D_) == address(0),silly dev, you already did that)

IRs:
TMP_541 = CONVERT otherF3D_ to address
TMP_542 = CONVERT 0 to address
TMP_543(bool) = TMP_541 == TMP_542
TMP_544(None) = SOLIDITY_CALL require(bool,string)(TMP_543,silly dev, you already did that)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
otherF3D_ = otherFoMo3D(_otherF3D)

IRs:
TMP_545 = CONVERT _otherF3D to otherFoMo3D
otherF3D_(otherFoMo3D) := TMP_545(otherFoMo3D)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, FoMo3Dlong.onlyDevs()()"];
3->1;
}
// Function: 969.sol-FoMo3Dlong-setOtherFounder(address,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
myFounder_[_otherF3D] = true

IRs:
REF_759(bool) -> myFounder_[_otherF3D]
REF_759(bool) (->myFounder_) := True(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
myFounder_PID[_otherF3D] = _values.mul(1000000000000000000)

IRs:
REF_760(uint256) -> myFounder_PID[_otherF3D]
TMP_547(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_values', '1000000000000000000'] 
REF_760(uint256) (->myFounder_PID) := TMP_547(uint256)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyDevs()

IRs:
MODIFIER_CALL, FoMo3Dlong.onlyDevs()()"];
3->1;
}
// Function: 969.sol-FoMo3Dlong-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
Divies = DiviesInterface(0x6e6d9770e44f57db3bb94d18e3e7cc5ba7855f6d)

IRs:
TMP_549 = CONVERT 630432958387538932960296577617667604997543911277 to DiviesInterface
Divies(DiviesInterface) := TMP_549(DiviesInterface)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
Jekyll_Island_Inc = JIincForwarderInterface(0xca255f23ba3fd322fb634d3783db90659a7a48ba)

IRs:
TMP_550 = CONVERT 1154049551103375380685676263635587437979019921594 to JIincForwarderInterface
Jekyll_Island_Inc(JIincForwarderInterface) := TMP_550(JIincForwarderInterface)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
PlayerBook = PlayerBookInterface(0x8727455a941d4f95e20a4c76ec3aef019fe73811)

IRs:
TMP_551 = CONVERT 771589524693981278585850670137892437090349037585 to PlayerBookInterface
PlayerBook(PlayerBookInterface) := TMP_551(PlayerBookInterface)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
extSettings = F3DexternalSettingsInterface(0x35d3f1c98d9fd8087e312e953f32233ace1996b6)

IRs:
TMP_552 = CONVERT 307303030736469865874828087708824810502376494774 to F3DexternalSettingsInterface
extSettings(F3DexternalSettingsInterface) := TMP_552(F3DexternalSettingsInterface)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
name = FoMoKiller long

IRs:
name(string) := FoMoKiller long(string)"];
4->5;
5[label="Node Type: OTHER_ENTRYPOINT 5

EXPRESSION:
symbol = FoMoKiller

IRs:
symbol(string) := FoMoKiller(string)"];
5->6;
6[label="Node Type: OTHER_ENTRYPOINT 6

EXPRESSION:
rndInit_ = 86400

IRs:
rndInit_(uint256) := 86400(uint256)"];
6->7;
7[label="Node Type: OTHER_ENTRYPOINT 7

EXPRESSION:
rndInc_ = 30

IRs:
rndInc_(uint256) := 30(uint256)"];
7->8;
8[label="Node Type: OTHER_ENTRYPOINT 8

EXPRESSION:
rndMax_ = 86400

IRs:
rndMax_(uint256) := 86400(uint256)"];
}
// Function: 969.sol-FoMo3Dlong-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
rndExtra_ = 15

IRs:
rndExtra_(uint256) := 15(uint256)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
rndGap_ = 3600

IRs:
rndGap_(uint256) := 3600(uint256)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
airDropTracker_ = 0

IRs:
airDropTracker_(uint256) := 0(uint256)"];
2->3;
3[label="Node Type: OTHER_ENTRYPOINT 3

EXPRESSION:
ourTEAM = 0xf1E32a3EaA5D6c360AF6AA2c45a97e377Be183BD

IRs:
ourTEAM(address) := 1380932724968581497495090632512806968020632175549(address)"];
3->4;
4[label="Node Type: OTHER_ENTRYPOINT 4

EXPRESSION:
activated_ = false

IRs:
activated_(bool) := False(bool)"];
}
// Function: 969.sol-FoMo3Dlong-updateGenVault(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_earnings = calcUnMaskedEarnings(_pID,_rIDlast)

IRs:
TMP_452(uint256) = INTERNAL_CALL, FoMo3Dlong.calcUnMaskedEarnings(uint256,uint256)(_pID,_rIDlast)
_earnings(uint256) := TMP_452(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
_earnings > 0

IRs:
TMP_453(bool) = _earnings > 0
CONDITION TMP_453"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
plyr_[_pID].gen = _earnings.add(plyr_[_pID].gen)

IRs:
REF_629(F3Ddatasets.Player) -> plyr_[_pID]
REF_630(uint256) -> REF_629.gen
REF_632(F3Ddatasets.Player) -> plyr_[_pID]
REF_633(uint256) -> REF_632.gen
TMP_454(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_633'] 
REF_630(uint256) (->plyr_) := TMP_454(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rIDlast].mask = _earnings.add(plyrRnds_[_pID][_rIDlast].mask)

IRs:
REF_634(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_635(F3Ddatasets.PlayerRounds) -> REF_634[_rIDlast]
REF_636(uint256) -> REF_635.mask
REF_638(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_639(F3Ddatasets.PlayerRounds) -> REF_638[_rIDlast]
REF_640(uint256) -> REF_639.mask
TMP_455(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_earnings', 'REF_640'] 
REF_636(uint256) (->plyrRnds_) := TMP_455(uint256)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
// Function: 969.sol-FoMo3Dlong-updateMasks(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_ppt = (_gen.mul(1000000000000000000)) / (round_[_rID].keys)

IRs:
TMP_506(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_gen', '1000000000000000000'] 
REF_700(F3Ddatasets.Round) -> round_[_rID]
REF_701(uint256) -> REF_700.keys
TMP_507(uint256) = TMP_506 / REF_701
_ppt(uint256) := TMP_507(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
round_[_rID].mask = _ppt.add(round_[_rID].mask)

IRs:
REF_702(F3Ddatasets.Round) -> round_[_rID]
REF_703(uint256) -> REF_702.mask
REF_705(F3Ddatasets.Round) -> round_[_rID]
REF_706(uint256) -> REF_705.mask
TMP_508(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['_ppt', 'REF_706'] 
REF_703(uint256) (->round_) := TMP_508(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pearn = (_ppt.mul(_keys)) / (1000000000000000000)

IRs:
TMP_509(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', '_keys'] 
TMP_510(uint256) = TMP_509 / 1000000000000000000
_pearn(uint256) := TMP_510(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyrRnds_[_pID][_rID].mask = (((round_[_rID].mask.mul(_keys)) / (1000000000000000000)).sub(_pearn)).add(plyrRnds_[_pID][_rID].mask)

IRs:
REF_708(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_709(F3Ddatasets.PlayerRounds) -> REF_708[_rID]
REF_710(uint256) -> REF_709.mask
REF_711(F3Ddatasets.Round) -> round_[_rID]
REF_712(uint256) -> REF_711.mask
TMP_511(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_712', '_keys'] 
TMP_512(uint256) = TMP_511 / 1000000000000000000
TMP_513(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_512', '_pearn'] 
REF_716(mapping(uint256 => F3Ddatasets.PlayerRounds)) -> plyrRnds_[_pID]
REF_717(F3Ddatasets.PlayerRounds) -> REF_716[_rID]
REF_718(uint256) -> REF_717.mask
TMP_514(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_513', 'REF_718'] 
REF_710(uint256) (->plyrRnds_) := TMP_514(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
(_gen.sub((_ppt.mul(round_[_rID].keys)) / (1000000000000000000)))

IRs:
REF_721(F3Ddatasets.Round) -> round_[_rID]
REF_722(uint256) -> REF_721.keys
TMP_515(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_ppt', 'REF_722'] 
TMP_516(uint256) = TMP_515 / 1000000000000000000
TMP_517(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_gen', 'TMP_516'] 
RETURN TMP_517"];
}
// Function: 969.sol-FoMo3Dlong-updateTimer(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_now > round_[_rID].end && round_[_rID].plyr == 0

IRs:
REF_641(F3Ddatasets.Round) -> round_[_rID]
REF_642(uint256) -> REF_641.end
TMP_456(bool) = _now > REF_642
REF_643(F3Ddatasets.Round) -> round_[_rID]
REF_644(uint256) -> REF_643.plyr
TMP_457(bool) = REF_644 == 0
TMP_458(bool) = TMP_456 && TMP_457
CONDITION TMP_458"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(_now)

IRs:
TMP_459(uint256) = _keys / 1000000000000000000
TMP_460(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_459', 'rndInc_'] 
TMP_461(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_460', '_now'] 
_newTime(uint256) := TMP_461(uint256)"];
4->6;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_newTime = (((_keys) / (1000000000000000000)).mul(rndInc_)).add(round_[_rID].end)

IRs:
TMP_462(uint256) = _keys / 1000000000000000000
TMP_463(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_462', 'rndInc_'] 
REF_649(F3Ddatasets.Round) -> round_[_rID]
REF_650(uint256) -> REF_649.end
TMP_464(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_463', 'REF_650'] 
_newTime(uint256) := TMP_464(uint256)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
_newTime < (rndMax_).add(_now)

IRs:
TMP_465(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
TMP_466(bool) = _newTime < TMP_465
CONDITION TMP_466"];
7->8[label="True"];
7->9[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
round_[_rID].end = _newTime

IRs:
REF_652(F3Ddatasets.Round) -> round_[_rID]
REF_653(uint256) -> REF_652.end
REF_653(uint256) (->round_) := _newTime(uint256)"];
8->10;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
round_[_rID].end = rndMax_.add(_now)

IRs:
REF_654(F3Ddatasets.Round) -> round_[_rID]
REF_655(uint256) -> REF_654.end
TMP_467(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['rndMax_', '_now'] 
REF_655(uint256) (->round_) := TMP_467(uint256)"];
9->10;
10[label="Node Type: END_IF 10
"];
}
// Function: 969.sol-FoMo3Dlong-verifyTeam(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
_team < 0 || _team > 3

IRs:
TMP_416(bool) = _team < 0
TMP_417(bool) = _team > 3
TMP_418(bool) = TMP_416 || TMP_417
CONDITION TMP_418"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(2)

IRs:
RETURN 2"];
3[label="Node Type: RETURN 3

EXPRESSION:
(_team)

IRs:
RETURN _team"];
}
// Function: 969.sol-FoMo3Dlong-withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->22;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_rID = rID_

IRs:
_rID(uint256) := rID_(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_now = now

IRs:
_now(uint256) := now(uint256)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
_pID = pIDxAddr_[msg.sender]

IRs:
REF_119(uint256) -> pIDxAddr_[msg.sender]
_pID(uint256) := REF_119(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_now > round_[_rID].end && round_[_rID].ended == false && round_[_rID].plyr != 0

IRs:
REF_120(F3Ddatasets.Round) -> round_[_rID]
REF_121(uint256) -> REF_120.end
TMP_200(bool) = _now > REF_121
REF_122(F3Ddatasets.Round) -> round_[_rID]
REF_123(bool) -> REF_122.ended
TMP_201(bool) = REF_123 == False
TMP_202(bool) = TMP_200 && TMP_201
REF_124(F3Ddatasets.Round) -> round_[_rID]
REF_125(uint256) -> REF_124.plyr
TMP_203(bool) = REF_125 != 0
TMP_204(bool) = TMP_202 && TMP_203
CONDITION TMP_204"];
5->6[label="True"];
5->16[label="False"];
6[label="Node Type: NEW VARIABLE 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
round_[_rID].ended = true

IRs:
REF_126(F3Ddatasets.Round) -> round_[_rID]
REF_127(bool) -> REF_126.ended
REF_127(bool) (->round_) := True(bool)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
_eventData_ = endRound(_eventData_)

IRs:
TMP_205(F3Ddatasets.EventReturns) = INTERNAL_CALL, FoMo3Dlong.endRound(F3Ddatasets.EventReturns)(_eventData_)
_eventData_(F3Ddatasets.EventReturns) := TMP_205(F3Ddatasets.EventReturns)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_206(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_206(uint256)"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
_eth > 0

IRs:
TMP_207(bool) = _eth > 0
CONDITION TMP_207"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_128(F3Ddatasets.Player) -> plyr_[_pID]
REF_129(address) -> REF_128.addr
Transfer dest:REF_129 value:_eth"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
_eventData_.compressedData = _eventData_.compressedData + (_now * 1000000000000000000)

IRs:
REF_131(uint256) -> _eventData_.compressedData
REF_132(uint256) -> _eventData_.compressedData
TMP_209(uint256) = _now * 1000000000000000000
TMP_210(uint256) = REF_132 + TMP_209
REF_131(uint256) (->_eventData_) := TMP_210(uint256)"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
_eventData_.compressedIDs = _eventData_.compressedIDs + _pID

IRs:
REF_133(uint256) -> _eventData_.compressedIDs
REF_134(uint256) -> _eventData_.compressedIDs
TMP_211(uint256) = REF_134 + _pID
REF_133(uint256) (->_eventData_) := TMP_211(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
F3Devents.onWithdrawAndDistribute(msg.sender,plyr_[_pID].name,_eth,_eventData_.compressedData,_eventData_.compressedIDs,_eventData_.winnerAddr,_eventData_.winnerName,_eventData_.amountWon,_eventData_.newPot,_eventData_.P3DAmount,_eventData_.genAmount)

IRs:
REF_136(F3Ddatasets.Player) -> plyr_[_pID]
REF_137(bytes32) -> REF_136.name
REF_138(uint256) -> _eventData_.compressedData
REF_139(uint256) -> _eventData_.compressedIDs
REF_140(address) -> _eventData_.winnerAddr
REF_141(bytes32) -> _eventData_.winnerName
REF_142(uint256) -> _eventData_.amountWon
REF_143(uint256) -> _eventData_.newPot
REF_144(uint256) -> _eventData_.P3DAmount
REF_145(uint256) -> _eventData_.genAmount
Emit onWithdrawAndDistribute(msg.sender,REF_137,_eth,REF_138,REF_139,REF_140,REF_141,REF_142,REF_143,REF_144,REF_145)"];
15->21;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
_eth = withdrawEarnings(_pID)

IRs:
TMP_213(uint256) = INTERNAL_CALL, FoMo3Dlong.withdrawEarnings(uint256)(_pID)
_eth(uint256) := TMP_213(uint256)"];
16->17;
17[label="Node Type: IF 17

EXPRESSION:
_eth > 0

IRs:
TMP_214(bool) = _eth > 0
CONDITION TMP_214"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
plyr_[_pID].addr.transfer(_eth)

IRs:
REF_146(F3Ddatasets.Player) -> plyr_[_pID]
REF_147(address) -> REF_146.addr
Transfer dest:REF_147 value:_eth"];
18->19;
19[label="Node Type: END_IF 19
"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
F3Devents.onWithdraw(_pID,msg.sender,plyr_[_pID].name,_eth,_now)

IRs:
REF_150(F3Ddatasets.Player) -> plyr_[_pID]
REF_151(bytes32) -> REF_150.name
Emit onWithdraw(_pID,msg.sender,REF_151,_eth,_now)"];
20->21;
21[label="Node Type: END_IF 21
"];
22[label="Node Type: EXPRESSION 22

EXPRESSION:
isActivated()

IRs:
MODIFIER_CALL, FoMo3Dlong.isActivated()()"];
22->23;
23[label="Node Type: EXPRESSION 23

EXPRESSION:
isHuman()

IRs:
MODIFIER_CALL, FoMo3Dlong.isHuman()()"];
23->1;
}
// Function: 969.sol-FoMo3Dlong-withdrawEarnings(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
updateGenVault(_pID,plyr_[_pID].lrnd)

IRs:
REF_723(F3Ddatasets.Player) -> plyr_[_pID]
REF_724(uint256) -> REF_723.lrnd
INTERNAL_CALL, FoMo3Dlong.updateGenVault(uint256,uint256)(_pID,REF_724)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_earnings = (plyr_[_pID].win).add(plyr_[_pID].gen).add(plyr_[_pID].aff)

IRs:
REF_725(F3Ddatasets.Player) -> plyr_[_pID]
REF_726(uint256) -> REF_725.win
REF_728(F3Ddatasets.Player) -> plyr_[_pID]
REF_729(uint256) -> REF_728.gen
TMP_519(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_726', 'REF_729'] 
REF_731(F3Ddatasets.Player) -> plyr_[_pID]
REF_732(uint256) -> REF_731.aff
TMP_520(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_519', 'REF_732'] 
_earnings(uint256) := TMP_520(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
_earnings > 0

IRs:
TMP_521(bool) = _earnings > 0
CONDITION TMP_521"];
3->4[label="True"];
3->7[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
plyr_[_pID].win = 0

IRs:
REF_733(F3Ddatasets.Player) -> plyr_[_pID]
REF_734(uint256) -> REF_733.win
REF_734(uint256) (->plyr_) := 0(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
plyr_[_pID].gen = 0

IRs:
REF_735(F3Ddatasets.Player) -> plyr_[_pID]
REF_736(uint256) -> REF_735.gen
REF_736(uint256) (->plyr_) := 0(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
plyr_[_pID].aff = 0

IRs:
REF_737(F3Ddatasets.Player) -> plyr_[_pID]
REF_738(uint256) -> REF_737.aff
REF_738(uint256) (->plyr_) := 0(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
(_earnings)

IRs:
RETURN _earnings"];
}
// Function: 969.sol-HourglassInterface-balanceOf(address)
digraph{
}
// Function: 969.sol-HourglassInterface-buy(address)
digraph{
}
// Function: 969.sol-HourglassInterface-dividendsOf(address)
digraph{
}
// Function: 969.sol-HourglassInterface-exit()
digraph{
}
// Function: 969.sol-HourglassInterface-fallback()
digraph{
}
// Function: 969.sol-HourglassInterface-reinvest()
digraph{
}
// Function: 969.sol-HourglassInterface-sell(uint256)
digraph{
}
// Function: 969.sol-HourglassInterface-stakingRequirement()
digraph{
}
// Function: 969.sol-HourglassInterface-transfer(address,uint256)
digraph{
}
// Function: 969.sol-HourglassInterface-withdraw()
digraph{
}
// Function: 969.sol-JIincForwarderInterface-cancelMigration()
digraph{
}
// Function: 969.sol-JIincForwarderInterface-deposit()
digraph{
}
// Function: 969.sol-JIincForwarderInterface-finishMigration()
digraph{
}
// Function: 969.sol-JIincForwarderInterface-setup(address)
digraph{
}
// Function: 969.sol-JIincForwarderInterface-startMigration(address)
digraph{
}
// Function: 969.sol-JIincForwarderInterface-status()
digraph{
}
// Function: 969.sol-NameFilter-nameFilter(string)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
_temp = bytes(_input)

IRs:
TMP_46 = CONVERT _input to bytes
_temp(bytes) := TMP_46(bytes)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
_length = _temp.length

IRs:
REF_15 -> LENGTH _temp
_length(uint256) := REF_15(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool,string)(_length <= 32 && _length > 0,string must be between 1 and 32 characters)

IRs:
TMP_47(bool) = _length <= 32
TMP_48(bool) = _length > 0
TMP_49(bool) = TMP_47 && TMP_48
TMP_50(None) = SOLIDITY_CALL require(bool,string)(TMP_49,string must be between 1 and 32 characters)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(_temp[0] != 0x20 && _temp[_length - 1] != 0x20,string cannot start or end with space)

IRs:
REF_16(None) -> _temp[0]
TMP_51(bool) = REF_16 != 32
TMP_52(uint256) = _length - 1
REF_17(None) -> _temp[TMP_52]
TMP_53(bool) = REF_17 != 32
TMP_54(bool) = TMP_51 && TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool,string)(TMP_54,string cannot start or end with space)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
_temp[0] == 0x30

IRs:
REF_18(None) -> _temp[0]
TMP_56(bool) = REF_18 == 48
CONDITION TMP_56"];
5->6[label="True"];
5->8[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(_temp[1] != 0x78,string cannot start with 0x)

IRs:
REF_19(None) -> _temp[1]
TMP_57(bool) = REF_19 != 120
TMP_58(None) = SOLIDITY_CALL require(bool,string)(TMP_57,string cannot start with 0x)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(_temp[1] != 0x58,string cannot start with 0X)

IRs:
REF_20(None) -> _temp[1]
TMP_59(bool) = REF_20 != 88
TMP_60(None) = SOLIDITY_CALL require(bool,string)(TMP_59,string cannot start with 0X)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: NEW VARIABLE 9
"];
9->12;
10[label="Node Type: BEGIN_LOOP 10
"];
10->13;
11[label="Node Type: END_LOOP 11
"];
11->28;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
12->10;
13[label="Node Type: IF_LOOP 13

EXPRESSION:
i < _length

IRs:
TMP_61(bool) = i < _length
CONDITION TMP_61"];
13->14[label="True"];
13->11[label="False"];
14[label="Node Type: IF 14

EXPRESSION:
_temp[i] > 0x40 && _temp[i] < 0x5b

IRs:
REF_21(None) -> _temp[i]
TMP_62(bool) = REF_21 > 64
REF_22(None) -> _temp[i]
TMP_63(bool) = REF_22 < 91
TMP_64(bool) = TMP_62 && TMP_63
CONDITION TMP_64"];
14->15[label="True"];
14->19[label="False"];
15[label="Node Type: EXPRESSION 15

EXPRESSION:
_temp[i] = bytes1(uint256(_temp[i]) + 32)

IRs:
REF_23(bytes1) -> _temp[i]
REF_24(None) -> _temp[i]
TMP_65 = CONVERT REF_24 to uint256
TMP_66(uint256) = TMP_65 + 32
TMP_67 = CONVERT TMP_66 to bytes1
REF_23(bytes1) (->_temp) := TMP_67(bytes1)"];
15->16;
16[label="Node Type: IF 16

EXPRESSION:
_hasNonNumber == false

IRs:
TMP_68(bool) = _hasNonNumber == False
CONDITION TMP_68"];
16->17[label="True"];
16->18[label="False"];
17[label="Node Type: EXPRESSION 17

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->26;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
require(bool,string)(_temp[i] == 0x20 || (_temp[i] > 0x60 && _temp[i] < 0x7b) || (_temp[i] > 0x2f && _temp[i] < 0x3a),string contains invalid characters)

IRs:
REF_25(None) -> _temp[i]
TMP_69(bool) = REF_25 == 32
REF_26(None) -> _temp[i]
TMP_70(bool) = REF_26 > 96
REF_27(None) -> _temp[i]
TMP_71(bool) = REF_27 < 123
TMP_72(bool) = TMP_70 && TMP_71
TMP_73(bool) = TMP_69 || TMP_72
REF_28(None) -> _temp[i]
TMP_74(bool) = REF_28 > 47
REF_29(None) -> _temp[i]
TMP_75(bool) = REF_29 < 58
TMP_76(bool) = TMP_74 && TMP_75
TMP_77(bool) = TMP_73 || TMP_76
TMP_78(None) = SOLIDITY_CALL require(bool,string)(TMP_77,string contains invalid characters)"];
19->20;
20[label="Node Type: IF 20

EXPRESSION:
_temp[i] == 0x20

IRs:
REF_30(None) -> _temp[i]
TMP_79(bool) = REF_30 == 32
CONDITION TMP_79"];
20->21[label="True"];
20->22[label="False"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
require(bool,string)(_temp[i + 1] != 0x20,string cannot contain consecutive spaces)

IRs:
TMP_80(uint256) = i + 1
REF_31(None) -> _temp[TMP_80]
TMP_81(bool) = REF_31 != 32
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,string cannot contain consecutive spaces)"];
21->22;
22[label="Node Type: END_IF 22
"];
22->23;
23[label="Node Type: IF 23

EXPRESSION:
_hasNonNumber == false && (_temp[i] < 0x30 || _temp[i] > 0x39)

IRs:
TMP_83(bool) = _hasNonNumber == False
REF_32(None) -> _temp[i]
TMP_84(bool) = REF_32 < 48
REF_33(None) -> _temp[i]
TMP_85(bool) = REF_33 > 57
TMP_86(bool) = TMP_84 || TMP_85
TMP_87(bool) = TMP_83 && TMP_86
CONDITION TMP_87"];
23->24[label="True"];
23->25[label="False"];
24[label="Node Type: EXPRESSION 24

EXPRESSION:
_hasNonNumber = true

IRs:
_hasNonNumber(bool) := True(bool)"];
24->25;
25[label="Node Type: END_IF 25
"];
25->26;
26[label="Node Type: END_IF 26
"];
26->27;
27[label="Node Type: EXPRESSION 27

EXPRESSION:
i ++

IRs:
TMP_88(uint256) := i(uint256)
i(uint256) = i + 1"];
27->13;
28[label="Node Type: EXPRESSION 28

EXPRESSION:
require(bool,string)(_hasNonNumber == true,string cannot be only numbers)

IRs:
TMP_89(bool) = _hasNonNumber == True
TMP_90(None) = SOLIDITY_CALL require(bool,string)(TMP_89,string cannot be only numbers)"];
28->29;
29[label="Node Type: NEW VARIABLE 29
"];
29->30;
30[label="Node Type: INLINE ASM 30
"];
30->31;
31[label="Node Type: END INLINE ASM 31
"];
31->32;
32[label="Node Type: RETURN 32

EXPRESSION:
(_ret)

IRs:
RETURN _ret"];
}
// Function: 969.sol-PlayerBookInterface-getNameFee()
digraph{
}
// Function: 969.sol-PlayerBookInterface-getPlayerAddr(uint256)
digraph{
}
// Function: 969.sol-PlayerBookInterface-getPlayerID(address)
digraph{
}
// Function: 969.sol-PlayerBookInterface-getPlayerLAff(uint256)
digraph{
}
// Function: 969.sol-PlayerBookInterface-getPlayerName(uint256)
digraph{
}
// Function: 969.sol-PlayerBookInterface-registerNameXIDFromDapp(address,bytes32,uint256,bool)
digraph{
}
// Function: 969.sol-PlayerBookInterface-registerNameXaddrFromDapp(address,bytes32,address,bool)
digraph{
}
// Function: 969.sol-PlayerBookInterface-registerNameXnameFromDapp(address,bytes32,bytes32,bool)
digraph{
}
// Function: 969.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(c >= a,SafeMath add failed)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,SafeMath add failed)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
4[label="Node Type: RETURN 4

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 969.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 969.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool,string)(c / a == b,SafeMath mul failed)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool,string)(TMP_3,SafeMath mul failed)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
7[label="Node Type: RETURN 7

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 969.sol-SafeMath-pwr(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
x == 0

IRs:
TMP_19(bool) = x == 0
CONDITION TMP_19"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
(0)

IRs:
RETURN 0"];
3[label="Node Type: IF 3

EXPRESSION:
y == 0

IRs:
TMP_20(bool) = y == 0
CONDITION TMP_20"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: RETURN 4

EXPRESSION:
(1)

IRs:
RETURN 1"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
z = x

IRs:
z(uint256) := x(uint256)"];
5->8;
6[label="Node Type: BEGIN_LOOP 6
"];
6->9;
7[label="Node Type: END_LOOP 7
"];
7->12;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
i = 1

IRs:
i(uint256) := 1(uint256)"];
8->6;
9[label="Node Type: IF_LOOP 9

EXPRESSION:
i < y

IRs:
TMP_21(bool) = i < y
CONDITION TMP_21"];
9->10[label="True"];
9->7[label="False"];
10[label="Node Type: EXPRESSION 10

EXPRESSION:
z = mul(z,x)

IRs:
TMP_22(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(z,x)
z(uint256) := TMP_22(uint256)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_23(uint256) := i(uint256)
i(uint256) = i + 1"];
11->9;
12[label="Node Type: RETURN 12

EXPRESSION:
(z)

IRs:
RETURN z"];
}
// Function: 969.sol-SafeMath-sq(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
(mul(x,x))

IRs:
TMP_18(uint256) = INTERNAL_CALL, SafeMath.mul(uint256,uint256)(x,x)
RETURN TMP_18"];
}
// Function: 969.sol-SafeMath-sqrt(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
z = ((add(x,1)) / 2)

IRs:
TMP_12(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(x,1)
TMP_13(uint256) = TMP_12 / 2
z(uint256) := TMP_13(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
y = x

IRs:
y(uint256) := x(uint256)"];
2->3;
3[label="Node Type: BEGIN_LOOP 3
"];
3->4;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
z < y

IRs:
TMP_14(bool) = z < y
CONDITION TMP_14"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
y = z

IRs:
y(uint256) := z(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
z = ((add((x / z),z)) / 2)

IRs:
TMP_15(uint256) = x / z
TMP_16(uint256) = INTERNAL_CALL, SafeMath.add(uint256,uint256)(TMP_15,z)
TMP_17(uint256) = TMP_16 / 2
z(uint256) := TMP_17(uint256)"];
6->4;
7[label="Node Type: END_LOOP 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
y

IRs:
RETURN y"];
}
// Function: 969.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(b <= a,SafeMath sub failed)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,SafeMath sub failed)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
// Function: 969.sol-UintCompressor-exponent(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
((10).pwr(_position))

IRs:
TMP_127(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.pwr(uint256,uint256), arguments:['10', '_position'] 
RETURN TMP_127"];
}
// Function: 969.sol-UintCompressor-extract(uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_112(bool) = _end < 77
TMP_113(bool) = _start < 77
TMP_114(bool) = TMP_112 && TMP_113
TMP_115(None) = SOLIDITY_CALL require(bool,string)(TMP_114,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_116(bool) = _end >= _start
TMP_117(None) = SOLIDITY_CALL require(bool,string)(TMP_116,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_118(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_118', '10'] 
_end(uint256) := TMP_119(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_120(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_120(uint256)"];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
((((_input / _start).mul(_start)).sub((_input / _end).mul(_end))) / _start)

IRs:
TMP_121(uint256) = _input / _start
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_121', '_start'] 
TMP_123(uint256) = _input / _end
TMP_124(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_123', '_end'] 
TMP_125(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_122', 'TMP_124'] 
TMP_126(uint256) = TMP_125 / _start
RETURN TMP_126"];
}
// Function: 969.sol-UintCompressor-insert(uint256,uint256,uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(_end < 77 && _start < 77,start/end must be less than 77)

IRs:
TMP_91(bool) = _end < 77
TMP_92(bool) = _start < 77
TMP_93(bool) = TMP_91 && TMP_92
TMP_94(None) = SOLIDITY_CALL require(bool,string)(TMP_93,start/end must be less than 77)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(_end >= _start,end must be >= start)

IRs:
TMP_95(bool) = _end >= _start
TMP_96(None) = SOLIDITY_CALL require(bool,string)(TMP_95,end must be >= start)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_end = exponent(_end).mul(10)

IRs:
TMP_97(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_end)
TMP_98(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_97', '10'] 
_end(uint256) := TMP_98(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_start = exponent(_start)

IRs:
TMP_99(uint256) = INTERNAL_CALL, UintCompressor.exponent(uint256)(_start)
_start(uint256) := TMP_99(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(_include < (_end / _start))

IRs:
TMP_100(uint256) = _end / _start
TMP_101(bool) = _include < TMP_100
TMP_102(None) = SOLIDITY_CALL require(bool)(TMP_101)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
_include > 0

IRs:
TMP_103(bool) = _include > 0
CONDITION TMP_103"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
_include = _include.mul(_start)

IRs:
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['_include', '_start'] 
_include(uint256) := TMP_104(uint256)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: RETURN 9

EXPRESSION:
((_var.sub((_var / _start).mul(_start))).add(_include).add((_var / _end).mul(_end)))

IRs:
TMP_105(uint256) = _var / _start
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_105', '_start'] 
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['_var', 'TMP_106'] 
TMP_108(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_107', '_include'] 
TMP_109(uint256) = _var / _end
TMP_110(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['TMP_109', '_end'] 
TMP_111(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_108', 'TMP_110'] 
RETURN TMP_111"];
}
// Function: 969.sol-otherFoMo3D-potSwap()
digraph{
}
}
