digraph G {
// Function: 981.sol-Contract-Controller()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 981.sol-Contract-buy_the_tokens(bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! bought_tokens && sale != 0x0)

IRs:
TMP_21 = UnaryType.BANG bought_tokens 
TMP_22(bool) = sale != 0
TMP_23(bool) = TMP_21 && TMP_22
TMP_24(None) = SOLIDITY_CALL require(bool)(TMP_23)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
bought_tokens = true

IRs:
bought_tokens(bool) := True(bool)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
const_contract_eth_value = this.balance

IRs:
REF_3(uint256) = SOLIDITY_CALL balance(address)(this)
const_contract_eth_value(uint256) := REF_3([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fcb934e1270>])"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
take_fees_eth_dev()

IRs:
INTERNAL_CALL, Contract.take_fees_eth_dev()()"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
take_fees_eth_owner()

IRs:
INTERNAL_CALL, Contract.take_fees_eth_owner()()"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
const_contract_eth_value = this.balance

IRs:
REF_4(uint256) = SOLIDITY_CALL balance(address)(this)
const_contract_eth_value(uint256) := REF_4([<slither.core.solidity_types.elementary_type.ElementaryType object at 0x7fcb934e1450>])"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool)(sale.call.gas(msg.gas).value(this.balance)(_data))

IRs:
REF_8(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_29(bool) = LOW_LEVEL_CALL, dest:sale, function:call, arguments:['_data'] value:REF_8 gas:msg.gas
TMP_30(None) = SOLIDITY_CALL require(bool)(TMP_29)"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
8->1;
}
// Function: 981.sol-Contract-calculate_with_fees(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
temp = _amount

IRs:
temp(uint256) := _amount(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
FEE_DEV != 0

IRs:
TMP_114(bool) = FEE_DEV != 0
CONDITION TMP_114"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
temp = temp.add(_amount.div(FEE_DEV / 2))

IRs:
TMP_115(uint256) = FEE_DEV / 2
TMP_116(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_amount', 'TMP_115'] 
TMP_117(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['temp', 'TMP_116'] 
temp(uint256) := TMP_117(uint256)"];
3->4;
4[label="Node Type: END_IF 4
"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
FEE_OWNER != 0

IRs:
TMP_118(bool) = FEE_OWNER != 0
CONDITION TMP_118"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
temp = temp.add(_amount.div(FEE_OWNER))

IRs:
TMP_119(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['_amount', 'FEE_OWNER'] 
TMP_120(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['temp', 'TMP_119'] 
temp(uint256) := TMP_120(uint256)"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
temp

IRs:
RETURN temp"];
}
// Function: 981.sol-Contract-change_fee(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FEE_OWNER = _fee

IRs:
FEE_OWNER(uint256) := _fee(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-change_individual_cap(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
individual_cap = _cap

IRs:
individual_cap(uint256) := _cap(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-change_max_amount(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
max_amount = calculate_with_fees(_amount)

IRs:
TMP_63(uint256) = INTERNAL_CALL, Contract.calculate_with_fees(uint256)(_amount)
max_amount(uint256) := TMP_63(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-change_owner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(new_owner != 0x0)

IRs:
TMP_17(bool) = new_owner != 0
TMP_18(None) = SOLIDITY_CALL require(bool)(TMP_17)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = new_owner

IRs:
owner(address) := new_owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
3->1;
}
// Function: 981.sol-Contract-constructor(uint256,bool,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
FEE_OWNER = _owner_fee_divisor

IRs:
FEE_OWNER(uint256) := _owner_fee_divisor(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
max_amount = calculate_with_fees(_max_amount)

IRs:
TMP_20(uint256) = INTERNAL_CALL, Contract.calculate_with_fees(uint256)(_max_amount)
max_amount(uint256) := TMP_20(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
whitelist_enabled = _whitelist

IRs:
whitelist_enabled(bool) := _whitelist(bool)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
contributor = contributors[msg.sender]

IRs:
REF_0(Contract.Contributor) -> contributors[msg.sender]
contributor(Contract.Contributor) := REF_0(Contract.Contributor)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contributor.whitelisted = true

IRs:
REF_1(bool) -> contributor.whitelisted
REF_1(bool) (->contributor) := True(bool)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
total_fees.length = 2

IRs:
REF_2 -> LENGTH total_fees
REF_2(uint256) (->total_fees) := 2(uint256)"];
}
// Function: 981.sol-Contract-emergency_eth_withdraw()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_19(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_19"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-emergency_token_withdraw(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
temp_token = ERC20(_address)

IRs:
TMP_66 = CONVERT _address to ERC20
temp_token(ERC20) := TMP_66(ERC20)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(temp_token.transfer(msg.sender,temp_token.balanceOf(this)))

IRs:
TMP_67(uint256) = HIGH_LEVEL_CALL, dest:temp_token(ERC20), function:balanceOf, arguments:['this']  
TMP_68(bool) = HIGH_LEVEL_CALL, dest:temp_token(ERC20), function:transfer, arguments:['msg.sender', 'TMP_67']  
TMP_69(None) = SOLIDITY_CALL require(bool)(TMP_68)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
3->1;
}
// Function: 981.sol-Contract-fallback()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->21;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! bought_tokens && allow_contributions && (gas_price_max == 0 || tx.gasprice <= gas_price_max))

IRs:
TMP_143 = UnaryType.BANG bought_tokens 
TMP_144(bool) = TMP_143 && allow_contributions
TMP_145(bool) = gas_price_max == 0
TMP_146(bool) = tx.gasprice <= gas_price_max
TMP_147(bool) = TMP_145 || TMP_146
TMP_148(bool) = TMP_144 && TMP_147
TMP_149(None) = SOLIDITY_CALL require(bool)(TMP_148)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
contributor = contributors[msg.sender]

IRs:
REF_89(Contract.Contributor) -> contributors[msg.sender]
contributor(Contract.Contributor) := REF_89(Contract.Contributor)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
whitelist_enabled

IRs:
CONDITION whitelist_enabled"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool)(contributor.whitelisted)

IRs:
REF_90(bool) -> contributor.whitelisted
TMP_150(None) = SOLIDITY_CALL require(bool)(REF_90)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
fee = 0

IRs:
fee(uint256) := 0(uint256)"];
6->7;
7[label="Node Type: IF 7

EXPRESSION:
FEE_OWNER != 0

IRs:
TMP_151(bool) = FEE_OWNER != 0
CONDITION TMP_151"];
7->8[label="True"];
7->11[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
fee = SafeMath.div(msg.value,FEE_OWNER)

IRs:
TMP_152(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', 'FEE_OWNER'] 
fee(uint256) := TMP_152(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
contributor.fee_owner += fee

IRs:
REF_92(uint256) -> contributor.fee_owner
REF_92(-> contributor) = REF_92 + fee"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
total_fees[0] += fee

IRs:
REF_93(uint256) -> total_fees[0]
REF_93(-> total_fees) = REF_93 + fee"];
10->11;
11[label="Node Type: END_IF 11
"];
11->12;
12[label="Node Type: NEW VARIABLE 12

EXPRESSION:
fees = fee

IRs:
fees(uint256) := fee(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
FEE_DEV != 0

IRs:
TMP_153(bool) = FEE_DEV != 0
CONDITION TMP_153"];
13->14[label="True"];
13->18[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
fee = msg.value.div(FEE_DEV)

IRs:
TMP_154(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['msg.value', 'FEE_DEV'] 
fee(uint256) := TMP_154(uint256)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
total_fees[1] += fee

IRs:
REF_95(uint256) -> total_fees[1]
REF_95(-> total_fees) = REF_95 + fee"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
contributor.fee_devs += fee * 2

IRs:
REF_96(uint256) -> contributor.fee_devs
TMP_155(uint256) = fee * 2
REF_96(-> contributor) = REF_96 + TMP_155"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
fees = fees.add(fee * 2)

IRs:
TMP_156(uint256) = fee * 2
TMP_157(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['fees', 'TMP_156'] 
fees(uint256) := TMP_157(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
contributor.balance = contributor.balance.add(msg.value.sub(fees))

IRs:
REF_98(uint256) -> contributor.balance
REF_99(uint256) -> contributor.balance
TMP_158(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['msg.value', 'fees'] 
TMP_159(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_99', 'TMP_158'] 
REF_98(uint256) (->contributor) := TMP_159(uint256)"];
19->20;
20[label="Node Type: EXPRESSION 20

EXPRESSION:
require(bool)(individual_cap == 0 || contributor.balance <= individual_cap)

IRs:
TMP_160(bool) = individual_cap == 0
REF_102(uint256) -> contributor.balance
TMP_161(bool) = REF_102 <= individual_cap
TMP_162(bool) = TMP_160 || TMP_161
TMP_163(None) = SOLIDITY_CALL require(bool)(TMP_162)"];
21[label="Node Type: EXPRESSION 21

EXPRESSION:
underMaxAmount()

IRs:
MODIFIER_CALL, Contract.underMaxAmount()()"];
21->1;
}
// Function: 981.sol-Contract-force_partial_refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partial_refund(_addy)

IRs:
INTERNAL_CALL, Contract.partial_refund(address)(_addy)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-force_refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refund(_addy)

IRs:
INTERNAL_CALL, Contract.refund(address)(_addy)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_165(bool) = msg.sender == owner
TMP_166(None) = SOLIDITY_CALL require(bool)(TMP_165)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 981.sol-Contract-partial_refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bought_tokens && allow_refunds && rounds == 0 && percent_reduction > 0)

IRs:
TMP_94(bool) = bought_tokens && allow_refunds
TMP_95(bool) = rounds == 0
TMP_96(bool) = TMP_94 && TMP_95
TMP_97(bool) = percent_reduction > 0
TMP_98(bool) = TMP_96 && TMP_97
TMP_99(None) = SOLIDITY_CALL require(bool)(TMP_98)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
contributor = contributors[_user]

IRs:
REF_53(Contract.Contributor) -> contributors[_user]
contributor(Contract.Contributor) := REF_53(Contract.Contributor)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(contributor.rounds == 0)

IRs:
REF_54(uint8) -> contributor.rounds
TMP_100(bool) = REF_54 == 0
TMP_101(None) = SOLIDITY_CALL require(bool)(TMP_100)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
eth_to_withdraw = contributor.balance.mul(percent_reduction).div(100)

IRs:
REF_55(uint256) -> contributor.balance
TMP_102(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_55', 'percent_reduction'] 
TMP_103(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_102', '100'] 
eth_to_withdraw(uint256) := TMP_103(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
contributor.balance = contributor.balance.sub(eth_to_withdraw)

IRs:
REF_58(uint256) -> contributor.balance
REF_59(uint256) -> contributor.balance
TMP_104(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_59', 'eth_to_withdraw'] 
REF_58(uint256) (->contributor) := TMP_104(uint256)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
owner_supplied_eth

IRs:
CONDITION owner_supplied_eth"];
6->7[label="True"];
6->9[label="False"];
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
fee = contributor.fee_owner.mul(percent_reduction).div(100)

IRs:
REF_61(uint256) -> contributor.fee_owner
TMP_105(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_61', 'percent_reduction'] 
TMP_106(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_105', '100'] 
fee(uint256) := TMP_106(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
eth_to_withdraw = eth_to_withdraw.add(fee)

IRs:
TMP_107(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['eth_to_withdraw', 'fee'] 
eth_to_withdraw(uint256) := TMP_107(uint256)"];
8->9;
9[label="Node Type: END_IF 9
"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
_user.transfer(eth_to_withdraw)

IRs:
Transfer dest:_user value:eth_to_withdraw"];
}
// Function: 981.sol-Contract-partial_refund_my_ether()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
partial_refund(msg.sender)

IRs:
INTERNAL_CALL, Contract.partial_refund(address)(msg.sender)"];
}
// Function: 981.sol-Contract-provide_eth()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
}
// Function: 981.sol-Contract-refund(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(! bought_tokens && allow_refunds && percent_reduction == 0)

IRs:
TMP_86 = UnaryType.BANG bought_tokens 
TMP_87(bool) = TMP_86 && allow_refunds
TMP_88(bool) = percent_reduction == 0
TMP_89(bool) = TMP_87 && TMP_88
TMP_90(None) = SOLIDITY_CALL require(bool)(TMP_89)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
contributor = contributors[_user]

IRs:
REF_39(Contract.Contributor) -> contributors[_user]
contributor(Contract.Contributor) := REF_39(Contract.Contributor)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
total_fees[0] -= contributor.fee_owner

IRs:
REF_40(uint256) -> total_fees[0]
REF_41(uint256) -> contributor.fee_owner
REF_40(-> total_fees) = REF_40 - REF_41"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
total_fees[1] -= contributor.fee_devs

IRs:
REF_42(uint256) -> total_fees[1]
REF_43(uint256) -> contributor.fee_devs
REF_42(-> total_fees) = REF_42 - REF_43"];
4->5;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
eth_to_withdraw = contributor.balance.add(contributor.fee_owner).add(contributor.fee_devs)

IRs:
REF_44(uint256) -> contributor.balance
REF_46(uint256) -> contributor.fee_owner
TMP_91(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['REF_44', 'REF_46'] 
REF_48(uint256) -> contributor.fee_devs
TMP_92(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['TMP_91', 'REF_48'] 
eth_to_withdraw(uint256) := TMP_92(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
contributor.balance = 0

IRs:
REF_49(uint256) -> contributor.balance
REF_49(uint256) (->contributor) := 0(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
contributor.fee_owner = 0

IRs:
REF_50(uint256) -> contributor.fee_owner
REF_50(uint256) (->contributor) := 0(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
contributor.fee_devs = 0

IRs:
REF_51(uint256) -> contributor.fee_devs
REF_51(uint256) (->contributor) := 0(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_user.transfer(eth_to_withdraw)

IRs:
Transfer dest:_user value:eth_to_withdraw"];
}
// Function: 981.sol-Contract-refund_my_ether()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
refund(msg.sender)

IRs:
INTERNAL_CALL, Contract.refund(address)(msg.sender)"];
}
// Function: 981.sol-Contract-set_allow_contributions(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allow_contributions = _boolean

IRs:
allow_contributions(bool) := _boolean(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-set_allow_refunds(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
allow_refunds = _boolean

IRs:
allow_refunds(bool) := _boolean(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-set_gas_price_max(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
gas_price_max = _gas_price

IRs:
gas_price_max(uint256) := _gas_price(uint256)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-set_percent_reduction(uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->7;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bought_tokens && rounds == 0 && _reduction <= 100)

IRs:
TMP_51(bool) = rounds == 0
TMP_52(bool) = bought_tokens && TMP_51
TMP_53(bool) = _reduction <= 100
TMP_54(bool) = TMP_52 && TMP_53
TMP_55(None) = SOLIDITY_CALL require(bool)(TMP_54)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
percent_reduction = _reduction

IRs:
percent_reduction(uint256) := _reduction(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
msg.value > 0

IRs:
TMP_56(bool) = msg.value > 0
CONDITION TMP_56"];
3->4[label="True"];
3->5[label="False"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
owner_supplied_eth = true

IRs:
owner_supplied_eth(bool) := True(bool)"];
4->5;
5[label="Node Type: END_IF 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
const_contract_eth_value = const_contract_eth_value.sub((const_contract_eth_value.mul(_reduction)).div(100))

IRs:
TMP_57(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['const_contract_eth_value', '_reduction'] 
TMP_58(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_57', '100'] 
TMP_59(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['const_contract_eth_value', 'TMP_58'] 
const_contract_eth_value(uint256) := TMP_59(uint256)"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
7->1;
}
// Function: 981.sol-Contract-set_sale_address(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_sale != 0x0)

IRs:
TMP_40(bool) = _sale != 0
TMP_41(None) = SOLIDITY_CALL require(bool)(TMP_40)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
sale = _sale

IRs:
sale(address) := _sale(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
3->1;
}
// Function: 981.sol-Contract-set_token_address(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(_token != 0x0)

IRs:
TMP_43(bool) = _token != 0
TMP_44(None) = SOLIDITY_CALL require(bool)(TMP_43)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
token = ERC20(_token)

IRs:
TMP_45 = CONVERT _token to ERC20
token(ERC20) := TMP_45(ERC20)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
3->1;
}
// Function: 981.sol-Contract-set_tokens_received()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokens_received()

IRs:
INTERNAL_CALL, Contract.tokens_received()()"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-set_whitelist_enabled(bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
whitelist_enabled = _boolean

IRs:
whitelist_enabled(bool) := _boolean(bool)"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
2->1;
}
// Function: 981.sol-Contract-slitherConstructorConstantVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
DEVELOPER1 = 0x8C006d807EBAe91F341a4308132Fd756808e0126

IRs:
DEVELOPER1(address) := 799268246879100284097870484044433199888098787622(address)"];
0->1;
1[label="Node Type: OTHER_ENTRYPOINT 1

EXPRESSION:
DEVELOPER2 = 0x63F7547Ac277ea0B52A0B060Be6af8C5904953aa

IRs:
DEVELOPER2(address) := 570705729580557070519619823091123259841444402090(address)"];
1->2;
2[label="Node Type: OTHER_ENTRYPOINT 2

EXPRESSION:
FEE_DEV = 670

IRs:
FEE_DEV(uint256) := 670(uint256)"];
}
// Function: 981.sol-Contract-slitherConstructorVariables()
digraph{
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
allow_contributions = true

IRs:
allow_contributions(bool) := True(bool)"];
}
// Function: 981.sol-Contract-take_fees_eth_dev()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
FEE_DEV != 0

IRs:
TMP_109(bool) = FEE_DEV != 0
CONDITION TMP_109"];
1->2[label="True"];
1->4[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
DEVELOPER1.transfer(total_fees[1])

IRs:
REF_67(uint256) -> total_fees[1]
Transfer dest:DEVELOPER1 value:REF_67"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
DEVELOPER2.transfer(total_fees[1])

IRs:
REF_69(uint256) -> total_fees[1]
Transfer dest:DEVELOPER2 value:REF_69"];
3->4;
4[label="Node Type: END_IF 4
"];
}
// Function: 981.sol-Contract-take_fees_eth_owner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
FEE_OWNER != 0

IRs:
TMP_112(bool) = FEE_OWNER != 0
CONDITION TMP_112"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner.transfer(total_fees[0])

IRs:
REF_71(uint256) -> total_fees[0]
Transfer dest:owner value:REF_71"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 981.sol-Contract-tokenFallback(address,uint256,bytes)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
ERC20(msg.sender) == token

IRs:
TMP_132 = CONVERT msg.sender to ERC20
TMP_133(bool) = TMP_132 == token
CONDITION TMP_133"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
tokens_received()

IRs:
INTERNAL_CALL, Contract.tokens_received()()"];
2->3;
3[label="Node Type: END_IF 3
"];
}
// Function: 981.sol-Contract-tokens_received()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint8) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < snapshots.length

IRs:
REF_76 -> LENGTH snapshots
TMP_121(bool) = i < REF_76
CONDITION TMP_121"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
previous_balance = previous_balance.add(snapshots[i].tokens_balance)

IRs:
REF_78(Contract.Snapshot) -> snapshots[i]
REF_79(uint256) -> REF_78.tokens_balance
TMP_122(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.add(uint256,uint256), arguments:['previous_balance', 'REF_79'] 
previous_balance(uint256) := TMP_122(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_123(uint8) := i(uint8)
i(uint8) = i + 1"];
7->5;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
snapshots.push(Snapshot(token.balanceOf(address(this)).sub(previous_balance),const_contract_eth_value))

IRs:
TMP_124 = CONVERT this to address
TMP_125(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['TMP_124']  
TMP_126(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['TMP_125', 'previous_balance'] 
TMP_127(Contract.Snapshot) = new Snapshot(TMP_126,const_contract_eth_value)
REF_83 -> LENGTH snapshots
TMP_129(uint256) := REF_83(uint256)
TMP_130(uint256) = TMP_129 + 1
REF_83(uint256) (->snapshots) := TMP_130(uint256)
REF_84(Contract.Snapshot) -> snapshots[TMP_129]
REF_84(Contract.Snapshot) (->snapshots) := TMP_127(Contract.Snapshot)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
rounds ++

IRs:
TMP_131(uint8) := rounds(uint8)
rounds(uint8) = rounds + 1"];
}
// Function: 981.sol-Contract-underMaxAmount()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(max_amount == 0 || this.balance <= max_amount)

IRs:
TMP_167(bool) = max_amount == 0
REF_103(uint256) = SOLIDITY_CALL balance(address)(this)
TMP_168(bool) = REF_103 <= max_amount
TMP_169(bool) = TMP_167 || TMP_168
TMP_170(None) = SOLIDITY_CALL require(bool)(TMP_169)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 981.sol-Contract-whitelist_addys(address[],bool)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < _addys.length

IRs:
REF_9 -> LENGTH _addys
TMP_32(bool) = i < REF_9
CONDITION TMP_32"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
contributor = contributors[_addys[i]]

IRs:
REF_10(address) -> _addys[i]
REF_11(Contract.Contributor) -> contributors[REF_10]
contributor(Contract.Contributor) := REF_11(Contract.Contributor)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
contributor.whitelisted = _state

IRs:
REF_12(bool) -> contributor.whitelisted
REF_12(bool) (->contributor) := _state(bool)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_33(uint256) := i(uint256)
i(uint256) = i + 1"];
7->4;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
8->3;
}
// Function: 981.sol-Contract-withdraw(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(bought_tokens)

IRs:
TMP_73(None) = SOLIDITY_CALL require(bool)(bought_tokens)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
contract_token_balance = token.balanceOf(address(this))

IRs:
TMP_74 = CONVERT this to address
TMP_75(uint256) = HIGH_LEVEL_CALL, dest:token(ERC20), function:balanceOf, arguments:['TMP_74']  
contract_token_balance(uint256) := TMP_75(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
require(bool)(contract_token_balance != 0)

IRs:
TMP_76(bool) = contract_token_balance != 0
TMP_77(None) = SOLIDITY_CALL require(bool)(TMP_76)"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
contributor = contributors[_user]

IRs:
REF_21(Contract.Contributor) -> contributors[_user]
contributor(Contract.Contributor) := REF_21(Contract.Contributor)"];
4->5;
5[label="Node Type: IF 5

EXPRESSION:
contributor.rounds < rounds

IRs:
REF_22(uint8) -> contributor.rounds
TMP_78(bool) = REF_22 < rounds
CONDITION TMP_78"];
5->6[label="True"];
5->12[label="False"];
6[label="Node Type: NEW VARIABLE 6

EXPRESSION:
snapshot = snapshots[contributor.rounds]

IRs:
REF_23(uint8) -> contributor.rounds
REF_24(Contract.Snapshot) -> snapshots[REF_23]
snapshot(Contract.Snapshot) := REF_24(Contract.Snapshot)"];
6->7;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
tokens_to_withdraw = contributor.balance.mul(snapshot.tokens_balance).div(snapshot.eth_balance)

IRs:
REF_25(uint256) -> contributor.balance
REF_27(uint256) -> snapshot.tokens_balance
TMP_79(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['REF_25', 'REF_27'] 
REF_29(uint256) -> snapshot.eth_balance
TMP_80(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.div(uint256,uint256), arguments:['TMP_79', 'REF_29'] 
tokens_to_withdraw(uint256) := TMP_80(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
snapshot.tokens_balance = snapshot.tokens_balance.sub(tokens_to_withdraw)

IRs:
REF_30(uint256) -> snapshot.tokens_balance
REF_31(uint256) -> snapshot.tokens_balance
TMP_81(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_31', 'tokens_to_withdraw'] 
REF_30(uint256) (->snapshot) := TMP_81(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
snapshot.eth_balance = snapshot.eth_balance.sub(contributor.balance)

IRs:
REF_33(uint256) -> snapshot.eth_balance
REF_34(uint256) -> snapshot.eth_balance
REF_36(uint256) -> contributor.balance
TMP_82(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.sub(uint256,uint256), arguments:['REF_34', 'REF_36'] 
REF_33(uint256) (->snapshot) := TMP_82(uint256)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
contributor.rounds ++

IRs:
REF_37(uint8) -> contributor.rounds
TMP_83(uint8) := REF_37(uint8)
REF_37(-> contributor) = REF_37 + 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
require(bool)(token.transfer(_user,tokens_to_withdraw))

IRs:
TMP_84(bool) = HIGH_LEVEL_CALL, dest:token(ERC20), function:transfer, arguments:['_user', 'tokens_to_withdraw']  
TMP_85(None) = SOLIDITY_CALL require(bool)(TMP_84)"];
11->12;
12[label="Node Type: END_IF 12
"];
}
// Function: 981.sol-Contract-withdraw_my_tokens()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = contributors[msg.sender].rounds

IRs:
REF_85(Contract.Contributor) -> contributors[msg.sender]
REF_86(uint8) -> REF_85.rounds
i(uint8) := REF_86(uint8)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < rounds

IRs:
TMP_135(bool) = i < rounds
CONDITION TMP_135"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
withdraw(msg.sender)

IRs:
INTERNAL_CALL, Contract.withdraw(address)(msg.sender)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_137(uint8) := i(uint8)
i(uint8) = i + 1"];
6->4;
}
// Function: 981.sol-Contract-withdraw_tokens_for(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = contributors[_addy].rounds

IRs:
REF_87(Contract.Contributor) -> contributors[_addy]
REF_88(uint8) -> REF_87.rounds
i(uint8) := REF_88(uint8)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < rounds

IRs:
TMP_138(bool) = i < rounds
CONDITION TMP_138"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
withdraw(_addy)

IRs:
INTERNAL_CALL, Contract.withdraw(address)(_addy)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
i ++

IRs:
TMP_140(uint8) := i(uint8)
i(uint8) = i + 1"];
6->4;
}
// Function: 981.sol-Controller-Controller()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
}
// Function: 981.sol-Controller-change_owner(address)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(new_owner != 0x0)

IRs:
TMP_12(bool) = new_owner != 0
TMP_13(None) = SOLIDITY_CALL require(bool)(TMP_12)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
owner = new_owner

IRs:
owner(address) := new_owner(address)"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Controller.onlyOwner()()"];
3->1;
}
// Function: 981.sol-Controller-onlyOwner()
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_15(bool) = msg.sender == owner
TMP_16(None) = SOLIDITY_CALL require(bool)(TMP_15)"];
1->2;
2[label="Node Type: _ 2
"];
}
// Function: 981.sol-ERC20-balanceOf(address)
digraph{
}
// Function: 981.sol-ERC20-transfer(address,uint256)
digraph{
}
// Function: 981.sol-SafeMath-add(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a + b

IRs:
TMP_9(uint256) = a + b
c(uint256) := TMP_9(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
assert(bool)(c >= a)

IRs:
TMP_10(bool) = c >= a
TMP_11(None) = SOLIDITY_CALL assert(bool)(TMP_10)"];
2->3;
3[label="Node Type: RETURN 3

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 981.sol-SafeMath-div(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
c = a / b

IRs:
TMP_5(uint256) = a / b
c(uint256) := TMP_5(uint256)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 981.sol-SafeMath-mul(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
assert(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL assert(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
}
// Function: 981.sol-SafeMath-sub(uint256,uint256)
digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
assert(bool)(b <= a)

IRs:
TMP_6(bool) = b <= a
TMP_7(None) = SOLIDITY_CALL assert(bool)(TMP_6)"];
1->2;
2[label="Node Type: RETURN 2

EXPRESSION:
a - b

IRs:
TMP_8(uint256) = a - b
RETURN TMP_8"];
}
}
